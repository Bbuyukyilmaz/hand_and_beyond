
hand_and_beyond.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009178  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08009318  08009318  00019318  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009568  08009568  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08009568  08009568  00019568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009570  08009570  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009570  08009570  00019570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009574  08009574  00019574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009578  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000812c  20000078  080095f0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200081a4  080095f0  000281a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fb24  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cd0  00000000  00000000  0002fc0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca8  00000000  00000000  000328e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ac  00000000  00000000  00033588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018fbe  00000000  00000000  00033f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011d2e  00000000  00000000  0004cef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099f5d  00000000  00000000  0005ec20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a30  00000000  00000000  000f8b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000fc5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009300 	.word	0x08009300

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08009300 	.word	0x08009300

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2iz>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d215      	bcs.n	8000aee <__aeabi_d2iz+0x36>
 8000ac2:	d511      	bpl.n	8000ae8 <__aeabi_d2iz+0x30>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d912      	bls.n	8000af4 <__aeabi_d2iz+0x3c>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d105      	bne.n	8000b00 <__aeabi_d2iz+0x48>
 8000af4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	bf08      	it	eq
 8000afa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_d2f>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b10:	bf24      	itt	cs
 8000b12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1a:	d90d      	bls.n	8000b38 <__aeabi_d2f+0x30>
 8000b1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b3c:	d121      	bne.n	8000b82 <__aeabi_d2f+0x7a>
 8000b3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b42:	bfbc      	itt	lt
 8000b44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	4770      	bxlt	lr
 8000b4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b52:	f1c2 0218 	rsb	r2, r2, #24
 8000b56:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b62:	bf18      	it	ne
 8000b64:	f040 0001 	orrne.w	r0, r0, #1
 8000b68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b74:	ea40 000c 	orr.w	r0, r0, ip
 8000b78:	fa23 f302 	lsr.w	r3, r3, r2
 8000b7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b80:	e7cc      	b.n	8000b1c <__aeabi_d2f+0x14>
 8000b82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b86:	d107      	bne.n	8000b98 <__aeabi_d2f+0x90>
 8000b88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b8c:	bf1e      	ittt	ne
 8000b8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b96:	4770      	bxne	lr
 8000b98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000eb4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <vApplicationGetIdleTaskMemory+0x30>)
 8000eba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2280      	movs	r2, #128	; 0x80
 8000ec0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ec2:	bf00      	nop
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000094 	.word	0x20000094
 8000ed4:	200000e8 	.word	0x200000e8

08000ed8 <SemaphoreInit>:
static void MX_USART2_UART_Init(void);
void StartDefaultTask(void const * argument);
void MotorTask(void const * argument);

/* USER CODE BEGIN PFP */
void SemaphoreInit(void){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	handFlexHandle = xSemaphoreCreateBinary();
 8000edc:	2203      	movs	r2, #3
 8000ede:	2100      	movs	r1, #0
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f004 f949 	bl	8005178 <xQueueGenericCreate>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	4a09      	ldr	r2, [pc, #36]	; (8000f10 <SemaphoreInit+0x38>)
 8000eea:	6013      	str	r3, [r2, #0]
	handReleaseHandle = xSemaphoreCreateBinary();
 8000eec:	2203      	movs	r2, #3
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f004 f941 	bl	8005178 <xQueueGenericCreate>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <SemaphoreInit+0x3c>)
 8000efa:	6013      	str	r3, [r2, #0]
	pclistenerHandle = xSemaphoreCreateBinary();
 8000efc:	2203      	movs	r2, #3
 8000efe:	2100      	movs	r1, #0
 8000f00:	2001      	movs	r0, #1
 8000f02:	f004 f939 	bl	8005178 <xQueueGenericCreate>
 8000f06:	4603      	mov	r3, r0
 8000f08:	4a03      	ldr	r2, [pc, #12]	; (8000f18 <SemaphoreInit+0x40>)
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	200003b8 	.word	0x200003b8
 8000f14:	200003bc 	.word	0x200003bc
 8000f18:	200003c0 	.word	0x200003c0

08000f1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f20:	f001 fb3a 	bl	8002598 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f24:	f000 f822 	bl	8000f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f28:	f000 f934 	bl	8001194 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000f2c:	f000 f908 	bl	8001140 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000f30:	f000 f888 	bl	8001044 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000f34:	f000 f8da 	bl	80010ec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  UI_Init();
 8000f38:	f001 fa0a 	bl	8002350 <UI_Init>
  EmgConfigInit();
 8000f3c:	f000 faf0 	bl	8001520 <EmgConfigInit>

  /* Create the semaphores(s) */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  SemaphoreInit();
 8000f40:	f7ff ffca 	bl	8000ed8 <SemaphoreInit>
  xQueue = xQueueCreate(100, sizeof(uint8_t) * 10);  // Queue for 10 elements, each of size 4 bytes
 8000f44:	2200      	movs	r2, #0
 8000f46:	210a      	movs	r1, #10
 8000f48:	2064      	movs	r0, #100	; 0x64
 8000f4a:	f004 f915 	bl	8005178 <xQueueGenericCreate>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	4a05      	ldr	r2, [pc, #20]	; (8000f68 <main+0x4c>)
 8000f52:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */

  /* USER CODE BEGIN RTOS_THREADS */
  MotorTaskInit();
 8000f54:	f001 f802 	bl	8001f5c <MotorTaskInit>
  EmgTaskInit();
 8000f58:	f000 fe46 	bl	8001be8 <EmgTaskInit>
  UARTReceiveTaskInit();
 8000f5c:	f001 faaa 	bl	80024b4 <UARTReceiveTaskInit>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 8000f60:	f004 ffee 	bl	8005f40 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <main+0x48>
 8000f66:	bf00      	nop
 8000f68:	200003c4 	.word	0x200003c4

08000f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b094      	sub	sp, #80	; 0x50
 8000f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f72:	f107 0320 	add.w	r3, r7, #32
 8000f76:	2230      	movs	r2, #48	; 0x30
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f008 f980 	bl	8009280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f90:	2300      	movs	r3, #0
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	4b29      	ldr	r3, [pc, #164]	; (800103c <SystemClock_Config+0xd0>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	4a28      	ldr	r2, [pc, #160]	; (800103c <SystemClock_Config+0xd0>)
 8000f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa0:	4b26      	ldr	r3, [pc, #152]	; (800103c <SystemClock_Config+0xd0>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	4b23      	ldr	r3, [pc, #140]	; (8001040 <SystemClock_Config+0xd4>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fb8:	4a21      	ldr	r2, [pc, #132]	; (8001040 <SystemClock_Config+0xd4>)
 8000fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <SystemClock_Config+0xd4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fd4:	2310      	movs	r3, #16
 8000fd6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fe0:	2310      	movs	r3, #16
 8000fe2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fe4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fe8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fea:	2304      	movs	r3, #4
 8000fec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fee:	2307      	movs	r3, #7
 8000ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff2:	f107 0320 	add.w	r3, r7, #32
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f002 fa88 	bl	800350c <HAL_RCC_OscConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001002:	f000 f937 	bl	8001274 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001006:	230f      	movs	r3, #15
 8001008:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100a:	2302      	movs	r3, #2
 800100c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001016:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	2102      	movs	r1, #2
 8001022:	4618      	mov	r0, r3
 8001024:	f002 fcea 	bl	80039fc <HAL_RCC_ClockConfig>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800102e:	f000 f921 	bl	8001274 <Error_Handler>
  }
}
 8001032:	bf00      	nop
 8001034:	3750      	adds	r7, #80	; 0x50
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40023800 	.word	0x40023800
 8001040:	40007000 	.word	0x40007000

08001044 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800104a:	463b      	mov	r3, r7
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001056:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <MX_ADC1_Init+0x9c>)
 8001058:	4a22      	ldr	r2, [pc, #136]	; (80010e4 <MX_ADC1_Init+0xa0>)
 800105a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800105c:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <MX_ADC1_Init+0x9c>)
 800105e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001062:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001064:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <MX_ADC1_Init+0x9c>)
 8001066:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800106a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800106c:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <MX_ADC1_Init+0x9c>)
 800106e:	2200      	movs	r2, #0
 8001070:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001072:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <MX_ADC1_Init+0x9c>)
 8001074:	2200      	movs	r2, #0
 8001076:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001078:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <MX_ADC1_Init+0x9c>)
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001080:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <MX_ADC1_Init+0x9c>)
 8001082:	2200      	movs	r2, #0
 8001084:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001086:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <MX_ADC1_Init+0x9c>)
 8001088:	4a17      	ldr	r2, [pc, #92]	; (80010e8 <MX_ADC1_Init+0xa4>)
 800108a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800108c:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <MX_ADC1_Init+0x9c>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001092:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <MX_ADC1_Init+0x9c>)
 8001094:	2201      	movs	r2, #1
 8001096:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_ADC1_Init+0x9c>)
 800109a:	2200      	movs	r2, #0
 800109c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <MX_ADC1_Init+0x9c>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010a6:	480e      	ldr	r0, [pc, #56]	; (80010e0 <MX_ADC1_Init+0x9c>)
 80010a8:	f001 fb0c 	bl	80026c4 <HAL_ADC_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80010b2:	f000 f8df 	bl	8001274 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010ba:	2301      	movs	r3, #1
 80010bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c2:	463b      	mov	r3, r7
 80010c4:	4619      	mov	r1, r3
 80010c6:	4806      	ldr	r0, [pc, #24]	; (80010e0 <MX_ADC1_Init+0x9c>)
 80010c8:	f001 fcc0 	bl	8002a4c <HAL_ADC_ConfigChannel>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80010d2:	f000 f8cf 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200002e8 	.word	0x200002e8
 80010e4:	40012000 	.word	0x40012000
 80010e8:	0f000001 	.word	0x0f000001

080010ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 80010f2:	4a12      	ldr	r2, [pc, #72]	; (800113c <MX_USART2_UART_Init+0x50>)
 80010f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 80010f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 8001112:	220c      	movs	r2, #12
 8001114:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 800111e:	2200      	movs	r2, #0
 8001120:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 8001124:	f002 fe8a 	bl	8003e3c <HAL_UART_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800112e:	f000 f8a1 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000330 	.word	0x20000330
 800113c:	40004400 	.word	0x40004400

08001140 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_USART6_UART_Init+0x4c>)
 8001146:	4a12      	ldr	r2, [pc, #72]	; (8001190 <MX_USART6_UART_Init+0x50>)
 8001148:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <MX_USART6_UART_Init+0x4c>)
 800114c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001150:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <MX_USART6_UART_Init+0x4c>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <MX_USART6_UART_Init+0x4c>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800115e:	4b0b      	ldr	r3, [pc, #44]	; (800118c <MX_USART6_UART_Init+0x4c>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <MX_USART6_UART_Init+0x4c>)
 8001166:	220c      	movs	r2, #12
 8001168:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <MX_USART6_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <MX_USART6_UART_Init+0x4c>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_USART6_UART_Init+0x4c>)
 8001178:	f002 fe60 	bl	8003e3c <HAL_UART_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001182:	f000 f877 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000374 	.word	0x20000374
 8001190:	40011400 	.word	0x40011400

08001194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	4b2e      	ldr	r3, [pc, #184]	; (8001268 <MX_GPIO_Init+0xd4>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a2d      	ldr	r2, [pc, #180]	; (8001268 <MX_GPIO_Init+0xd4>)
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b2b      	ldr	r3, [pc, #172]	; (8001268 <MX_GPIO_Init+0xd4>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0304 	and.w	r3, r3, #4
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b27      	ldr	r3, [pc, #156]	; (8001268 <MX_GPIO_Init+0xd4>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a26      	ldr	r2, [pc, #152]	; (8001268 <MX_GPIO_Init+0xd4>)
 80011d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b24      	ldr	r3, [pc, #144]	; (8001268 <MX_GPIO_Init+0xd4>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	4b20      	ldr	r3, [pc, #128]	; (8001268 <MX_GPIO_Init+0xd4>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a1f      	ldr	r2, [pc, #124]	; (8001268 <MX_GPIO_Init+0xd4>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <MX_GPIO_Init+0xd4>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <MX_GPIO_Init+0xd4>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a18      	ldr	r2, [pc, #96]	; (8001268 <MX_GPIO_Init+0xd4>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b16      	ldr	r3, [pc, #88]	; (8001268 <MX_GPIO_Init+0xd4>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MUX_S_0_Pin|MUX_S_1_Pin, GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 8001220:	4812      	ldr	r0, [pc, #72]	; (800126c <MX_GPIO_Init+0xd8>)
 8001222:	f002 f959 	bl	80034d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001226:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800122a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800122c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001230:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4619      	mov	r1, r3
 800123c:	480c      	ldr	r0, [pc, #48]	; (8001270 <MX_GPIO_Init+0xdc>)
 800123e:	f001 ffc7 	bl	80031d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MUX_S_0_Pin MUX_S_1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MUX_S_0_Pin|MUX_S_1_Pin;
 8001242:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8001246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001248:	2301      	movs	r3, #1
 800124a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	4804      	ldr	r0, [pc, #16]	; (800126c <MX_GPIO_Init+0xd8>)
 800125c:	f001 ffb8 	bl	80031d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001260:	bf00      	nop
 8001262:	3728      	adds	r7, #40	; 0x28
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40023800 	.word	0x40023800
 800126c:	40020000 	.word	0x40020000
 8001270:	40020800 	.word	0x40020800

08001274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001278:	b672      	cpsid	i
}
 800127a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800127c:	e7fe      	b.n	800127c <Error_Handler+0x8>
	...

08001280 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_MspInit+0x54>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	4a11      	ldr	r2, [pc, #68]	; (80012d4 <HAL_MspInit+0x54>)
 8001290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001294:	6453      	str	r3, [r2, #68]	; 0x44
 8001296:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <HAL_MspInit+0x54>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	603b      	str	r3, [r7, #0]
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <HAL_MspInit+0x54>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <HAL_MspInit+0x54>)
 80012ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b0:	6413      	str	r3, [r2, #64]	; 0x40
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <HAL_MspInit+0x54>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	210f      	movs	r1, #15
 80012c2:	f06f 0001 	mvn.w	r0, #1
 80012c6:	f001 feba 	bl	800303e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800

080012d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a17      	ldr	r2, [pc, #92]	; (8001354 <HAL_ADC_MspInit+0x7c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d127      	bne.n	800134a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	4b16      	ldr	r3, [pc, #88]	; (8001358 <HAL_ADC_MspInit+0x80>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	4a15      	ldr	r2, [pc, #84]	; (8001358 <HAL_ADC_MspInit+0x80>)
 8001304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001308:	6453      	str	r3, [r2, #68]	; 0x44
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <HAL_ADC_MspInit+0x80>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <HAL_ADC_MspInit+0x80>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a0e      	ldr	r2, [pc, #56]	; (8001358 <HAL_ADC_MspInit+0x80>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <HAL_ADC_MspInit+0x80>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001332:	2301      	movs	r3, #1
 8001334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001336:	2303      	movs	r3, #3
 8001338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	; (800135c <HAL_ADC_MspInit+0x84>)
 8001346:	f001 ff43 	bl	80031d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800134a:	bf00      	nop
 800134c:	3728      	adds	r7, #40	; 0x28
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40012000 	.word	0x40012000
 8001358:	40023800 	.word	0x40023800
 800135c:	40020000 	.word	0x40020000

08001360 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08c      	sub	sp, #48	; 0x30
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 031c 	add.w	r3, r7, #28
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a32      	ldr	r2, [pc, #200]	; (8001448 <HAL_UART_MspInit+0xe8>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d12c      	bne.n	80013dc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	61bb      	str	r3, [r7, #24]
 8001386:	4b31      	ldr	r3, [pc, #196]	; (800144c <HAL_UART_MspInit+0xec>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	4a30      	ldr	r2, [pc, #192]	; (800144c <HAL_UART_MspInit+0xec>)
 800138c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001390:	6413      	str	r3, [r2, #64]	; 0x40
 8001392:	4b2e      	ldr	r3, [pc, #184]	; (800144c <HAL_UART_MspInit+0xec>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	61bb      	str	r3, [r7, #24]
 800139c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	4b2a      	ldr	r3, [pc, #168]	; (800144c <HAL_UART_MspInit+0xec>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a29      	ldr	r2, [pc, #164]	; (800144c <HAL_UART_MspInit+0xec>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b27      	ldr	r3, [pc, #156]	; (800144c <HAL_UART_MspInit+0xec>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013ba:	230c      	movs	r3, #12
 80013bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ca:	2307      	movs	r3, #7
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	f107 031c 	add.w	r3, r7, #28
 80013d2:	4619      	mov	r1, r3
 80013d4:	481e      	ldr	r0, [pc, #120]	; (8001450 <HAL_UART_MspInit+0xf0>)
 80013d6:	f001 fefb 	bl	80031d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80013da:	e030      	b.n	800143e <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a1c      	ldr	r2, [pc, #112]	; (8001454 <HAL_UART_MspInit+0xf4>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d12b      	bne.n	800143e <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	4b18      	ldr	r3, [pc, #96]	; (800144c <HAL_UART_MspInit+0xec>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	4a17      	ldr	r2, [pc, #92]	; (800144c <HAL_UART_MspInit+0xec>)
 80013f0:	f043 0320 	orr.w	r3, r3, #32
 80013f4:	6453      	str	r3, [r2, #68]	; 0x44
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <HAL_UART_MspInit+0xec>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	f003 0320 	and.w	r3, r3, #32
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <HAL_UART_MspInit+0xec>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a10      	ldr	r2, [pc, #64]	; (800144c <HAL_UART_MspInit+0xec>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <HAL_UART_MspInit+0xec>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800141e:	23c0      	movs	r3, #192	; 0xc0
 8001420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142a:	2303      	movs	r3, #3
 800142c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800142e:	2308      	movs	r3, #8
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001432:	f107 031c 	add.w	r3, r7, #28
 8001436:	4619      	mov	r1, r3
 8001438:	4807      	ldr	r0, [pc, #28]	; (8001458 <HAL_UART_MspInit+0xf8>)
 800143a:	f001 fec9 	bl	80031d0 <HAL_GPIO_Init>
}
 800143e:	bf00      	nop
 8001440:	3730      	adds	r7, #48	; 0x30
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40004400 	.word	0x40004400
 800144c:	40023800 	.word	0x40023800
 8001450:	40020000 	.word	0x40020000
 8001454:	40011400 	.word	0x40011400
 8001458:	40020800 	.word	0x40020800

0800145c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <NMI_Handler+0x4>

08001462 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001466:	e7fe      	b.n	8001466 <HardFault_Handler+0x4>

08001468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800146c:	e7fe      	b.n	800146c <MemManage_Handler+0x4>

0800146e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001472:	e7fe      	b.n	8001472 <BusFault_Handler+0x4>

08001474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <UsageFault_Handler+0x4>

0800147a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800148c:	f001 f8d6 	bl	800263c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001490:	f005 f964 	bl	800675c <xTaskGetSchedulerState>
 8001494:	4603      	mov	r3, r0
 8001496:	2b01      	cmp	r3, #1
 8001498:	d001      	beq.n	800149e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800149a:	f005 fd3d 	bl	8006f18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <SystemInit+0x20>)
 80014aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ae:	4a05      	ldr	r2, [pc, #20]	; (80014c4 <SystemInit+0x20>)
 80014b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001500 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014cc:	480d      	ldr	r0, [pc, #52]	; (8001504 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014ce:	490e      	ldr	r1, [pc, #56]	; (8001508 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014d0:	4a0e      	ldr	r2, [pc, #56]	; (800150c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d4:	e002      	b.n	80014dc <LoopCopyDataInit>

080014d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014da:	3304      	adds	r3, #4

080014dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e0:	d3f9      	bcc.n	80014d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e2:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014e4:	4c0b      	ldr	r4, [pc, #44]	; (8001514 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e8:	e001      	b.n	80014ee <LoopFillZerobss>

080014ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014ec:	3204      	adds	r2, #4

080014ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f0:	d3fb      	bcc.n	80014ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014f2:	f7ff ffd7 	bl	80014a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014f6:	f007 fed1 	bl	800929c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014fa:	f7ff fd0f 	bl	8000f1c <main>
  bx  lr    
 80014fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001500:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001508:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800150c:	08009578 	.word	0x08009578
  ldr r2, =_sbss
 8001510:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001514:	200081a4 	.word	0x200081a4

08001518 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001518:	e7fe      	b.n	8001518 <ADC_IRQHandler>
 800151a:	0000      	movs	r0, r0
 800151c:	0000      	movs	r0, r0
	...

08001520 <EmgConfigInit>:
S_ADCConfig ADC_Config;
S_FilterConfig Filter_Config;

S_EMGRecorder recorder;

void EmgConfigInit(void){
 8001520:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001524:	af00      	add	r7, sp, #0

	//ADC configuration
	ADC_Config.default_bits = 10; // Don't change!
 8001526:	4bd0      	ldr	r3, [pc, #832]	; (8001868 <EmgConfigInit+0x348>)
 8001528:	220a      	movs	r2, #10
 800152a:	705a      	strb	r2, [r3, #1]
	ADC_Config.adc_bits = 10; // The resolution of your MCU's ADC
 800152c:	4bce      	ldr	r3, [pc, #824]	; (8001868 <EmgConfigInit+0x348>)
 800152e:	220a      	movs	r2, #10
 8001530:	701a      	strb	r2, [r3, #0]
	ADC_Config.vref = 3.3f; // Reference voltage of MCU's ADC (V)
 8001532:	4bcd      	ldr	r3, [pc, #820]	; (8001868 <EmgConfigInit+0x348>)
 8001534:	4acd      	ldr	r2, [pc, #820]	; (800186c <EmgConfigInit+0x34c>)
 8001536:	605a      	str	r2, [r3, #4]
	ADC_Config.default_vref = 5 ;// Default reference voltage of the Arduino Uno (V) Don't Change
 8001538:	4bcb      	ldr	r3, [pc, #812]	; (8001868 <EmgConfigInit+0x348>)
 800153a:	4acd      	ldr	r2, [pc, #820]	; (8001870 <EmgConfigInit+0x350>)
 800153c:	609a      	str	r2, [r3, #8]
	ADC_Config.adc_scale = pow(2,ADC_Config.default_bits-ADC_Config.adc_bits)*ADC_Config.vref/ADC_Config.default_vref; // Scales the input signal
 800153e:	4bca      	ldr	r3, [pc, #808]	; (8001868 <EmgConfigInit+0x348>)
 8001540:	785b      	ldrb	r3, [r3, #1]
 8001542:	461a      	mov	r2, r3
 8001544:	4bc8      	ldr	r3, [pc, #800]	; (8001868 <EmgConfigInit+0x348>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	4618      	mov	r0, r3
 800154c:	f7fe ff9a 	bl	8000484 <__aeabi_i2d>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	ec43 2b11 	vmov	d1, r2, r3
 8001558:	ed9f 0bbf 	vldr	d0, [pc, #764]	; 8001858 <EmgConfigInit+0x338>
 800155c:	f005 ff56 	bl	800740c <pow>
 8001560:	ec55 4b10 	vmov	r4, r5, d0
 8001564:	4bc0      	ldr	r3, [pc, #768]	; (8001868 <EmgConfigInit+0x348>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	4618      	mov	r0, r3
 800156a:	f7fe ff9d 	bl	80004a8 <__aeabi_f2d>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4620      	mov	r0, r4
 8001574:	4629      	mov	r1, r5
 8001576:	f7fe ffef 	bl	8000558 <__aeabi_dmul>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4614      	mov	r4, r2
 8001580:	461d      	mov	r5, r3
 8001582:	4bb9      	ldr	r3, [pc, #740]	; (8001868 <EmgConfigInit+0x348>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe ff8e 	bl	80004a8 <__aeabi_f2d>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4620      	mov	r0, r4
 8001592:	4629      	mov	r1, r5
 8001594:	f7ff f90a 	bl	80007ac <__aeabi_ddiv>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4610      	mov	r0, r2
 800159e:	4619      	mov	r1, r3
 80015a0:	f7ff fab2 	bl	8000b08 <__aeabi_d2f>
 80015a4:	4603      	mov	r3, r0
 80015a6:	4ab0      	ldr	r2, [pc, #704]	; (8001868 <EmgConfigInit+0x348>)
 80015a8:	60d3      	str	r3, [r2, #12]
	ADC_Config.emg_offset = 1.45; // DC offset of the Mam Sense Board EMG output. (V)
 80015aa:	4baf      	ldr	r3, [pc, #700]	; (8001868 <EmgConfigInit+0x348>)
 80015ac:	4ab1      	ldr	r2, [pc, #708]	; (8001874 <EmgConfigInit+0x354>)
 80015ae:	611a      	str	r2, [r3, #16]
	ADC_Config.sig_offset = round(pow(2,ADC_Config.default_bits)*ADC_Config.emg_offset/ADC_Config.default_vref);
 80015b0:	4bad      	ldr	r3, [pc, #692]	; (8001868 <EmgConfigInit+0x348>)
 80015b2:	785b      	ldrb	r3, [r3, #1]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe ff55 	bl	8000464 <__aeabi_ui2d>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	ec43 2b11 	vmov	d1, r2, r3
 80015c2:	ed9f 0ba5 	vldr	d0, [pc, #660]	; 8001858 <EmgConfigInit+0x338>
 80015c6:	f005 ff21 	bl	800740c <pow>
 80015ca:	ec55 4b10 	vmov	r4, r5, d0
 80015ce:	4ba6      	ldr	r3, [pc, #664]	; (8001868 <EmgConfigInit+0x348>)
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe ff68 	bl	80004a8 <__aeabi_f2d>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4620      	mov	r0, r4
 80015de:	4629      	mov	r1, r5
 80015e0:	f7fe ffba 	bl	8000558 <__aeabi_dmul>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4614      	mov	r4, r2
 80015ea:	461d      	mov	r5, r3
 80015ec:	4b9e      	ldr	r3, [pc, #632]	; (8001868 <EmgConfigInit+0x348>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe ff59 	bl	80004a8 <__aeabi_f2d>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4620      	mov	r0, r4
 80015fc:	4629      	mov	r1, r5
 80015fe:	f7ff f8d5 	bl	80007ac <__aeabi_ddiv>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	ec43 2b17 	vmov	d7, r2, r3
 800160a:	eeb0 0a47 	vmov.f32	s0, s14
 800160e:	eef0 0a67 	vmov.f32	s1, s15
 8001612:	f006 f8a7 	bl	8007764 <round>
 8001616:	ec53 2b10 	vmov	r2, r3, d0
 800161a:	4610      	mov	r0, r2
 800161c:	4619      	mov	r1, r3
 800161e:	f7ff fa73 	bl	8000b08 <__aeabi_d2f>
 8001622:	4603      	mov	r3, r0
 8001624:	4a90      	ldr	r2, [pc, #576]	; (8001868 <EmgConfigInit+0x348>)
 8001626:	6153      	str	r3, [r2, #20]

	Filter_Config.f0 = 50;      // Cut-off frequency of the notch filter(Hz).
 8001628:	4b93      	ldr	r3, [pc, #588]	; (8001878 <EmgConfigInit+0x358>)
 800162a:	2232      	movs	r2, #50	; 0x32
 800162c:	801a      	strh	r2, [r3, #0]
	Filter_Config.f1 = 150;     // Second cut-off frequency(Hz). (Must be integer multiple of f0)
 800162e:	4b92      	ldr	r3, [pc, #584]	; (8001878 <EmgConfigInit+0x358>)
 8001630:	2296      	movs	r2, #150	; 0x96
 8001632:	805a      	strh	r2, [r3, #2]
	Filter_Config.w0 = 2*3.1416*Filter_Config.f0/SAMPLE_FREQUENCY_HZ;  // Digital cut-off frequency (rad/sample)
 8001634:	4b90      	ldr	r3, [pc, #576]	; (8001878 <EmgConfigInit+0x358>)
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ff23 	bl	8000484 <__aeabi_i2d>
 800163e:	a388      	add	r3, pc, #544	; (adr r3, 8001860 <EmgConfigInit+0x340>)
 8001640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001644:	f7fe ff88 	bl	8000558 <__aeabi_dmul>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	4b89      	ldr	r3, [pc, #548]	; (800187c <EmgConfigInit+0x35c>)
 8001656:	f7ff f8a9 	bl	80007ac <__aeabi_ddiv>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4610      	mov	r0, r2
 8001660:	4619      	mov	r1, r3
 8001662:	f7ff fa51 	bl	8000b08 <__aeabi_d2f>
 8001666:	4603      	mov	r3, r0
 8001668:	4a83      	ldr	r2, [pc, #524]	; (8001878 <EmgConfigInit+0x358>)
 800166a:	6053      	str	r3, [r2, #4]
	Filter_Config.w1 = 2*3.1416*Filter_Config.f1/SAMPLE_FREQUENCY_HZ;  //
 800166c:	4b82      	ldr	r3, [pc, #520]	; (8001878 <EmgConfigInit+0x358>)
 800166e:	885b      	ldrh	r3, [r3, #2]
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe ff07 	bl	8000484 <__aeabi_i2d>
 8001676:	a37a      	add	r3, pc, #488	; (adr r3, 8001860 <EmgConfigInit+0x340>)
 8001678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167c:	f7fe ff6c 	bl	8000558 <__aeabi_dmul>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4610      	mov	r0, r2
 8001686:	4619      	mov	r1, r3
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	4b7b      	ldr	r3, [pc, #492]	; (800187c <EmgConfigInit+0x35c>)
 800168e:	f7ff f88d 	bl	80007ac <__aeabi_ddiv>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4610      	mov	r0, r2
 8001698:	4619      	mov	r1, r3
 800169a:	f7ff fa35 	bl	8000b08 <__aeabi_d2f>
 800169e:	4603      	mov	r3, r0
 80016a0:	4a75      	ldr	r2, [pc, #468]	; (8001878 <EmgConfigInit+0x358>)
 80016a2:	6093      	str	r3, [r2, #8]
	Filter_Config.p = 0.95;     //Quailty factor. Must be between 0.8 and 0.995. Default value: 0.95
 80016a4:	4b74      	ldr	r3, [pc, #464]	; (8001878 <EmgConfigInit+0x358>)
 80016a6:	4a76      	ldr	r2, [pc, #472]	; (8001880 <EmgConfigInit+0x360>)
 80016a8:	60da      	str	r2, [r3, #12]

	Filter_Config.mag = (1 -2*cos(Filter_Config.w0) +1)/(1 -2*Filter_Config.p*cos(Filter_Config.w0) + Filter_Config.p*Filter_Config.p); // Find magnitude of the filter at w=0 to set the DC gain to 1;
 80016aa:	4b73      	ldr	r3, [pc, #460]	; (8001878 <EmgConfigInit+0x358>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe fefa 	bl	80004a8 <__aeabi_f2d>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	ec43 2b10 	vmov	d0, r2, r3
 80016bc:	f005 ff18 	bl	80074f0 <cos>
 80016c0:	ec51 0b10 	vmov	r0, r1, d0
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	f7fe fd90 	bl	80001ec <__adddf3>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	f04f 0000 	mov.w	r0, #0
 80016d4:	496b      	ldr	r1, [pc, #428]	; (8001884 <EmgConfigInit+0x364>)
 80016d6:	f7fe fd87 	bl	80001e8 <__aeabi_dsub>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4610      	mov	r0, r2
 80016e0:	4619      	mov	r1, r3
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	4b67      	ldr	r3, [pc, #412]	; (8001884 <EmgConfigInit+0x364>)
 80016e8:	f7fe fd80 	bl	80001ec <__adddf3>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4690      	mov	r8, r2
 80016f2:	4699      	mov	r9, r3
 80016f4:	4b60      	ldr	r3, [pc, #384]	; (8001878 <EmgConfigInit+0x358>)
 80016f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80016fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016fe:	ee17 0a90 	vmov	r0, s15
 8001702:	f7fe fed1 	bl	80004a8 <__aeabi_f2d>
 8001706:	4604      	mov	r4, r0
 8001708:	460d      	mov	r5, r1
 800170a:	4b5b      	ldr	r3, [pc, #364]	; (8001878 <EmgConfigInit+0x358>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe feca 	bl	80004a8 <__aeabi_f2d>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	ec43 2b10 	vmov	d0, r2, r3
 800171c:	f005 fee8 	bl	80074f0 <cos>
 8001720:	ec53 2b10 	vmov	r2, r3, d0
 8001724:	4620      	mov	r0, r4
 8001726:	4629      	mov	r1, r5
 8001728:	f7fe ff16 	bl	8000558 <__aeabi_dmul>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	f04f 0000 	mov.w	r0, #0
 8001734:	4953      	ldr	r1, [pc, #332]	; (8001884 <EmgConfigInit+0x364>)
 8001736:	f7fe fd57 	bl	80001e8 <__aeabi_dsub>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4614      	mov	r4, r2
 8001740:	461d      	mov	r5, r3
 8001742:	4b4d      	ldr	r3, [pc, #308]	; (8001878 <EmgConfigInit+0x358>)
 8001744:	ed93 7a03 	vldr	s14, [r3, #12]
 8001748:	4b4b      	ldr	r3, [pc, #300]	; (8001878 <EmgConfigInit+0x358>)
 800174a:	edd3 7a03 	vldr	s15, [r3, #12]
 800174e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001752:	ee17 0a90 	vmov	r0, s15
 8001756:	f7fe fea7 	bl	80004a8 <__aeabi_f2d>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4620      	mov	r0, r4
 8001760:	4629      	mov	r1, r5
 8001762:	f7fe fd43 	bl	80001ec <__adddf3>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4640      	mov	r0, r8
 800176c:	4649      	mov	r1, r9
 800176e:	f7ff f81d 	bl	80007ac <__aeabi_ddiv>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4610      	mov	r0, r2
 8001778:	4619      	mov	r1, r3
 800177a:	f7ff f9c5 	bl	8000b08 <__aeabi_d2f>
 800177e:	4603      	mov	r3, r0
 8001780:	4a3d      	ldr	r2, [pc, #244]	; (8001878 <EmgConfigInit+0x358>)
 8001782:	6113      	str	r3, [r2, #16]

	//Create the coefficient matrices for notch filter at f0
	Filter_Config.num[0] = 1.0 / Filter_Config.mag;
 8001784:	4b3c      	ldr	r3, [pc, #240]	; (8001878 <EmgConfigInit+0x358>)
 8001786:	ed93 7a04 	vldr	s14, [r3, #16]
 800178a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800178e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001792:	4b39      	ldr	r3, [pc, #228]	; (8001878 <EmgConfigInit+0x358>)
 8001794:	edc3 7a05 	vstr	s15, [r3, #20]
	Filter_Config.num[1] = -2.0 * cos(Filter_Config.w0) / Filter_Config.mag;
 8001798:	4b37      	ldr	r3, [pc, #220]	; (8001878 <EmgConfigInit+0x358>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fe83 	bl	80004a8 <__aeabi_f2d>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	ec43 2b10 	vmov	d0, r2, r3
 80017aa:	f005 fea1 	bl	80074f0 <cos>
 80017ae:	ec51 0b10 	vmov	r0, r1, d0
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80017ba:	f7fe fecd 	bl	8000558 <__aeabi_dmul>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4614      	mov	r4, r2
 80017c4:	461d      	mov	r5, r3
 80017c6:	4b2c      	ldr	r3, [pc, #176]	; (8001878 <EmgConfigInit+0x358>)
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe fe6c 	bl	80004a8 <__aeabi_f2d>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4620      	mov	r0, r4
 80017d6:	4629      	mov	r1, r5
 80017d8:	f7fe ffe8 	bl	80007ac <__aeabi_ddiv>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4610      	mov	r0, r2
 80017e2:	4619      	mov	r1, r3
 80017e4:	f7ff f990 	bl	8000b08 <__aeabi_d2f>
 80017e8:	4603      	mov	r3, r0
 80017ea:	4a23      	ldr	r2, [pc, #140]	; (8001878 <EmgConfigInit+0x358>)
 80017ec:	6193      	str	r3, [r2, #24]
	Filter_Config.num[2] = 1.0 / Filter_Config.mag;
 80017ee:	4b22      	ldr	r3, [pc, #136]	; (8001878 <EmgConfigInit+0x358>)
 80017f0:	ed93 7a04 	vldr	s14, [r3, #16]
 80017f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80017f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017fc:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <EmgConfigInit+0x358>)
 80017fe:	edc3 7a07 	vstr	s15, [r3, #28]

	Filter_Config.den[0] = 1;
 8001802:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <EmgConfigInit+0x358>)
 8001804:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001808:	621a      	str	r2, [r3, #32]
	Filter_Config.den[1] = -2 * Filter_Config.p * cos(Filter_Config.w0);
 800180a:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <EmgConfigInit+0x358>)
 800180c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001810:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001814:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001818:	ee17 0a90 	vmov	r0, s15
 800181c:	f7fe fe44 	bl	80004a8 <__aeabi_f2d>
 8001820:	4604      	mov	r4, r0
 8001822:	460d      	mov	r5, r1
 8001824:	4b14      	ldr	r3, [pc, #80]	; (8001878 <EmgConfigInit+0x358>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fe3d 	bl	80004a8 <__aeabi_f2d>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	ec43 2b10 	vmov	d0, r2, r3
 8001836:	f005 fe5b 	bl	80074f0 <cos>
 800183a:	ec53 2b10 	vmov	r2, r3, d0
 800183e:	4620      	mov	r0, r4
 8001840:	4629      	mov	r1, r5
 8001842:	f7fe fe89 	bl	8000558 <__aeabi_dmul>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	f7ff f95b 	bl	8000b08 <__aeabi_d2f>
 8001852:	4603      	mov	r3, r0
 8001854:	e018      	b.n	8001888 <EmgConfigInit+0x368>
 8001856:	bf00      	nop
 8001858:	00000000 	.word	0x00000000
 800185c:	40000000 	.word	0x40000000
 8001860:	2e48e8a7 	.word	0x2e48e8a7
 8001864:	401921ff 	.word	0x401921ff
 8001868:	200003cc 	.word	0x200003cc
 800186c:	40533333 	.word	0x40533333
 8001870:	40a00000 	.word	0x40a00000
 8001874:	3fb9999a 	.word	0x3fb9999a
 8001878:	200003e4 	.word	0x200003e4
 800187c:	408f4000 	.word	0x408f4000
 8001880:	3f733333 	.word	0x3f733333
 8001884:	3ff00000 	.word	0x3ff00000
 8001888:	4ad0      	ldr	r2, [pc, #832]	; (8001bcc <EmgConfigInit+0x6ac>)
 800188a:	6253      	str	r3, [r2, #36]	; 0x24
	Filter_Config.den[2] = Filter_Config.p * Filter_Config.p;
 800188c:	4bcf      	ldr	r3, [pc, #828]	; (8001bcc <EmgConfigInit+0x6ac>)
 800188e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001892:	4bce      	ldr	r3, [pc, #824]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001894:	edd3 7a03 	vldr	s15, [r3, #12]
 8001898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800189c:	4bcb      	ldr	r3, [pc, #812]	; (8001bcc <EmgConfigInit+0x6ac>)
 800189e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	//Optional dual frequency notch filter. Comment this code block out to use dual frequency notch filter
	// Create the coefficient matrices for notch filter at f1
	Filter_Config.mag2 = (1 -2*cos(Filter_Config.w1) +1)/(1 -2*Filter_Config.p*cos(Filter_Config.w1) + Filter_Config.p*Filter_Config.p);
 80018a2:	4bca      	ldr	r3, [pc, #808]	; (8001bcc <EmgConfigInit+0x6ac>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe fdfe 	bl	80004a8 <__aeabi_f2d>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	ec43 2b10 	vmov	d0, r2, r3
 80018b4:	f005 fe1c 	bl	80074f0 <cos>
 80018b8:	ec51 0b10 	vmov	r0, r1, d0
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	f7fe fc94 	bl	80001ec <__adddf3>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	f04f 0000 	mov.w	r0, #0
 80018cc:	49c0      	ldr	r1, [pc, #768]	; (8001bd0 <EmgConfigInit+0x6b0>)
 80018ce:	f7fe fc8b 	bl	80001e8 <__aeabi_dsub>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	4610      	mov	r0, r2
 80018d8:	4619      	mov	r1, r3
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	4bbc      	ldr	r3, [pc, #752]	; (8001bd0 <EmgConfigInit+0x6b0>)
 80018e0:	f7fe fc84 	bl	80001ec <__adddf3>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4690      	mov	r8, r2
 80018ea:	4699      	mov	r9, r3
 80018ec:	4bb7      	ldr	r3, [pc, #732]	; (8001bcc <EmgConfigInit+0x6ac>)
 80018ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80018f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018f6:	ee17 0a90 	vmov	r0, s15
 80018fa:	f7fe fdd5 	bl	80004a8 <__aeabi_f2d>
 80018fe:	4604      	mov	r4, r0
 8001900:	460d      	mov	r5, r1
 8001902:	4bb2      	ldr	r3, [pc, #712]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	4618      	mov	r0, r3
 8001908:	f7fe fdce 	bl	80004a8 <__aeabi_f2d>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	ec43 2b10 	vmov	d0, r2, r3
 8001914:	f005 fdec 	bl	80074f0 <cos>
 8001918:	ec53 2b10 	vmov	r2, r3, d0
 800191c:	4620      	mov	r0, r4
 800191e:	4629      	mov	r1, r5
 8001920:	f7fe fe1a 	bl	8000558 <__aeabi_dmul>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	f04f 0000 	mov.w	r0, #0
 800192c:	49a8      	ldr	r1, [pc, #672]	; (8001bd0 <EmgConfigInit+0x6b0>)
 800192e:	f7fe fc5b 	bl	80001e8 <__aeabi_dsub>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4614      	mov	r4, r2
 8001938:	461d      	mov	r5, r3
 800193a:	4ba4      	ldr	r3, [pc, #656]	; (8001bcc <EmgConfigInit+0x6ac>)
 800193c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001940:	4ba2      	ldr	r3, [pc, #648]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001942:	edd3 7a03 	vldr	s15, [r3, #12]
 8001946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800194a:	ee17 0a90 	vmov	r0, s15
 800194e:	f7fe fdab 	bl	80004a8 <__aeabi_f2d>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4620      	mov	r0, r4
 8001958:	4629      	mov	r1, r5
 800195a:	f7fe fc47 	bl	80001ec <__adddf3>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4640      	mov	r0, r8
 8001964:	4649      	mov	r1, r9
 8001966:	f7fe ff21 	bl	80007ac <__aeabi_ddiv>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4610      	mov	r0, r2
 8001970:	4619      	mov	r1, r3
 8001972:	f7ff f8c9 	bl	8000b08 <__aeabi_d2f>
 8001976:	4603      	mov	r3, r0
 8001978:	4a94      	ldr	r2, [pc, #592]	; (8001bcc <EmgConfigInit+0x6ac>)
 800197a:	62d3      	str	r3, [r2, #44]	; 0x2c

	Filter_Config.num2[0] = 1.0 / Filter_Config.mag2;
 800197c:	4b93      	ldr	r3, [pc, #588]	; (8001bcc <EmgConfigInit+0x6ac>)
 800197e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800198a:	4b90      	ldr	r3, [pc, #576]	; (8001bcc <EmgConfigInit+0x6ac>)
 800198c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	Filter_Config.num2[1] = -2.0 * cos(Filter_Config.w1) / Filter_Config.mag2;
 8001990:	4b8e      	ldr	r3, [pc, #568]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fd87 	bl	80004a8 <__aeabi_f2d>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	ec43 2b10 	vmov	d0, r2, r3
 80019a2:	f005 fda5 	bl	80074f0 <cos>
 80019a6:	ec51 0b10 	vmov	r0, r1, d0
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80019b2:	f7fe fdd1 	bl	8000558 <__aeabi_dmul>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4614      	mov	r4, r2
 80019bc:	461d      	mov	r5, r3
 80019be:	4b83      	ldr	r3, [pc, #524]	; (8001bcc <EmgConfigInit+0x6ac>)
 80019c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fd70 	bl	80004a8 <__aeabi_f2d>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4620      	mov	r0, r4
 80019ce:	4629      	mov	r1, r5
 80019d0:	f7fe feec 	bl	80007ac <__aeabi_ddiv>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	f7ff f894 	bl	8000b08 <__aeabi_d2f>
 80019e0:	4603      	mov	r3, r0
 80019e2:	4a7a      	ldr	r2, [pc, #488]	; (8001bcc <EmgConfigInit+0x6ac>)
 80019e4:	6353      	str	r3, [r2, #52]	; 0x34
	Filter_Config.num2[2] = 1.0 / Filter_Config.mag2;
 80019e6:	4b79      	ldr	r3, [pc, #484]	; (8001bcc <EmgConfigInit+0x6ac>)
 80019e8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80019ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019f4:	4b75      	ldr	r3, [pc, #468]	; (8001bcc <EmgConfigInit+0x6ac>)
 80019f6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

	Filter_Config.den2[0] = 1;
 80019fa:	4b74      	ldr	r3, [pc, #464]	; (8001bcc <EmgConfigInit+0x6ac>)
 80019fc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001a00:	63da      	str	r2, [r3, #60]	; 0x3c
	Filter_Config.den2[1] = -2 * Filter_Config.p * cos(Filter_Config.w1);
 8001a02:	4b72      	ldr	r3, [pc, #456]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001a04:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a08:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001a0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a10:	ee17 0a90 	vmov	r0, s15
 8001a14:	f7fe fd48 	bl	80004a8 <__aeabi_f2d>
 8001a18:	4604      	mov	r4, r0
 8001a1a:	460d      	mov	r5, r1
 8001a1c:	4b6b      	ldr	r3, [pc, #428]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fd41 	bl	80004a8 <__aeabi_f2d>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	ec43 2b10 	vmov	d0, r2, r3
 8001a2e:	f005 fd5f 	bl	80074f0 <cos>
 8001a32:	ec53 2b10 	vmov	r2, r3, d0
 8001a36:	4620      	mov	r0, r4
 8001a38:	4629      	mov	r1, r5
 8001a3a:	f7fe fd8d 	bl	8000558 <__aeabi_dmul>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4610      	mov	r0, r2
 8001a44:	4619      	mov	r1, r3
 8001a46:	f7ff f85f 	bl	8000b08 <__aeabi_d2f>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4a5f      	ldr	r2, [pc, #380]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001a4e:	6413      	str	r3, [r2, #64]	; 0x40
	Filter_Config.den2[2] = Filter_Config.p * Filter_Config.p;
 8001a50:	4b5e      	ldr	r3, [pc, #376]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001a52:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a56:	4b5d      	ldr	r3, [pc, #372]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001a58:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a60:	4b5a      	ldr	r3, [pc, #360]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001a62:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	//Convolve two filters to obtain dual notch filter at frequencies f0 and f1
	Filter_Config.num3[0] = Filter_Config.num[0] * Filter_Config.num2[0];
 8001a66:	4b59      	ldr	r3, [pc, #356]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001a68:	ed93 7a05 	vldr	s14, [r3, #20]
 8001a6c:	4b57      	ldr	r3, [pc, #348]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001a6e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a76:	4b55      	ldr	r3, [pc, #340]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001a78:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	Filter_Config.num3[1] = Filter_Config.num2[0] * Filter_Config.num[1] + Filter_Config.num2[1] * Filter_Config.num[0];
 8001a7c:	4b53      	ldr	r3, [pc, #332]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001a7e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001a82:	4b52      	ldr	r3, [pc, #328]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001a84:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a8c:	4b4f      	ldr	r3, [pc, #316]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001a8e:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001a92:	4b4e      	ldr	r3, [pc, #312]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001a94:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa0:	4b4a      	ldr	r3, [pc, #296]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001aa2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	Filter_Config.num3[2] = Filter_Config.num2[0] * Filter_Config.num[2] + Filter_Config.num2[1] * Filter_Config.num[1] + Filter_Config.num2[2] * Filter_Config.num[0];
 8001aa6:	4b49      	ldr	r3, [pc, #292]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001aa8:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001aac:	4b47      	ldr	r3, [pc, #284]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001aae:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ab2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ab6:	4b45      	ldr	r3, [pc, #276]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001ab8:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001abc:	4b43      	ldr	r3, [pc, #268]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001abe:	edd3 7a06 	vldr	s15, [r3, #24]
 8001ac2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ac6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aca:	4b40      	ldr	r3, [pc, #256]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001acc:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001ad0:	4b3e      	ldr	r3, [pc, #248]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001ad2:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ad6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ada:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ade:	4b3b      	ldr	r3, [pc, #236]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001ae0:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	Filter_Config.num3[3] = Filter_Config.num2[1] * Filter_Config.num[2] + Filter_Config.num2[2] * Filter_Config.num[1];
 8001ae4:	4b39      	ldr	r3, [pc, #228]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001ae6:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001aea:	4b38      	ldr	r3, [pc, #224]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001aec:	edd3 7a07 	vldr	s15, [r3, #28]
 8001af0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001af4:	4b35      	ldr	r3, [pc, #212]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001af6:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001afa:	4b34      	ldr	r3, [pc, #208]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001afc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b08:	4b30      	ldr	r3, [pc, #192]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001b0a:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	Filter_Config.num3[4] = Filter_Config.num2[2] * Filter_Config.num[2];
 8001b0e:	4b2f      	ldr	r3, [pc, #188]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001b10:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001b14:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001b16:	edd3 7a07 	vldr	s15, [r3, #28]
 8001b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b1e:	4b2b      	ldr	r3, [pc, #172]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001b20:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

	Filter_Config.den3[0] = 1;
 8001b24:	4b29      	ldr	r3, [pc, #164]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001b26:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b2a:	65da      	str	r2, [r3, #92]	; 0x5c
	Filter_Config.den3[1] = Filter_Config.den2[0] * Filter_Config.den[1] + Filter_Config.den2[1] * Filter_Config.den[0];
 8001b2c:	4b27      	ldr	r3, [pc, #156]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001b2e:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001b32:	4b26      	ldr	r3, [pc, #152]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001b34:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001b38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b3c:	4b23      	ldr	r3, [pc, #140]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001b3e:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8001b42:	4b22      	ldr	r3, [pc, #136]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001b44:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b50:	4b1e      	ldr	r3, [pc, #120]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001b52:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	Filter_Config.den3[2] = Filter_Config.den2[0] * Filter_Config.den[2] + Filter_Config.den2[1] * Filter_Config.den[1] + Filter_Config.den2[2] * Filter_Config.den[0];
 8001b56:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001b58:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001b5e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001b62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b66:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001b68:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8001b6c:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001b6e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001b72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b7a:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001b7c:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8001b80:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001b82:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b8e:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001b90:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
	Filter_Config.den3[3] = Filter_Config.den2[1] * Filter_Config.den[2] + Filter_Config.den2[2] * Filter_Config.den[1];
 8001b94:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001b96:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001b9a:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001b9c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001ba0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ba4:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001ba6:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8001baa:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001bac:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001bb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bb8:	4b04      	ldr	r3, [pc, #16]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001bba:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	Filter_Config.den3[4] = Filter_Config.den2[2] * Filter_Config.den[2];
 8001bbe:	4b03      	ldr	r3, [pc, #12]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001bc0:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001bc4:	4b01      	ldr	r3, [pc, #4]	; (8001bcc <EmgConfigInit+0x6ac>)
 8001bc6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001bca:	e003      	b.n	8001bd4 <EmgConfigInit+0x6b4>
 8001bcc:	200003e4 	.word	0x200003e4
 8001bd0:	3ff00000 	.word	0x3ff00000
 8001bd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bd8:	4b02      	ldr	r3, [pc, #8]	; (8001be4 <EmgConfigInit+0x6c4>)
 8001bda:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

}
 8001bde:	bf00      	nop
 8001be0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001be4:	200003e4 	.word	0x200003e4

08001be8 <EmgTaskInit>:
  }
  /* USER CODE END MotorTask */
}

void EmgTaskInit(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af02      	add	r7, sp, #8
//	  TaskFunction_t EmgTask = EmgTaskFunction;
	 TaskFunction_t EmgTask = ADC_Task;
 8001bee:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <EmgTaskInit+0x28>)
 8001bf0:	607b      	str	r3, [r7, #4]
	 xTaskCreate(	EmgTask,
 8001bf2:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <EmgTaskInit+0x2c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	9301      	str	r3, [sp, #4]
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	2280      	movs	r2, #128	; 0x80
 8001c00:	4905      	ldr	r1, [pc, #20]	; (8001c18 <EmgTaskInit+0x30>)
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f003 ffe7 	bl	8005bd6 <xTaskCreate>
					"EMG Task",
					128,
					NULL,//(void *) &hadc1
					tskIDLE_PRIORITY,
	  				emgTaskHandle );
}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	08001c1d 	.word	0x08001c1d
 8001c14:	200003c8 	.word	0x200003c8
 8001c18:	08009318 	.word	0x08009318

08001c1c <ADC_Task>:
{
	emg[count%100] = round(raw[count%100]*Filter_Config.num[0] + raw[(count-1)%100]*Filter_Config.num[1] + raw[(count-2)%100]*Filter_Config.num[2] - emg[(count-1)%100]*Filter_Config.den[1] - emg[(count-2)%100]*Filter_Config.den[2]);

}

void ADC_Task(void *pvParameters) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]

	E_EMGChannel channel = 0; // Initialize with the first channel
 8001c24:	2300      	movs	r3, #0
 8001c26:	75fb      	strb	r3, [r7, #23]
	int16_t temp_data;
	TickType_t xLastWakeTime;
	const TickType_t xSamplingPeriod = pdMS_TO_TICKS(1000 / SAMPLE_FREQUENCY_HZ);
 8001c28:	2301      	movs	r3, #1
 8001c2a:	613b      	str	r3, [r7, #16]

	xLastWakeTime = xTaskGetTickCount();
 8001c2c:	f004 fa92 	bl	8006154 <xTaskGetTickCount>
 8001c30:	4603      	mov	r3, r0
 8001c32:	60bb      	str	r3, [r7, #8]

    initializeRecorder(&recorder);
 8001c34:	4827      	ldr	r0, [pc, #156]	; (8001cd4 <ADC_Task+0xb8>)
 8001c36:	f000 f8c8 	bl	8001dca <initializeRecorder>
        // Configure the multiplexer to select the current channel
        // Adjust this part according to your hardware setup
        // For example, if you're using GPIO pins to control the multiplexer, set them here
//    	taskENTER_CRITICAL();

    	for(channel = EMG_CHANNEL_0; channel < NUM_EMG_CHANNELS; channel++){
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	75fb      	strb	r3, [r7, #23]
 8001c3e:	e03e      	b.n	8001cbe <ADC_Task+0xa2>

    		setMultiplexerChannel(channel);
 8001c40:	7dfb      	ldrb	r3, [r7, #23]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 f84c 	bl	8001ce0 <setMultiplexerChannel>

			// Start the ADC conversion
			HAL_ADC_Start(&hadc1);
 8001c48:	4823      	ldr	r0, [pc, #140]	; (8001cd8 <ADC_Task+0xbc>)
 8001c4a:	f000 fd7f 	bl	800274c <HAL_ADC_Start>

			// Wait for the conversion to complete
			if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8001c4e:	f04f 31ff 	mov.w	r1, #4294967295
 8001c52:	4821      	ldr	r0, [pc, #132]	; (8001cd8 <ADC_Task+0xbc>)
 8001c54:	f000 fe61 	bl	800291a <HAL_ADC_PollForConversion>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d129      	bne.n	8001cb2 <ADC_Task+0x96>
				// Read the ADC value and store it in the buffer
				temp_data = round( HAL_ADC_GetValue(&hadc1)*ADC_Config.adc_scale-ADC_Config.sig_offset);
 8001c5e:	481e      	ldr	r0, [pc, #120]	; (8001cd8 <ADC_Task+0xbc>)
 8001c60:	f000 fee6 	bl	8002a30 <HAL_ADC_GetValue>
 8001c64:	ee07 0a90 	vmov	s15, r0
 8001c68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c6c:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <ADC_Task+0xc0>)
 8001c6e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c76:	4b19      	ldr	r3, [pc, #100]	; (8001cdc <ADC_Task+0xc0>)
 8001c78:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c80:	ee17 0a90 	vmov	r0, s15
 8001c84:	f7fe fc10 	bl	80004a8 <__aeabi_f2d>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	ec43 2b10 	vmov	d0, r2, r3
 8001c90:	f005 fd68 	bl	8007764 <round>
 8001c94:	ec53 2b10 	vmov	r2, r3, d0
 8001c98:	4610      	mov	r0, r2
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	f7fe ff0c 	bl	8000ab8 <__aeabi_d2iz>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	81fb      	strh	r3, [r7, #14]
				addData(&recorder, channel, temp_data);
 8001ca4:	7dfb      	ldrb	r3, [r7, #23]
 8001ca6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001caa:	4619      	mov	r1, r3
 8001cac:	4809      	ldr	r0, [pc, #36]	; (8001cd4 <ADC_Task+0xb8>)
 8001cae:	f000 f8a9 	bl	8001e04 <addData>
			}

			// Stop the ADC conversion
			HAL_ADC_Stop(&hadc1);
 8001cb2:	4809      	ldr	r0, [pc, #36]	; (8001cd8 <ADC_Task+0xbc>)
 8001cb4:	f000 fdfe 	bl	80028b4 <HAL_ADC_Stop>
    	for(channel = EMG_CHANNEL_0; channel < NUM_EMG_CHANNELS; channel++){
 8001cb8:	7dfb      	ldrb	r3, [r7, #23]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	75fb      	strb	r3, [r7, #23]
 8001cbe:	7dfb      	ldrb	r3, [r7, #23]
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	d9bd      	bls.n	8001c40 <ADC_Task+0x24>

    	}

//    	taskEXIT_CRITICAL();
        // Delay to achieve a 1 kHz sampling rate
        vTaskDelayUntil(&xLastWakeTime, xSamplingPeriod);
 8001cc4:	f107 0308 	add.w	r3, r7, #8
 8001cc8:	6939      	ldr	r1, [r7, #16]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f004 f8ba 	bl	8005e44 <vTaskDelayUntil>
    	for(channel = EMG_CHANNEL_0; channel < NUM_EMG_CHANNELS; channel++){
 8001cd0:	e7b3      	b.n	8001c3a <ADC_Task+0x1e>
 8001cd2:	bf00      	nop
 8001cd4:	20000454 	.word	0x20000454
 8001cd8:	200002e8 	.word	0x200002e8
 8001cdc:	200003cc 	.word	0x200003cc

08001ce0 <setMultiplexerChannel>:

    }
}

void setMultiplexerChannel(E_EMGChannel channel)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
	switch(channel){
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	2b03      	cmp	r3, #3
 8001cee:	d83f      	bhi.n	8001d70 <setMultiplexerChannel+0x90>
 8001cf0:	a201      	add	r2, pc, #4	; (adr r2, 8001cf8 <setMultiplexerChannel+0x18>)
 8001cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf6:	bf00      	nop
 8001cf8:	08001d09 	.word	0x08001d09
 8001cfc:	08001d23 	.word	0x08001d23
 8001d00:	08001d3d 	.word	0x08001d3d
 8001d04:	08001d57 	.word	0x08001d57
	case EMG_CHANNEL_0:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d0e:	481b      	ldr	r0, [pc, #108]	; (8001d7c <setMultiplexerChannel+0x9c>)
 8001d10:	f001 fbe2 	bl	80034d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001d14:	2200      	movs	r2, #0
 8001d16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d1a:	4818      	ldr	r0, [pc, #96]	; (8001d7c <setMultiplexerChannel+0x9c>)
 8001d1c:	f001 fbdc 	bl	80034d8 <HAL_GPIO_WritePin>
		// set s_1 = 0 s_0 = 0
		break;
 8001d20:	e027      	b.n	8001d72 <setMultiplexerChannel+0x92>
	case EMG_CHANNEL_1:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001d22:	2201      	movs	r2, #1
 8001d24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d28:	4814      	ldr	r0, [pc, #80]	; (8001d7c <setMultiplexerChannel+0x9c>)
 8001d2a:	f001 fbd5 	bl	80034d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d34:	4811      	ldr	r0, [pc, #68]	; (8001d7c <setMultiplexerChannel+0x9c>)
 8001d36:	f001 fbcf 	bl	80034d8 <HAL_GPIO_WritePin>
		// set s_1 = 0 s_0 = 1
		break;
 8001d3a:	e01a      	b.n	8001d72 <setMultiplexerChannel+0x92>
	case EMG_CHANNEL_2:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d42:	480e      	ldr	r0, [pc, #56]	; (8001d7c <setMultiplexerChannel+0x9c>)
 8001d44:	f001 fbc8 	bl	80034d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d4e:	480b      	ldr	r0, [pc, #44]	; (8001d7c <setMultiplexerChannel+0x9c>)
 8001d50:	f001 fbc2 	bl	80034d8 <HAL_GPIO_WritePin>
		// set s_1 = 1 s_0 = 0
		break;
 8001d54:	e00d      	b.n	8001d72 <setMultiplexerChannel+0x92>
	case EMG_CHANNEL_3:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001d56:	2201      	movs	r2, #1
 8001d58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d5c:	4807      	ldr	r0, [pc, #28]	; (8001d7c <setMultiplexerChannel+0x9c>)
 8001d5e:	f001 fbbb 	bl	80034d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001d62:	2201      	movs	r2, #1
 8001d64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d68:	4804      	ldr	r0, [pc, #16]	; (8001d7c <setMultiplexerChannel+0x9c>)
 8001d6a:	f001 fbb5 	bl	80034d8 <HAL_GPIO_WritePin>
		// set s_1 = 0 s_0 = 1
		break;
 8001d6e:	e000      	b.n	8001d72 <setMultiplexerChannel+0x92>
	default:
		break;
 8001d70:	bf00      	nop

	}
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40020000 	.word	0x40020000

08001d80 <initializeChannel>:

void initializeChannel(S_EMGChannel* channel) {
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < WINDOW_SIZE; i++) {
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	e007      	b.n	8001d9e <initializeChannel+0x1e>
        channel->data[i] = 0;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	2100      	movs	r1, #0
 8001d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < WINDOW_SIZE; i++) {
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001da4:	dbf3      	blt.n	8001d8e <initializeChannel+0xe>
    }
    channel->current_position = 0;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f8c3 2fa0 	str.w	r2, [r3, #4000]	; 0xfa0
    channel->oldest_position = 0;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f8c3 2fa4 	str.w	r2, [r3, #4004]	; 0xfa4
    channel->is_full = 0;  // use as boolean: 0 for false, 1 for true
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f8c3 2fa8 	str.w	r2, [r3, #4008]	; 0xfa8
}
 8001dbe:	bf00      	nop
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <initializeRecorder>:

void initializeRecorder(S_EMGRecorder* recorder) {
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b084      	sub	sp, #16
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < 4; i++) {
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	e00c      	b.n	8001df2 <initializeRecorder+0x28>
        initializeChannel(&(recorder->channels[i]));
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f640 72ac 	movw	r2, #4012	; 0xfac
 8001dde:	fb02 f303 	mul.w	r3, r2, r3
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	4413      	add	r3, r2
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff ffca 	bl	8001d80 <initializeChannel>
    for(int i = 0; i < 4; i++) {
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	3301      	adds	r3, #1
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	ddef      	ble.n	8001dd8 <initializeRecorder+0xe>
    }
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <addData>:

void addData(S_EMGRecorder* recorder, int channel_id, int value) {
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
    // If buffer is full, update the oldest_position
    if(recorder->channels[channel_id].is_full) {
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	f640 71ac 	movw	r1, #4012	; 0xfac
 8001e18:	fb01 f303 	mul.w	r3, r1, r3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f603 73a8 	addw	r3, r3, #4008	; 0xfa8
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d01f      	beq.n	8001e68 <addData+0x64>
        recorder->channels[channel_id].oldest_position = (recorder->channels[channel_id].oldest_position + 1) % WINDOW_SIZE;
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	f640 71ac 	movw	r1, #4012	; 0xfac
 8001e30:	fb01 f303 	mul.w	r3, r1, r3
 8001e34:	4413      	add	r3, r2
 8001e36:	f603 73a4 	addw	r3, r3, #4004	; 0xfa4
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	4b38      	ldr	r3, [pc, #224]	; (8001f20 <addData+0x11c>)
 8001e40:	fb83 1302 	smull	r1, r3, r3, r2
 8001e44:	1199      	asrs	r1, r3, #6
 8001e46:	17d3      	asrs	r3, r2, #31
 8001e48:	1acb      	subs	r3, r1, r3
 8001e4a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e4e:	fb01 f303 	mul.w	r3, r1, r3
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	68f9      	ldr	r1, [r7, #12]
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	f640 70ac 	movw	r0, #4012	; 0xfac
 8001e5c:	fb00 f202 	mul.w	r2, r0, r2
 8001e60:	440a      	add	r2, r1
 8001e62:	f602 72a4 	addw	r2, r2, #4004	; 0xfa4
 8001e66:	6013      	str	r3, [r2, #0]
    }

    recorder->channels[channel_id].data[recorder->channels[channel_id].current_position] = value;
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	f640 71ac 	movw	r1, #4012	; 0xfac
 8001e70:	fb01 f303 	mul.w	r3, r1, r3
 8001e74:	4413      	add	r3, r2
 8001e76:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	68b9      	ldr	r1, [r7, #8]
 8001e80:	f240 30eb 	movw	r0, #1003	; 0x3eb
 8001e84:	fb00 f101 	mul.w	r1, r0, r1
 8001e88:	440a      	add	r2, r1
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    recorder->channels[channel_id].current_position = (recorder->channels[channel_id].current_position + 1) % WINDOW_SIZE;
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	f640 71ac 	movw	r1, #4012	; 0xfac
 8001e98:	fb01 f303 	mul.w	r3, r1, r3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	1c5a      	adds	r2, r3, #1
 8001ea6:	4b1e      	ldr	r3, [pc, #120]	; (8001f20 <addData+0x11c>)
 8001ea8:	fb83 1302 	smull	r1, r3, r3, r2
 8001eac:	1199      	asrs	r1, r3, #6
 8001eae:	17d3      	asrs	r3, r2, #31
 8001eb0:	1acb      	subs	r3, r1, r3
 8001eb2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001eb6:	fb01 f303 	mul.w	r3, r1, r3
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	68f9      	ldr	r1, [r7, #12]
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	f640 70ac 	movw	r0, #4012	; 0xfac
 8001ec4:	fb00 f202 	mul.w	r2, r0, r2
 8001ec8:	440a      	add	r2, r1
 8001eca:	f502 627a 	add.w	r2, r2, #4000	; 0xfa0
 8001ece:	6013      	str	r3, [r2, #0]

    // Mark the buffer as full if current_position wraps around to the start
    if(recorder->channels[channel_id].current_position == recorder->channels[channel_id].oldest_position) {
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	f640 71ac 	movw	r1, #4012	; 0xfac
 8001ed8:	fb01 f303 	mul.w	r3, r1, r3
 8001edc:	4413      	add	r3, r2
 8001ede:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68f9      	ldr	r1, [r7, #12]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	f640 70ac 	movw	r0, #4012	; 0xfac
 8001eec:	fb00 f303 	mul.w	r3, r0, r3
 8001ef0:	440b      	add	r3, r1
 8001ef2:	f603 73a4 	addw	r3, r3, #4004	; 0xfa4
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d10a      	bne.n	8001f12 <addData+0x10e>
        recorder->channels[channel_id].is_full = 1;
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	f640 71ac 	movw	r1, #4012	; 0xfac
 8001f04:	fb01 f303 	mul.w	r3, r1, r3
 8001f08:	4413      	add	r3, r2
 8001f0a:	f603 73a8 	addw	r3, r3, #4008	; 0xfa8
 8001f0e:	2201      	movs	r2, #1
 8001f10:	601a      	str	r2, [r3, #0]
    }
}
 8001f12:	bf00      	nop
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	10624dd3 	.word	0x10624dd3

08001f24 <MotorTaskFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MotorTask */
void MotorTaskFunction(void const * argument)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]

	uint32_t hand_position = FIST;
 8001f2c:	2311      	movs	r3, #17
 8001f2e:	60fb      	str	r3, [r7, #12]

	set_all_motor_speed(90);
 8001f30:	205a      	movs	r0, #90	; 0x5a
 8001f32:	f000 f87d 	bl	8002030 <set_all_motor_speed>
	/* Infinite loop */

	for(;;)
	{

		xSemaphoreTake(handFlexHandle, portMAX_DELAY);
 8001f36:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <MotorTaskFunction+0x30>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f04f 31ff 	mov.w	r1, #4294967295
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f003 faee 	bl	8005520 <xQueueSemaphoreTake>

//		set_hand_position(hand_position);

		xSemaphoreTake(handReleaseHandle, portMAX_DELAY);
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <MotorTaskFunction+0x34>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f04f 31ff 	mov.w	r1, #4294967295
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f003 fae7 	bl	8005520 <xQueueSemaphoreTake>
		xSemaphoreTake(handFlexHandle, portMAX_DELAY);
 8001f52:	e7f0      	b.n	8001f36 <MotorTaskFunction+0x12>
 8001f54:	200003b8 	.word	0x200003b8
 8001f58:	200003bc 	.word	0x200003bc

08001f5c <MotorTaskInit>:
	}

}

void MotorTaskInit(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af02      	add	r7, sp, #8
	  TaskFunction_t MotorTask = MotorTaskFunction;
 8001f62:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <MotorTaskInit+0x28>)
 8001f64:	607b      	str	r3, [r7, #4]
	  xTaskCreate(	MotorTask,
 8001f66:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <MotorTaskInit+0x2c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	9301      	str	r3, [sp, #4]
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	2300      	movs	r3, #0
 8001f72:	2280      	movs	r2, #128	; 0x80
 8001f74:	4905      	ldr	r1, [pc, #20]	; (8001f8c <MotorTaskInit+0x30>)
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f003 fe2d 	bl	8005bd6 <xTaskCreate>
					"Motor Task",
					128,
					0,
					tskIDLE_PRIORITY,
	  				motorTaskHandle );
}
 8001f7c:	bf00      	nop
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	08001f25 	.word	0x08001f25
 8001f88:	20004304 	.word	0x20004304
 8001f8c:	08009324 	.word	0x08009324

08001f90 <set_motor_position>:


void set_motor_position(uint8_t channel, uint16_t position){
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	460a      	mov	r2, r1
 8001f9a:	71fb      	strb	r3, [r7, #7]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	80bb      	strh	r3, [r7, #4]

	uint32_t target = 4 * position;
 8001fa0:	88bb      	ldrh	r3, [r7, #4]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	617b      	str	r3, [r7, #20]
	uint8_t tx_buffer[MESSAGE_SIZE];
	tx_buffer[0] = SET_TARGET;
 8001fa6:	2384      	movs	r3, #132	; 0x84
 8001fa8:	733b      	strb	r3, [r7, #12]
	tx_buffer[1] = channel;
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	737b      	strb	r3, [r7, #13]
	tx_buffer[2] = target & 0x7F;
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	73bb      	strb	r3, [r7, #14]
	tx_buffer[3] = (target >> 7) & 0x7F;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	09db      	lsrs	r3, r3, #7
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart6, (uint8_t*)tx_buffer, 4, HAL_MAX_DELAY);
 8001fc8:	f107 010c 	add.w	r1, r7, #12
 8001fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd0:	2204      	movs	r2, #4
 8001fd2:	4803      	ldr	r0, [pc, #12]	; (8001fe0 <set_motor_position+0x50>)
 8001fd4:	f001 ff7f 	bl	8003ed6 <HAL_UART_Transmit>

}
 8001fd8:	bf00      	nop
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20000374 	.word	0x20000374

08001fe4 <set_motor_speed>:

void set_motor_speed(uint8_t channel, uint32_t speed){
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	6039      	str	r1, [r7, #0]
 8001fee:	71fb      	strb	r3, [r7, #7]

	uint8_t tx_buffer[MESSAGE_SIZE];
	tx_buffer[0] = SET_SPEED;
 8001ff0:	2387      	movs	r3, #135	; 0x87
 8001ff2:	723b      	strb	r3, [r7, #8]
	tx_buffer[1] = channel;
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	727b      	strb	r3, [r7, #9]
	tx_buffer[2] = speed & 0x7F;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002000:	b2db      	uxtb	r3, r3
 8002002:	72bb      	strb	r3, [r7, #10]
	tx_buffer[3] = (speed >> 7) & 0x7F;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	09db      	lsrs	r3, r3, #7
 8002008:	b2db      	uxtb	r3, r3
 800200a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800200e:	b2db      	uxtb	r3, r3
 8002010:	72fb      	strb	r3, [r7, #11]
	HAL_UART_Transmit(&huart6, (uint8_t*)tx_buffer, 4, HAL_MAX_DELAY);
 8002012:	f107 0108 	add.w	r1, r7, #8
 8002016:	f04f 33ff 	mov.w	r3, #4294967295
 800201a:	2204      	movs	r2, #4
 800201c:	4803      	ldr	r0, [pc, #12]	; (800202c <set_motor_speed+0x48>)
 800201e:	f001 ff5a 	bl	8003ed6 <HAL_UART_Transmit>

}
 8002022:	bf00      	nop
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000374 	.word	0x20000374

08002030 <set_all_motor_speed>:
void set_all_motor_speed(uint32_t speed){
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]

	set_motor_speed(THUMB_FINGER, speed);
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	2000      	movs	r0, #0
 800203c:	f7ff ffd2 	bl	8001fe4 <set_motor_speed>
	set_motor_speed(LITTLE_FINGER, speed);
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	2001      	movs	r0, #1
 8002044:	f7ff ffce 	bl	8001fe4 <set_motor_speed>
	set_motor_speed(RING_FINGER, speed);
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	2002      	movs	r0, #2
 800204c:	f7ff ffca 	bl	8001fe4 <set_motor_speed>
	set_motor_speed(MIDDLE_FINGER, speed);
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	2004      	movs	r0, #4
 8002054:	f7ff ffc6 	bl	8001fe4 <set_motor_speed>
	set_motor_speed(INDEX_FINGER, speed);
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	2003      	movs	r0, #3
 800205c:	f7ff ffc2 	bl	8001fe4 <set_motor_speed>
	set_motor_speed(WRIST, speed);
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	2005      	movs	r0, #5
 8002064:	f7ff ffbe 	bl	8001fe4 <set_motor_speed>
}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <set_motor_acceleration>:

void set_motor_acceleration(uint8_t channel, uint32_t acceleration){
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	6039      	str	r1, [r7, #0]
 800207a:	71fb      	strb	r3, [r7, #7]

	uint8_t tx_buffer[MESSAGE_SIZE];
	tx_buffer[0] = SET_ACCELERATION;
 800207c:	2389      	movs	r3, #137	; 0x89
 800207e:	723b      	strb	r3, [r7, #8]
	tx_buffer[1] = channel;
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	727b      	strb	r3, [r7, #9]
	tx_buffer[2] = acceleration & 0x7F;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	b2db      	uxtb	r3, r3
 8002088:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800208c:	b2db      	uxtb	r3, r3
 800208e:	72bb      	strb	r3, [r7, #10]
	tx_buffer[3] = (acceleration >> 7) & 0x7F;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	09db      	lsrs	r3, r3, #7
 8002094:	b2db      	uxtb	r3, r3
 8002096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800209a:	b2db      	uxtb	r3, r3
 800209c:	72fb      	strb	r3, [r7, #11]
	HAL_UART_Transmit(&huart6, (uint8_t*)tx_buffer, 4, HAL_MAX_DELAY);
 800209e:	f107 0108 	add.w	r1, r7, #8
 80020a2:	f04f 33ff 	mov.w	r3, #4294967295
 80020a6:	2204      	movs	r2, #4
 80020a8:	4803      	ldr	r0, [pc, #12]	; (80020b8 <set_motor_acceleration+0x48>)
 80020aa:	f001 ff14 	bl	8003ed6 <HAL_UART_Transmit>
}
 80020ae:	bf00      	nop
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000374 	.word	0x20000374

080020bc <set_hand_position>:
	set_motor_acceleration(MIDDLE_FINGER, acceleration);
	set_motor_acceleration(INDEX_FINGER, acceleration);
	set_motor_acceleration(WRIST, acceleration);
}

void set_hand_position(const uint32_t position){
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]

	switch(position){
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3b10      	subs	r3, #16
 80020c8:	2b05      	cmp	r3, #5
 80020ca:	f200 813c 	bhi.w	8002346 <set_hand_position+0x28a>
 80020ce:	a201      	add	r2, pc, #4	; (adr r2, 80020d4 <set_hand_position+0x18>)
 80020d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d4:	080020ed 	.word	0x080020ed
 80020d8:	0800215b 	.word	0x0800215b
 80020dc:	080021c9 	.word	0x080021c9
 80020e0:	08002237 	.word	0x08002237
 80020e4:	080022a5 	.word	0x080022a5
 80020e8:	08002313 	.word	0x08002313
		case POINTING:
			set_motor_position(THUMB_FINGER, FINGER_OPEN_POSITION_THUMB);
 80020ec:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80020f0:	2000      	movs	r0, #0
 80020f2:	f7ff ff4d 	bl	8001f90 <set_motor_position>
			set_motor_position(LITTLE_FINGER, FINGER_CLOSE_POSITION_LITTLE);
 80020f6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80020fa:	2001      	movs	r0, #1
 80020fc:	f7ff ff48 	bl	8001f90 <set_motor_position>
			set_motor_position(RING_FINGER, FINGER_OPEN_POSITION_RING);
 8002100:	f640 2128 	movw	r1, #2600	; 0xa28
 8002104:	2002      	movs	r0, #2
 8002106:	f7ff ff43 	bl	8001f90 <set_motor_position>
			set_motor_position(MIDDLE_FINGER, FINGER_OPEN_POSITION_MIDDLE);
 800210a:	f640 2128 	movw	r1, #2600	; 0xa28
 800210e:	2004      	movs	r0, #4
 8002110:	f7ff ff3e 	bl	8001f90 <set_motor_position>
			set_motor_position(INDEX_FINGER, FINGER_OPEN_POSITION_INDEX);
 8002114:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8002118:	2003      	movs	r0, #3
 800211a:	f7ff ff39 	bl	8001f90 <set_motor_position>
			HAL_Delay(1000);
 800211e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002122:	f000 faab 	bl	800267c <HAL_Delay>
			set_motor_position(THUMB_FINGER, FINGER_CLOSE_POSITION_THUMB);
 8002126:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800212a:	2000      	movs	r0, #0
 800212c:	f7ff ff30 	bl	8001f90 <set_motor_position>
			set_motor_position(LITTLE_FINGER, FINGER_OPEN_POSITION_LITTLE);
 8002130:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8002134:	2001      	movs	r0, #1
 8002136:	f7ff ff2b 	bl	8001f90 <set_motor_position>
			set_motor_position(RING_FINGER, FINGER_CLOSE_POSITION_RING);
 800213a:	f240 414c 	movw	r1, #1100	; 0x44c
 800213e:	2002      	movs	r0, #2
 8002140:	f7ff ff26 	bl	8001f90 <set_motor_position>
			set_motor_position(MIDDLE_FINGER, FINGER_CLOSE_POSITION_MIDDLE);
 8002144:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8002148:	2004      	movs	r0, #4
 800214a:	f7ff ff21 	bl	8001f90 <set_motor_position>
			set_motor_position(INDEX_FINGER, FINGER_OPEN_POSITION_INDEX);
 800214e:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8002152:	2003      	movs	r0, #3
 8002154:	f7ff ff1c 	bl	8001f90 <set_motor_position>
			break;
 8002158:	e0f6      	b.n	8002348 <set_hand_position+0x28c>
		case FIST:
			set_motor_position(THUMB_FINGER, FINGER_OPEN_POSITION_THUMB);
 800215a:	f640 11c4 	movw	r1, #2500	; 0x9c4
 800215e:	2000      	movs	r0, #0
 8002160:	f7ff ff16 	bl	8001f90 <set_motor_position>
			set_motor_position(LITTLE_FINGER, FINGER_CLOSE_POSITION_LITTLE);
 8002164:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002168:	2001      	movs	r0, #1
 800216a:	f7ff ff11 	bl	8001f90 <set_motor_position>
			set_motor_position(RING_FINGER, FINGER_OPEN_POSITION_RING);
 800216e:	f640 2128 	movw	r1, #2600	; 0xa28
 8002172:	2002      	movs	r0, #2
 8002174:	f7ff ff0c 	bl	8001f90 <set_motor_position>
			set_motor_position(MIDDLE_FINGER, FINGER_OPEN_POSITION_MIDDLE);
 8002178:	f640 2128 	movw	r1, #2600	; 0xa28
 800217c:	2004      	movs	r0, #4
 800217e:	f7ff ff07 	bl	8001f90 <set_motor_position>
			set_motor_position(INDEX_FINGER, FINGER_OPEN_POSITION_INDEX);
 8002182:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8002186:	2003      	movs	r0, #3
 8002188:	f7ff ff02 	bl	8001f90 <set_motor_position>
			HAL_Delay(1000);
 800218c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002190:	f000 fa74 	bl	800267c <HAL_Delay>
			set_motor_position(THUMB_FINGER, FINGER_CLOSE_POSITION_THUMB);
 8002194:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002198:	2000      	movs	r0, #0
 800219a:	f7ff fef9 	bl	8001f90 <set_motor_position>
			set_motor_position(LITTLE_FINGER, FINGER_OPEN_POSITION_LITTLE);
 800219e:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 80021a2:	2001      	movs	r0, #1
 80021a4:	f7ff fef4 	bl	8001f90 <set_motor_position>
			set_motor_position(RING_FINGER, FINGER_CLOSE_POSITION_RING);
 80021a8:	f240 414c 	movw	r1, #1100	; 0x44c
 80021ac:	2002      	movs	r0, #2
 80021ae:	f7ff feef 	bl	8001f90 <set_motor_position>
			set_motor_position(MIDDLE_FINGER, FINGER_CLOSE_POSITION_MIDDLE);
 80021b2:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80021b6:	2004      	movs	r0, #4
 80021b8:	f7ff feea 	bl	8001f90 <set_motor_position>
			set_motor_position(INDEX_FINGER, FINGER_CLOSE_POSITION_INDEX);
 80021bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80021c0:	2003      	movs	r0, #3
 80021c2:	f7ff fee5 	bl	8001f90 <set_motor_position>
				break;
 80021c6:	e0bf      	b.n	8002348 <set_hand_position+0x28c>
		case ROCK:
			set_motor_position(THUMB_FINGER, FINGER_OPEN_POSITION_THUMB);
 80021c8:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80021cc:	2000      	movs	r0, #0
 80021ce:	f7ff fedf 	bl	8001f90 <set_motor_position>
			set_motor_position(LITTLE_FINGER, FINGER_CLOSE_POSITION_LITTLE);
 80021d2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80021d6:	2001      	movs	r0, #1
 80021d8:	f7ff feda 	bl	8001f90 <set_motor_position>
			set_motor_position(RING_FINGER, FINGER_OPEN_POSITION_RING);
 80021dc:	f640 2128 	movw	r1, #2600	; 0xa28
 80021e0:	2002      	movs	r0, #2
 80021e2:	f7ff fed5 	bl	8001f90 <set_motor_position>
			set_motor_position(MIDDLE_FINGER, FINGER_OPEN_POSITION_MIDDLE);
 80021e6:	f640 2128 	movw	r1, #2600	; 0xa28
 80021ea:	2004      	movs	r0, #4
 80021ec:	f7ff fed0 	bl	8001f90 <set_motor_position>
			set_motor_position(INDEX_FINGER, FINGER_OPEN_POSITION_INDEX);
 80021f0:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80021f4:	2003      	movs	r0, #3
 80021f6:	f7ff fecb 	bl	8001f90 <set_motor_position>
			HAL_Delay(1000);
 80021fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021fe:	f000 fa3d 	bl	800267c <HAL_Delay>
			set_motor_position(THUMB_FINGER, FINGER_CLOSE_POSITION_THUMB);
 8002202:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002206:	2000      	movs	r0, #0
 8002208:	f7ff fec2 	bl	8001f90 <set_motor_position>
			set_motor_position(LITTLE_FINGER, FINGER_CLOSE_POSITION_LITTLE);
 800220c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002210:	2001      	movs	r0, #1
 8002212:	f7ff febd 	bl	8001f90 <set_motor_position>
			set_motor_position(RING_FINGER, FINGER_CLOSE_POSITION_RING);
 8002216:	f240 414c 	movw	r1, #1100	; 0x44c
 800221a:	2002      	movs	r0, #2
 800221c:	f7ff feb8 	bl	8001f90 <set_motor_position>
			set_motor_position(MIDDLE_FINGER, FINGER_CLOSE_POSITION_MIDDLE);
 8002220:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8002224:	2004      	movs	r0, #4
 8002226:	f7ff feb3 	bl	8001f90 <set_motor_position>
			set_motor_position(INDEX_FINGER, FINGER_OPEN_POSITION_INDEX);
 800222a:	f640 11c4 	movw	r1, #2500	; 0x9c4
 800222e:	2003      	movs	r0, #3
 8002230:	f7ff feae 	bl	8001f90 <set_motor_position>
				break;
 8002234:	e088      	b.n	8002348 <set_hand_position+0x28c>
		case FUCK:
			set_motor_position(THUMB_FINGER, FINGER_OPEN_POSITION_THUMB);
 8002236:	f640 11c4 	movw	r1, #2500	; 0x9c4
 800223a:	2000      	movs	r0, #0
 800223c:	f7ff fea8 	bl	8001f90 <set_motor_position>
			set_motor_position(LITTLE_FINGER, FINGER_CLOSE_POSITION_LITTLE);
 8002240:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002244:	2001      	movs	r0, #1
 8002246:	f7ff fea3 	bl	8001f90 <set_motor_position>
			set_motor_position(RING_FINGER, FINGER_OPEN_POSITION_RING);
 800224a:	f640 2128 	movw	r1, #2600	; 0xa28
 800224e:	2002      	movs	r0, #2
 8002250:	f7ff fe9e 	bl	8001f90 <set_motor_position>
			set_motor_position(MIDDLE_FINGER, FINGER_OPEN_POSITION_MIDDLE);
 8002254:	f640 2128 	movw	r1, #2600	; 0xa28
 8002258:	2004      	movs	r0, #4
 800225a:	f7ff fe99 	bl	8001f90 <set_motor_position>
			set_motor_position(INDEX_FINGER, FINGER_OPEN_POSITION_INDEX);
 800225e:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8002262:	2003      	movs	r0, #3
 8002264:	f7ff fe94 	bl	8001f90 <set_motor_position>
			HAL_Delay(1000);
 8002268:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800226c:	f000 fa06 	bl	800267c <HAL_Delay>
			set_motor_position(THUMB_FINGER, FINGER_CLOSE_POSITION_THUMB);
 8002270:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002274:	2000      	movs	r0, #0
 8002276:	f7ff fe8b 	bl	8001f90 <set_motor_position>
			set_motor_position(LITTLE_FINGER, FINGER_OPEN_POSITION_LITTLE);
 800227a:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 800227e:	2001      	movs	r0, #1
 8002280:	f7ff fe86 	bl	8001f90 <set_motor_position>
			set_motor_position(RING_FINGER, FINGER_CLOSE_POSITION_RING);
 8002284:	f240 414c 	movw	r1, #1100	; 0x44c
 8002288:	2002      	movs	r0, #2
 800228a:	f7ff fe81 	bl	8001f90 <set_motor_position>
			set_motor_position(MIDDLE_FINGER, FINGER_OPEN_POSITION_MIDDLE);
 800228e:	f640 2128 	movw	r1, #2600	; 0xa28
 8002292:	2004      	movs	r0, #4
 8002294:	f7ff fe7c 	bl	8001f90 <set_motor_position>
			set_motor_position(INDEX_FINGER, FINGER_CLOSE_POSITION_INDEX);
 8002298:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800229c:	2003      	movs	r0, #3
 800229e:	f7ff fe77 	bl	8001f90 <set_motor_position>
				break;
 80022a2:	e051      	b.n	8002348 <set_hand_position+0x28c>
		case THUMB:
			set_motor_position(THUMB_FINGER, FINGER_OPEN_POSITION_THUMB);
 80022a4:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80022a8:	2000      	movs	r0, #0
 80022aa:	f7ff fe71 	bl	8001f90 <set_motor_position>
			set_motor_position(LITTLE_FINGER, FINGER_CLOSE_POSITION_LITTLE);
 80022ae:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80022b2:	2001      	movs	r0, #1
 80022b4:	f7ff fe6c 	bl	8001f90 <set_motor_position>
			set_motor_position(RING_FINGER, FINGER_OPEN_POSITION_RING);
 80022b8:	f640 2128 	movw	r1, #2600	; 0xa28
 80022bc:	2002      	movs	r0, #2
 80022be:	f7ff fe67 	bl	8001f90 <set_motor_position>
			set_motor_position(MIDDLE_FINGER, FINGER_OPEN_POSITION_MIDDLE);
 80022c2:	f640 2128 	movw	r1, #2600	; 0xa28
 80022c6:	2004      	movs	r0, #4
 80022c8:	f7ff fe62 	bl	8001f90 <set_motor_position>
			set_motor_position(INDEX_FINGER, FINGER_OPEN_POSITION_INDEX);
 80022cc:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80022d0:	2003      	movs	r0, #3
 80022d2:	f7ff fe5d 	bl	8001f90 <set_motor_position>
			HAL_Delay(1000);
 80022d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022da:	f000 f9cf 	bl	800267c <HAL_Delay>
			set_motor_position(THUMB_FINGER, FINGER_OPEN_POSITION_THUMB);
 80022de:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80022e2:	2000      	movs	r0, #0
 80022e4:	f7ff fe54 	bl	8001f90 <set_motor_position>
			set_motor_position(LITTLE_FINGER, FINGER_OPEN_POSITION_LITTLE);
 80022e8:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 80022ec:	2001      	movs	r0, #1
 80022ee:	f7ff fe4f 	bl	8001f90 <set_motor_position>
			set_motor_position(RING_FINGER, FINGER_CLOSE_POSITION_RING);
 80022f2:	f240 414c 	movw	r1, #1100	; 0x44c
 80022f6:	2002      	movs	r0, #2
 80022f8:	f7ff fe4a 	bl	8001f90 <set_motor_position>
			set_motor_position(MIDDLE_FINGER, FINGER_CLOSE_POSITION_MIDDLE);
 80022fc:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8002300:	2004      	movs	r0, #4
 8002302:	f7ff fe45 	bl	8001f90 <set_motor_position>
			set_motor_position(INDEX_FINGER, FINGER_CLOSE_POSITION_INDEX);
 8002306:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800230a:	2003      	movs	r0, #3
 800230c:	f7ff fe40 	bl	8001f90 <set_motor_position>
				break;
 8002310:	e01a      	b.n	8002348 <set_hand_position+0x28c>
		case OPEN:
			set_motor_position(THUMB_FINGER, FINGER_OPEN_POSITION_THUMB);
 8002312:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8002316:	2000      	movs	r0, #0
 8002318:	f7ff fe3a 	bl	8001f90 <set_motor_position>
			set_motor_position(LITTLE_FINGER, FINGER_CLOSE_POSITION_LITTLE);
 800231c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002320:	2001      	movs	r0, #1
 8002322:	f7ff fe35 	bl	8001f90 <set_motor_position>
			set_motor_position(RING_FINGER, FINGER_OPEN_POSITION_RING);
 8002326:	f640 2128 	movw	r1, #2600	; 0xa28
 800232a:	2002      	movs	r0, #2
 800232c:	f7ff fe30 	bl	8001f90 <set_motor_position>
			set_motor_position(MIDDLE_FINGER, FINGER_OPEN_POSITION_MIDDLE);
 8002330:	f640 2128 	movw	r1, #2600	; 0xa28
 8002334:	2004      	movs	r0, #4
 8002336:	f7ff fe2b 	bl	8001f90 <set_motor_position>
			set_motor_position(INDEX_FINGER, FINGER_OPEN_POSITION_INDEX);
 800233a:	f640 11c4 	movw	r1, #2500	; 0x9c4
 800233e:	2003      	movs	r0, #3
 8002340:	f7ff fe26 	bl	8001f90 <set_motor_position>
				break;
 8002344:	e000      	b.n	8002348 <set_hand_position+0x28c>
		default:
			break;
 8002346:	bf00      	nop
	}

}
 8002348:	bf00      	nop
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <UI_Init>:
uint8_t rx_buffer_size = 4;
volatile uint8_t buffer[MESSAGE_SIZE];
volatile uint8_t rx_index = 0;
uint8_t add_buffer = 0;
uint8_t send_buffer = 2;
void UI_Init(void){
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0

	HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002354:	2200      	movs	r2, #0
 8002356:	2105      	movs	r1, #5
 8002358:	2026      	movs	r0, #38	; 0x26
 800235a:	f000 fe70 	bl	800303e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 800235e:	2026      	movs	r0, #38	; 0x26
 8002360:	f000 fe89 	bl	8003076 <HAL_NVIC_EnableIRQ>
	HAL_UART_Receive_IT(&huart2, buffer, MESSAGE_SIZE);
 8002364:	2207      	movs	r2, #7
 8002366:	4903      	ldr	r1, [pc, #12]	; (8002374 <UI_Init+0x24>)
 8002368:	4803      	ldr	r0, [pc, #12]	; (8002378 <UI_Init+0x28>)
 800236a:	f001 fe46 	bl	8003ffa <HAL_UART_Receive_IT>
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20004308 	.word	0x20004308
 8002378:	20000330 	.word	0x20000330

0800237c <UARTReceiveTask>:

void UARTReceiveTask(void const *argument){
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
	uint8_t checksum_received, checksum_calculated;


	for(;;)
	{
		if (xQueueReceive(xQueue, &message, portMAX_DELAY))
 8002384:	4b4a      	ldr	r3, [pc, #296]	; (80024b0 <UARTReceiveTask+0x134>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f107 010c 	add.w	r1, r7, #12
 800238c:	f04f 32ff 	mov.w	r2, #4294967295
 8002390:	4618      	mov	r0, r3
 8002392:	f002 ffe5 	bl	8005360 <xQueueReceive>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0f3      	beq.n	8002384 <UARTReceiveTask+0x8>
	    {

			if (message[0] != 0xA5) {
 800239c:	7b3b      	ldrb	r3, [r7, #12]
 800239e:	2ba5      	cmp	r3, #165	; 0xa5
 80023a0:	d017      	beq.n	80023d2 <UARTReceiveTask+0x56>
				// Find the next valid header in the buffer to resync
				while (xQueuePeek(xQueue, &message[0], 0) == pdPASS && message[0] != 0xA5) {
 80023a2:	e007      	b.n	80023b4 <UARTReceiveTask+0x38>
					xQueueReceive(xQueue, &message[0], 0);
 80023a4:	4b42      	ldr	r3, [pc, #264]	; (80024b0 <UARTReceiveTask+0x134>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f107 010c 	add.w	r1, r7, #12
 80023ac:	2200      	movs	r2, #0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f002 ffd6 	bl	8005360 <xQueueReceive>
				while (xQueuePeek(xQueue, &message[0], 0) == pdPASS && message[0] != 0xA5) {
 80023b4:	4b3e      	ldr	r3, [pc, #248]	; (80024b0 <UARTReceiveTask+0x134>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f107 010c 	add.w	r1, r7, #12
 80023bc:	2200      	movs	r2, #0
 80023be:	4618      	mov	r0, r3
 80023c0:	f003 f9ba 	bl	8005738 <xQueuePeek>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d16d      	bne.n	80024a6 <UARTReceiveTask+0x12a>
 80023ca:	7b3b      	ldrb	r3, [r7, #12]
 80023cc:	2ba5      	cmp	r3, #165	; 0xa5
 80023ce:	d1e9      	bne.n	80023a4 <UARTReceiveTask+0x28>
				}
				continue;
 80023d0:	e069      	b.n	80024a6 <UARTReceiveTask+0x12a>
			}

            command = message[1];
 80023d2:	7b7b      	ldrb	r3, [r7, #13]
 80023d4:	75fb      	strb	r3, [r7, #23]
			motor_id = message[2];
 80023d6:	7bbb      	ldrb	r3, [r7, #14]
 80023d8:	75bb      	strb	r3, [r7, #22]
			value = ( ( (uint16_t) message[3] ) << 8) | (uint16_t) message[4];
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	021b      	lsls	r3, r3, #8
 80023de:	b21a      	sxth	r2, r3
 80023e0:	7c3b      	ldrb	r3, [r7, #16]
 80023e2:	b21b      	sxth	r3, r3
 80023e4:	4313      	orrs	r3, r2
 80023e6:	b21b      	sxth	r3, r3
 80023e8:	82bb      	strh	r3, [r7, #20]

//	    	printf("command: %x\n motor id: %x\n value: %x\n",command,motor_id,value);
	        switch(command) {
 80023ea:	7dfb      	ldrb	r3, [r7, #23]
 80023ec:	3b01      	subs	r3, #1
 80023ee:	2b14      	cmp	r3, #20
 80023f0:	d85b      	bhi.n	80024aa <UARTReceiveTask+0x12e>
 80023f2:	a201      	add	r2, pc, #4	; (adr r2, 80023f8 <UARTReceiveTask+0x7c>)
 80023f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f8:	0800244d 	.word	0x0800244d
 80023fc:	0800245b 	.word	0x0800245b
 8002400:	08002469 	.word	0x08002469
 8002404:	080024ab 	.word	0x080024ab
 8002408:	080024ab 	.word	0x080024ab
 800240c:	080024ab 	.word	0x080024ab
 8002410:	080024ab 	.word	0x080024ab
 8002414:	080024ab 	.word	0x080024ab
 8002418:	080024ab 	.word	0x080024ab
 800241c:	080024ab 	.word	0x080024ab
 8002420:	080024ab 	.word	0x080024ab
 8002424:	080024ab 	.word	0x080024ab
 8002428:	080024ab 	.word	0x080024ab
 800242c:	080024ab 	.word	0x080024ab
 8002430:	080024ab 	.word	0x080024ab
 8002434:	08002477 	.word	0x08002477
 8002438:	0800247f 	.word	0x0800247f
 800243c:	08002487 	.word	0x08002487
 8002440:	0800248f 	.word	0x0800248f
 8002444:	08002497 	.word	0x08002497
 8002448:	0800249f 	.word	0x0800249f
	            case COMMAND_SET_MOTOR_POSITION:
	                set_motor_position(motor_id, value);
 800244c:	8aba      	ldrh	r2, [r7, #20]
 800244e:	7dbb      	ldrb	r3, [r7, #22]
 8002450:	4611      	mov	r1, r2
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff fd9c 	bl	8001f90 <set_motor_position>
	                break;
 8002458:	e028      	b.n	80024ac <UARTReceiveTask+0x130>

	            case COMMAND_SET_MOTOR_SPEED:
	                set_motor_speed(motor_id, value);
 800245a:	8aba      	ldrh	r2, [r7, #20]
 800245c:	7dbb      	ldrb	r3, [r7, #22]
 800245e:	4611      	mov	r1, r2
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff fdbf 	bl	8001fe4 <set_motor_speed>
	                break;
 8002466:	e021      	b.n	80024ac <UARTReceiveTask+0x130>

	            case COMMAND_SET_MOTOR_ACCELERATION:
	                set_motor_acceleration(motor_id, value);
 8002468:	8aba      	ldrh	r2, [r7, #20]
 800246a:	7dbb      	ldrb	r3, [r7, #22]
 800246c:	4611      	mov	r1, r2
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fdfe 	bl	8002070 <set_motor_acceleration>
	                break;
 8002474:	e01a      	b.n	80024ac <UARTReceiveTask+0x130>

	            case COMMAND_HAND_POSITION_POINTING:
	    		   set_hand_position(POINTING);
 8002476:	2010      	movs	r0, #16
 8002478:	f7ff fe20 	bl	80020bc <set_hand_position>
	    		   break;
 800247c:	e016      	b.n	80024ac <UARTReceiveTask+0x130>
	    	   case COMMAND_HAND_POSITION_FIST:
	    		   set_hand_position(FIST);
 800247e:	2011      	movs	r0, #17
 8002480:	f7ff fe1c 	bl	80020bc <set_hand_position>
	    		   break;
 8002484:	e012      	b.n	80024ac <UARTReceiveTask+0x130>

	    	   case COMMAND_HAND_POSITION_ROCK:
	    		   set_hand_position(ROCK);
 8002486:	2012      	movs	r0, #18
 8002488:	f7ff fe18 	bl	80020bc <set_hand_position>
	    		   break;
 800248c:	e00e      	b.n	80024ac <UARTReceiveTask+0x130>

	    	   case COMMAND_HAND_POSITION_FUCK:
	    		   set_hand_position(FUCK);
 800248e:	2013      	movs	r0, #19
 8002490:	f7ff fe14 	bl	80020bc <set_hand_position>
	    		   break;
 8002494:	e00a      	b.n	80024ac <UARTReceiveTask+0x130>

	    	   case COMMAND_HAND_POSITION_THUMB:
	    		   set_hand_position(THUMB);
 8002496:	2014      	movs	r0, #20
 8002498:	f7ff fe10 	bl	80020bc <set_hand_position>
	    		   break;
 800249c:	e006      	b.n	80024ac <UARTReceiveTask+0x130>

	    	   case COMMAND_HAND_POSITION_OPEN:
	    		   set_hand_position(OPEN);
 800249e:	2015      	movs	r0, #21
 80024a0:	f7ff fe0c 	bl	80020bc <set_hand_position>
	    		   break;
 80024a4:	e002      	b.n	80024ac <UARTReceiveTask+0x130>
				continue;
 80024a6:	bf00      	nop
 80024a8:	e76c      	b.n	8002384 <UARTReceiveTask+0x8>

	            default:
	                // Unknown command
	                break;
 80024aa:	bf00      	nop
		if (xQueueReceive(xQueue, &message, portMAX_DELAY))
 80024ac:	e76a      	b.n	8002384 <UARTReceiveTask+0x8>
 80024ae:	bf00      	nop
 80024b0:	200003c4 	.word	0x200003c4

080024b4 <UARTReceiveTaskInit>:
	        }
	    }
	}
}

void UARTReceiveTaskInit(void){
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af02      	add	r7, sp, #8

	TaskFunction_t UARTTask = UARTReceiveTask;
 80024ba:	4b08      	ldr	r3, [pc, #32]	; (80024dc <UARTReceiveTaskInit+0x28>)
 80024bc:	607b      	str	r3, [r7, #4]

	xTaskCreate(UARTTask,
 80024be:	2300      	movs	r3, #0
 80024c0:	9301      	str	r3, [sp, #4]
 80024c2:	2301      	movs	r3, #1
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	2300      	movs	r3, #0
 80024c8:	2280      	movs	r2, #128	; 0x80
 80024ca:	4905      	ldr	r1, [pc, #20]	; (80024e0 <UARTReceiveTaskInit+0x2c>)
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f003 fb82 	bl	8005bd6 <xTaskCreate>
				"UART Task",
				128,
				NULL,//(void *) &hadc1
				tskIDLE_PRIORITY + 1,
				NULL );
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	0800237d 	.word	0x0800237d
 80024e0:	08009330 	.word	0x08009330

080024e4 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_IRQn 0 */
	if (USART2->SR & USART_SR_RXNE)  // Check if data is available to read
 80024e8:	4b24      	ldr	r3, [pc, #144]	; (800257c <USART2_IRQHandler+0x98>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0320 	and.w	r3, r3, #32
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d040      	beq.n	8002576 <USART2_IRQHandler+0x92>
	{
		if( (uint8_t)(USART2->DR) == 0xA5 )
 80024f4:	4b21      	ldr	r3, [pc, #132]	; (800257c <USART2_IRQHandler+0x98>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2ba5      	cmp	r3, #165	; 0xa5
 80024fc:	d103      	bne.n	8002506 <USART2_IRQHandler+0x22>
		{
			add_buffer = 1;
 80024fe:	4b20      	ldr	r3, [pc, #128]	; (8002580 <USART2_IRQHandler+0x9c>)
 8002500:	2201      	movs	r2, #1
 8002502:	701a      	strb	r2, [r3, #0]
 8002504:	e00f      	b.n	8002526 <USART2_IRQHandler+0x42>
		}
		else if ( (uint8_t)(USART2->DR) == 0xAB || (uint8_t)(USART2->DR) == 0xCD )
 8002506:	4b1d      	ldr	r3, [pc, #116]	; (800257c <USART2_IRQHandler+0x98>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2bab      	cmp	r3, #171	; 0xab
 800250e:	d004      	beq.n	800251a <USART2_IRQHandler+0x36>
 8002510:	4b1a      	ldr	r3, [pc, #104]	; (800257c <USART2_IRQHandler+0x98>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2bcd      	cmp	r3, #205	; 0xcd
 8002518:	d105      	bne.n	8002526 <USART2_IRQHandler+0x42>
		{
			send_buffer--;
 800251a:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <USART2_IRQHandler+0xa0>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	3b01      	subs	r3, #1
 8002520:	b2da      	uxtb	r2, r3
 8002522:	4b18      	ldr	r3, [pc, #96]	; (8002584 <USART2_IRQHandler+0xa0>)
 8002524:	701a      	strb	r2, [r3, #0]
		}

		if(add_buffer == 1)
 8002526:	4b16      	ldr	r3, [pc, #88]	; (8002580 <USART2_IRQHandler+0x9c>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d10c      	bne.n	8002548 <USART2_IRQHandler+0x64>
		{
			buffer[rx_index++] = (uint8_t)(USART2->DR);  // Read data
 800252e:	4b13      	ldr	r3, [pc, #76]	; (800257c <USART2_IRQHandler+0x98>)
 8002530:	6859      	ldr	r1, [r3, #4]
 8002532:	4b15      	ldr	r3, [pc, #84]	; (8002588 <USART2_IRQHandler+0xa4>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	b2db      	uxtb	r3, r3
 8002538:	1c5a      	adds	r2, r3, #1
 800253a:	b2d0      	uxtb	r0, r2
 800253c:	4a12      	ldr	r2, [pc, #72]	; (8002588 <USART2_IRQHandler+0xa4>)
 800253e:	7010      	strb	r0, [r2, #0]
 8002540:	461a      	mov	r2, r3
 8002542:	b2c9      	uxtb	r1, r1
 8002544:	4b11      	ldr	r3, [pc, #68]	; (800258c <USART2_IRQHandler+0xa8>)
 8002546:	5499      	strb	r1, [r3, r2]
		}


		if (send_buffer == 0)  // If 4 bytes have been read, reset the index or do other processing
 8002548:	4b0e      	ldr	r3, [pc, #56]	; (8002584 <USART2_IRQHandler+0xa0>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d112      	bne.n	8002576 <USART2_IRQHandler+0x92>
		{
			rx_index = 0;
 8002550:	4b0d      	ldr	r3, [pc, #52]	; (8002588 <USART2_IRQHandler+0xa4>)
 8002552:	2200      	movs	r2, #0
 8002554:	701a      	strb	r2, [r3, #0]
			add_buffer = 0;
 8002556:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <USART2_IRQHandler+0x9c>)
 8002558:	2200      	movs	r2, #0
 800255a:	701a      	strb	r2, [r3, #0]
			send_buffer = 2;
 800255c:	4b09      	ldr	r3, [pc, #36]	; (8002584 <USART2_IRQHandler+0xa0>)
 800255e:	2202      	movs	r2, #2
 8002560:	701a      	strb	r2, [r3, #0]

			xQueueSendFromISR(xQueue, buffer, pdFALSE);
 8002562:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <USART2_IRQHandler+0xac>)
 8002564:	6818      	ldr	r0, [r3, #0]
 8002566:	2300      	movs	r3, #0
 8002568:	2200      	movs	r2, #0
 800256a:	4908      	ldr	r1, [pc, #32]	; (800258c <USART2_IRQHandler+0xa8>)
 800256c:	f002 fe5d 	bl	800522a <xQueueGenericSendFromISR>
			HAL_UART_IRQHandler(&huart2);
 8002570:	4808      	ldr	r0, [pc, #32]	; (8002594 <USART2_IRQHandler+0xb0>)
 8002572:	f001 fd73 	bl	800405c <HAL_UART_IRQHandler>
  /* USER CODE END USART2_IRQn 0 */

  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40004400 	.word	0x40004400
 8002580:	20004310 	.word	0x20004310
 8002584:	20000004 	.word	0x20000004
 8002588:	2000430f 	.word	0x2000430f
 800258c:	20004308 	.word	0x20004308
 8002590:	200003c4 	.word	0x200003c4
 8002594:	20000330 	.word	0x20000330

08002598 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800259c:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <HAL_Init+0x40>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a0d      	ldr	r2, [pc, #52]	; (80025d8 <HAL_Init+0x40>)
 80025a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025a8:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <HAL_Init+0x40>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <HAL_Init+0x40>)
 80025ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025b4:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <HAL_Init+0x40>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a07      	ldr	r2, [pc, #28]	; (80025d8 <HAL_Init+0x40>)
 80025ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025c0:	2003      	movs	r0, #3
 80025c2:	f000 fd31 	bl	8003028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025c6:	200f      	movs	r0, #15
 80025c8:	f000 f808 	bl	80025dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025cc:	f7fe fe58 	bl	8001280 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40023c00 	.word	0x40023c00

080025dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025e4:	4b12      	ldr	r3, [pc, #72]	; (8002630 <HAL_InitTick+0x54>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	4b12      	ldr	r3, [pc, #72]	; (8002634 <HAL_InitTick+0x58>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	4619      	mov	r1, r3
 80025ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 fd49 	bl	8003092 <HAL_SYSTICK_Config>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e00e      	b.n	8002628 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b0f      	cmp	r3, #15
 800260e:	d80a      	bhi.n	8002626 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002610:	2200      	movs	r2, #0
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	f04f 30ff 	mov.w	r0, #4294967295
 8002618:	f000 fd11 	bl	800303e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800261c:	4a06      	ldr	r2, [pc, #24]	; (8002638 <HAL_InitTick+0x5c>)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002622:	2300      	movs	r3, #0
 8002624:	e000      	b.n	8002628 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20000000 	.word	0x20000000
 8002634:	2000000c 	.word	0x2000000c
 8002638:	20000008 	.word	0x20000008

0800263c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <HAL_IncTick+0x20>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_IncTick+0x24>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4413      	add	r3, r2
 800264c:	4a04      	ldr	r2, [pc, #16]	; (8002660 <HAL_IncTick+0x24>)
 800264e:	6013      	str	r3, [r2, #0]
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	2000000c 	.word	0x2000000c
 8002660:	20004314 	.word	0x20004314

08002664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return uwTick;
 8002668:	4b03      	ldr	r3, [pc, #12]	; (8002678 <HAL_GetTick+0x14>)
 800266a:	681b      	ldr	r3, [r3, #0]
}
 800266c:	4618      	mov	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	20004314 	.word	0x20004314

0800267c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002684:	f7ff ffee 	bl	8002664 <HAL_GetTick>
 8002688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002694:	d005      	beq.n	80026a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002696:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <HAL_Delay+0x44>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	461a      	mov	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4413      	add	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026a2:	bf00      	nop
 80026a4:	f7ff ffde 	bl	8002664 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d8f7      	bhi.n	80026a4 <HAL_Delay+0x28>
  {
  }
}
 80026b4:	bf00      	nop
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	2000000c 	.word	0x2000000c

080026c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026cc:	2300      	movs	r3, #0
 80026ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e033      	b.n	8002742 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d109      	bne.n	80026f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7fe fdf8 	bl	80012d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f003 0310 	and.w	r3, r3, #16
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d118      	bne.n	8002734 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800270a:	f023 0302 	bic.w	r3, r3, #2
 800270e:	f043 0202 	orr.w	r2, r3, #2
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 faba 	bl	8002c90 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f023 0303 	bic.w	r3, r3, #3
 800272a:	f043 0201 	orr.w	r2, r3, #1
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	641a      	str	r2, [r3, #64]	; 0x40
 8002732:	e001      	b.n	8002738 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002740:	7bfb      	ldrb	r3, [r7, #15]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800275e:	2b01      	cmp	r3, #1
 8002760:	d101      	bne.n	8002766 <HAL_ADC_Start+0x1a>
 8002762:	2302      	movs	r3, #2
 8002764:	e097      	b.n	8002896 <HAL_ADC_Start+0x14a>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b01      	cmp	r3, #1
 800277a:	d018      	beq.n	80027ae <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800278c:	4b45      	ldr	r3, [pc, #276]	; (80028a4 <HAL_ADC_Start+0x158>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a45      	ldr	r2, [pc, #276]	; (80028a8 <HAL_ADC_Start+0x15c>)
 8002792:	fba2 2303 	umull	r2, r3, r2, r3
 8002796:	0c9a      	lsrs	r2, r3, #18
 8002798:	4613      	mov	r3, r2
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	4413      	add	r3, r2
 800279e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80027a0:	e002      	b.n	80027a8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f9      	bne.n	80027a2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d15f      	bne.n	800287c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80027c4:	f023 0301 	bic.w	r3, r3, #1
 80027c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d007      	beq.n	80027ee <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027fa:	d106      	bne.n	800280a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002800:	f023 0206 	bic.w	r2, r3, #6
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	645a      	str	r2, [r3, #68]	; 0x44
 8002808:	e002      	b.n	8002810 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002818:	4b24      	ldr	r3, [pc, #144]	; (80028ac <HAL_ADC_Start+0x160>)
 800281a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002824:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 031f 	and.w	r3, r3, #31
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10f      	bne.n	8002852 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d129      	bne.n	8002894 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	e020      	b.n	8002894 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a16      	ldr	r2, [pc, #88]	; (80028b0 <HAL_ADC_Start+0x164>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d11b      	bne.n	8002894 <HAL_ADC_Start+0x148>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d114      	bne.n	8002894 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002878:	609a      	str	r2, [r3, #8]
 800287a:	e00b      	b.n	8002894 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	f043 0210 	orr.w	r2, r3, #16
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288c:	f043 0201 	orr.w	r2, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	20000000 	.word	0x20000000
 80028a8:	431bde83 	.word	0x431bde83
 80028ac:	40012300 	.word	0x40012300
 80028b0:	40012000 	.word	0x40012000

080028b4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_ADC_Stop+0x16>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e021      	b.n	800290e <HAL_ADC_Stop+0x5a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0201 	bic.w	r2, r2, #1
 80028e0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d109      	bne.n	8002904 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028f8:	f023 0301 	bic.w	r3, r3, #1
 80028fc:	f043 0201 	orr.w	r2, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b084      	sub	sp, #16
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
 8002922:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002936:	d113      	bne.n	8002960 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002946:	d10b      	bne.n	8002960 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294c:	f043 0220 	orr.w	r2, r3, #32
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e063      	b.n	8002a28 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002960:	f7ff fe80 	bl	8002664 <HAL_GetTick>
 8002964:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002966:	e021      	b.n	80029ac <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296e:	d01d      	beq.n	80029ac <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d007      	beq.n	8002986 <HAL_ADC_PollForConversion+0x6c>
 8002976:	f7ff fe75 	bl	8002664 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d212      	bcs.n	80029ac <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b02      	cmp	r3, #2
 8002992:	d00b      	beq.n	80029ac <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	f043 0204 	orr.w	r2, r3, #4
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e03d      	b.n	8002a28 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d1d6      	bne.n	8002968 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f06f 0212 	mvn.w	r2, #18
 80029c2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d123      	bne.n	8002a26 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d11f      	bne.n	8002a26 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ec:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d006      	beq.n	8002a02 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d111      	bne.n	8002a26 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d105      	bne.n	8002a26 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	f043 0201 	orr.w	r2, r3, #1
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
	...

08002a4c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x1c>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e105      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x228>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b09      	cmp	r3, #9
 8002a76:	d925      	bls.n	8002ac4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68d9      	ldr	r1, [r3, #12]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	461a      	mov	r2, r3
 8002a86:	4613      	mov	r3, r2
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3b1e      	subs	r3, #30
 8002a8e:	2207      	movs	r2, #7
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43da      	mvns	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	400a      	ands	r2, r1
 8002a9c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68d9      	ldr	r1, [r3, #12]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	4618      	mov	r0, r3
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	4403      	add	r3, r0
 8002ab6:	3b1e      	subs	r3, #30
 8002ab8:	409a      	lsls	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	60da      	str	r2, [r3, #12]
 8002ac2:	e022      	b.n	8002b0a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6919      	ldr	r1, [r3, #16]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	4413      	add	r3, r2
 8002ad8:	2207      	movs	r2, #7
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43da      	mvns	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	400a      	ands	r2, r1
 8002ae6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6919      	ldr	r1, [r3, #16]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	4618      	mov	r0, r3
 8002afa:	4603      	mov	r3, r0
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	4403      	add	r3, r0
 8002b00:	409a      	lsls	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b06      	cmp	r3, #6
 8002b10:	d824      	bhi.n	8002b5c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	3b05      	subs	r3, #5
 8002b24:	221f      	movs	r2, #31
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43da      	mvns	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	400a      	ands	r2, r1
 8002b32:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	4618      	mov	r0, r3
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3b05      	subs	r3, #5
 8002b4e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	635a      	str	r2, [r3, #52]	; 0x34
 8002b5a:	e04c      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2b0c      	cmp	r3, #12
 8002b62:	d824      	bhi.n	8002bae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	3b23      	subs	r3, #35	; 0x23
 8002b76:	221f      	movs	r2, #31
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	43da      	mvns	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	400a      	ands	r2, r1
 8002b84:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	4618      	mov	r0, r3
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3b23      	subs	r3, #35	; 0x23
 8002ba0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	631a      	str	r2, [r3, #48]	; 0x30
 8002bac:	e023      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3b41      	subs	r3, #65	; 0x41
 8002bc0:	221f      	movs	r2, #31
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43da      	mvns	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	400a      	ands	r2, r1
 8002bce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	4618      	mov	r0, r3
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	3b41      	subs	r3, #65	; 0x41
 8002bea:	fa00 f203 	lsl.w	r2, r0, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bf6:	4b22      	ldr	r3, [pc, #136]	; (8002c80 <HAL_ADC_ConfigChannel+0x234>)
 8002bf8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a21      	ldr	r2, [pc, #132]	; (8002c84 <HAL_ADC_ConfigChannel+0x238>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d109      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x1cc>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2b12      	cmp	r3, #18
 8002c0a:	d105      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a19      	ldr	r2, [pc, #100]	; (8002c84 <HAL_ADC_ConfigChannel+0x238>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d123      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x21e>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b10      	cmp	r3, #16
 8002c28:	d003      	beq.n	8002c32 <HAL_ADC_ConfigChannel+0x1e6>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2b11      	cmp	r3, #17
 8002c30:	d11b      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b10      	cmp	r3, #16
 8002c44:	d111      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c46:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <HAL_ADC_ConfigChannel+0x23c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a10      	ldr	r2, [pc, #64]	; (8002c8c <HAL_ADC_ConfigChannel+0x240>)
 8002c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c50:	0c9a      	lsrs	r2, r3, #18
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c5c:	e002      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	3b01      	subs	r3, #1
 8002c62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f9      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	40012300 	.word	0x40012300
 8002c84:	40012000 	.word	0x40012000
 8002c88:	20000000 	.word	0x20000000
 8002c8c:	431bde83 	.word	0x431bde83

08002c90 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c98:	4b79      	ldr	r3, [pc, #484]	; (8002e80 <ADC_Init+0x1f0>)
 8002c9a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6859      	ldr	r1, [r3, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	021a      	lsls	r2, r3, #8
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ce8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6859      	ldr	r1, [r3, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6899      	ldr	r1, [r3, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d22:	4a58      	ldr	r2, [pc, #352]	; (8002e84 <ADC_Init+0x1f4>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d022      	beq.n	8002d6e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689a      	ldr	r2, [r3, #8]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d36:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6899      	ldr	r1, [r3, #8]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6899      	ldr	r1, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	609a      	str	r2, [r3, #8]
 8002d6c:	e00f      	b.n	8002d8e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d8c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0202 	bic.w	r2, r2, #2
 8002d9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6899      	ldr	r1, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	7e1b      	ldrb	r3, [r3, #24]
 8002da8:	005a      	lsls	r2, r3, #1
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d01b      	beq.n	8002df4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002dda:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6859      	ldr	r1, [r3, #4]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	3b01      	subs	r3, #1
 8002de8:	035a      	lsls	r2, r3, #13
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	e007      	b.n	8002e04 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e02:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	051a      	lsls	r2, r3, #20
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6899      	ldr	r1, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e46:	025a      	lsls	r2, r3, #9
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6899      	ldr	r1, [r3, #8]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	029a      	lsls	r2, r3, #10
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	609a      	str	r2, [r3, #8]
}
 8002e74:	bf00      	nop
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	40012300 	.word	0x40012300
 8002e84:	0f000001 	.word	0x0f000001

08002e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e98:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <__NVIC_SetPriorityGrouping+0x44>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002eb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eba:	4a04      	ldr	r2, [pc, #16]	; (8002ecc <__NVIC_SetPriorityGrouping+0x44>)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	60d3      	str	r3, [r2, #12]
}
 8002ec0:	bf00      	nop
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ed4:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	0a1b      	lsrs	r3, r3, #8
 8002eda:	f003 0307 	and.w	r3, r3, #7
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	e000ed00 	.word	0xe000ed00

08002eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	db0b      	blt.n	8002f16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	f003 021f 	and.w	r2, r3, #31
 8002f04:	4907      	ldr	r1, [pc, #28]	; (8002f24 <__NVIC_EnableIRQ+0x38>)
 8002f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	2001      	movs	r0, #1
 8002f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	e000e100 	.word	0xe000e100

08002f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	6039      	str	r1, [r7, #0]
 8002f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	db0a      	blt.n	8002f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	490c      	ldr	r1, [pc, #48]	; (8002f74 <__NVIC_SetPriority+0x4c>)
 8002f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f46:	0112      	lsls	r2, r2, #4
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	440b      	add	r3, r1
 8002f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f50:	e00a      	b.n	8002f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	4908      	ldr	r1, [pc, #32]	; (8002f78 <__NVIC_SetPriority+0x50>)
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	3b04      	subs	r3, #4
 8002f60:	0112      	lsls	r2, r2, #4
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	440b      	add	r3, r1
 8002f66:	761a      	strb	r2, [r3, #24]
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	e000e100 	.word	0xe000e100
 8002f78:	e000ed00 	.word	0xe000ed00

08002f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b089      	sub	sp, #36	; 0x24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f1c3 0307 	rsb	r3, r3, #7
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	bf28      	it	cs
 8002f9a:	2304      	movcs	r3, #4
 8002f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	2b06      	cmp	r3, #6
 8002fa4:	d902      	bls.n	8002fac <NVIC_EncodePriority+0x30>
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	3b03      	subs	r3, #3
 8002faa:	e000      	b.n	8002fae <NVIC_EncodePriority+0x32>
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43da      	mvns	r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	401a      	ands	r2, r3
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	fa01 f303 	lsl.w	r3, r1, r3
 8002fce:	43d9      	mvns	r1, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd4:	4313      	orrs	r3, r2
         );
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3724      	adds	r7, #36	; 0x24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
	...

08002fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ff4:	d301      	bcc.n	8002ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e00f      	b.n	800301a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ffa:	4a0a      	ldr	r2, [pc, #40]	; (8003024 <SysTick_Config+0x40>)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003002:	210f      	movs	r1, #15
 8003004:	f04f 30ff 	mov.w	r0, #4294967295
 8003008:	f7ff ff8e 	bl	8002f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800300c:	4b05      	ldr	r3, [pc, #20]	; (8003024 <SysTick_Config+0x40>)
 800300e:	2200      	movs	r2, #0
 8003010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003012:	4b04      	ldr	r3, [pc, #16]	; (8003024 <SysTick_Config+0x40>)
 8003014:	2207      	movs	r2, #7
 8003016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	e000e010 	.word	0xe000e010

08003028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff ff29 	bl	8002e88 <__NVIC_SetPriorityGrouping>
}
 8003036:	bf00      	nop
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800303e:	b580      	push	{r7, lr}
 8003040:	b086      	sub	sp, #24
 8003042:	af00      	add	r7, sp, #0
 8003044:	4603      	mov	r3, r0
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	607a      	str	r2, [r7, #4]
 800304a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003050:	f7ff ff3e 	bl	8002ed0 <__NVIC_GetPriorityGrouping>
 8003054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	68b9      	ldr	r1, [r7, #8]
 800305a:	6978      	ldr	r0, [r7, #20]
 800305c:	f7ff ff8e 	bl	8002f7c <NVIC_EncodePriority>
 8003060:	4602      	mov	r2, r0
 8003062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003066:	4611      	mov	r1, r2
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff ff5d 	bl	8002f28 <__NVIC_SetPriority>
}
 800306e:	bf00      	nop
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b082      	sub	sp, #8
 800307a:	af00      	add	r7, sp, #0
 800307c:	4603      	mov	r3, r0
 800307e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff ff31 	bl	8002eec <__NVIC_EnableIRQ>
}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7ff ffa2 	bl	8002fe4 <SysTick_Config>
 80030a0:	4603      	mov	r3, r0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b084      	sub	sp, #16
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030b8:	f7ff fad4 	bl	8002664 <HAL_GetTick>
 80030bc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d008      	beq.n	80030dc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2280      	movs	r2, #128	; 0x80
 80030ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e052      	b.n	8003182 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0216 	bic.w	r2, r2, #22
 80030ea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695a      	ldr	r2, [r3, #20]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030fa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003100:	2b00      	cmp	r3, #0
 8003102:	d103      	bne.n	800310c <HAL_DMA_Abort+0x62>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003108:	2b00      	cmp	r3, #0
 800310a:	d007      	beq.n	800311c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0208 	bic.w	r2, r2, #8
 800311a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0201 	bic.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800312c:	e013      	b.n	8003156 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800312e:	f7ff fa99 	bl	8002664 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b05      	cmp	r3, #5
 800313a:	d90c      	bls.n	8003156 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2220      	movs	r2, #32
 8003140:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2203      	movs	r2, #3
 8003146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e015      	b.n	8003182 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1e4      	bne.n	800312e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003168:	223f      	movs	r2, #63	; 0x3f
 800316a:	409a      	lsls	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d004      	beq.n	80031a8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2280      	movs	r2, #128	; 0x80
 80031a2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e00c      	b.n	80031c2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2205      	movs	r2, #5
 80031ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0201 	bic.w	r2, r2, #1
 80031be:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
	...

080031d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b089      	sub	sp, #36	; 0x24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031de:	2300      	movs	r3, #0
 80031e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031e6:	2300      	movs	r3, #0
 80031e8:	61fb      	str	r3, [r7, #28]
 80031ea:	e159      	b.n	80034a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031ec:	2201      	movs	r2, #1
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	4013      	ands	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	429a      	cmp	r2, r3
 8003206:	f040 8148 	bne.w	800349a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	2b01      	cmp	r3, #1
 8003214:	d005      	beq.n	8003222 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800321e:	2b02      	cmp	r3, #2
 8003220:	d130      	bne.n	8003284 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	2203      	movs	r2, #3
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	43db      	mvns	r3, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4013      	ands	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	4313      	orrs	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003258:	2201      	movs	r2, #1
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	43db      	mvns	r3, r3
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4013      	ands	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	091b      	lsrs	r3, r3, #4
 800326e:	f003 0201 	and.w	r2, r3, #1
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4313      	orrs	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f003 0303 	and.w	r3, r3, #3
 800328c:	2b03      	cmp	r3, #3
 800328e:	d017      	beq.n	80032c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	2203      	movs	r2, #3
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	43db      	mvns	r3, r3
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	4013      	ands	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 0303 	and.w	r3, r3, #3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d123      	bne.n	8003314 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	08da      	lsrs	r2, r3, #3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3208      	adds	r2, #8
 80032d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	220f      	movs	r2, #15
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	43db      	mvns	r3, r3
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	4013      	ands	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	4313      	orrs	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	08da      	lsrs	r2, r3, #3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3208      	adds	r2, #8
 800330e:	69b9      	ldr	r1, [r7, #24]
 8003310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	2203      	movs	r2, #3
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	43db      	mvns	r3, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4013      	ands	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f003 0203 	and.w	r2, r3, #3
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4313      	orrs	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 80a2 	beq.w	800349a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	60fb      	str	r3, [r7, #12]
 800335a:	4b57      	ldr	r3, [pc, #348]	; (80034b8 <HAL_GPIO_Init+0x2e8>)
 800335c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335e:	4a56      	ldr	r2, [pc, #344]	; (80034b8 <HAL_GPIO_Init+0x2e8>)
 8003360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003364:	6453      	str	r3, [r2, #68]	; 0x44
 8003366:	4b54      	ldr	r3, [pc, #336]	; (80034b8 <HAL_GPIO_Init+0x2e8>)
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003372:	4a52      	ldr	r2, [pc, #328]	; (80034bc <HAL_GPIO_Init+0x2ec>)
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	089b      	lsrs	r3, r3, #2
 8003378:	3302      	adds	r3, #2
 800337a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800337e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	220f      	movs	r2, #15
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	43db      	mvns	r3, r3
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4013      	ands	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a49      	ldr	r2, [pc, #292]	; (80034c0 <HAL_GPIO_Init+0x2f0>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d019      	beq.n	80033d2 <HAL_GPIO_Init+0x202>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a48      	ldr	r2, [pc, #288]	; (80034c4 <HAL_GPIO_Init+0x2f4>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d013      	beq.n	80033ce <HAL_GPIO_Init+0x1fe>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a47      	ldr	r2, [pc, #284]	; (80034c8 <HAL_GPIO_Init+0x2f8>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d00d      	beq.n	80033ca <HAL_GPIO_Init+0x1fa>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a46      	ldr	r2, [pc, #280]	; (80034cc <HAL_GPIO_Init+0x2fc>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d007      	beq.n	80033c6 <HAL_GPIO_Init+0x1f6>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a45      	ldr	r2, [pc, #276]	; (80034d0 <HAL_GPIO_Init+0x300>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d101      	bne.n	80033c2 <HAL_GPIO_Init+0x1f2>
 80033be:	2304      	movs	r3, #4
 80033c0:	e008      	b.n	80033d4 <HAL_GPIO_Init+0x204>
 80033c2:	2307      	movs	r3, #7
 80033c4:	e006      	b.n	80033d4 <HAL_GPIO_Init+0x204>
 80033c6:	2303      	movs	r3, #3
 80033c8:	e004      	b.n	80033d4 <HAL_GPIO_Init+0x204>
 80033ca:	2302      	movs	r3, #2
 80033cc:	e002      	b.n	80033d4 <HAL_GPIO_Init+0x204>
 80033ce:	2301      	movs	r3, #1
 80033d0:	e000      	b.n	80033d4 <HAL_GPIO_Init+0x204>
 80033d2:	2300      	movs	r3, #0
 80033d4:	69fa      	ldr	r2, [r7, #28]
 80033d6:	f002 0203 	and.w	r2, r2, #3
 80033da:	0092      	lsls	r2, r2, #2
 80033dc:	4093      	lsls	r3, r2
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033e4:	4935      	ldr	r1, [pc, #212]	; (80034bc <HAL_GPIO_Init+0x2ec>)
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	089b      	lsrs	r3, r3, #2
 80033ea:	3302      	adds	r3, #2
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033f2:	4b38      	ldr	r3, [pc, #224]	; (80034d4 <HAL_GPIO_Init+0x304>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	43db      	mvns	r3, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4013      	ands	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	4313      	orrs	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003416:	4a2f      	ldr	r2, [pc, #188]	; (80034d4 <HAL_GPIO_Init+0x304>)
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800341c:	4b2d      	ldr	r3, [pc, #180]	; (80034d4 <HAL_GPIO_Init+0x304>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	43db      	mvns	r3, r3
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4013      	ands	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003440:	4a24      	ldr	r2, [pc, #144]	; (80034d4 <HAL_GPIO_Init+0x304>)
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003446:	4b23      	ldr	r3, [pc, #140]	; (80034d4 <HAL_GPIO_Init+0x304>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	43db      	mvns	r3, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4013      	ands	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	4313      	orrs	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800346a:	4a1a      	ldr	r2, [pc, #104]	; (80034d4 <HAL_GPIO_Init+0x304>)
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003470:	4b18      	ldr	r3, [pc, #96]	; (80034d4 <HAL_GPIO_Init+0x304>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	43db      	mvns	r3, r3
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4013      	ands	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	4313      	orrs	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003494:	4a0f      	ldr	r2, [pc, #60]	; (80034d4 <HAL_GPIO_Init+0x304>)
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	3301      	adds	r3, #1
 800349e:	61fb      	str	r3, [r7, #28]
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	2b0f      	cmp	r3, #15
 80034a4:	f67f aea2 	bls.w	80031ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034a8:	bf00      	nop
 80034aa:	bf00      	nop
 80034ac:	3724      	adds	r7, #36	; 0x24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40023800 	.word	0x40023800
 80034bc:	40013800 	.word	0x40013800
 80034c0:	40020000 	.word	0x40020000
 80034c4:	40020400 	.word	0x40020400
 80034c8:	40020800 	.word	0x40020800
 80034cc:	40020c00 	.word	0x40020c00
 80034d0:	40021000 	.word	0x40021000
 80034d4:	40013c00 	.word	0x40013c00

080034d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	460b      	mov	r3, r1
 80034e2:	807b      	strh	r3, [r7, #2]
 80034e4:	4613      	mov	r3, r2
 80034e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034e8:	787b      	ldrb	r3, [r7, #1]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034ee:	887a      	ldrh	r2, [r7, #2]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034f4:	e003      	b.n	80034fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034f6:	887b      	ldrh	r3, [r7, #2]
 80034f8:	041a      	lsls	r2, r3, #16
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	619a      	str	r2, [r3, #24]
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
	...

0800350c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e267      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d075      	beq.n	8003616 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800352a:	4b88      	ldr	r3, [pc, #544]	; (800374c <HAL_RCC_OscConfig+0x240>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 030c 	and.w	r3, r3, #12
 8003532:	2b04      	cmp	r3, #4
 8003534:	d00c      	beq.n	8003550 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003536:	4b85      	ldr	r3, [pc, #532]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800353e:	2b08      	cmp	r3, #8
 8003540:	d112      	bne.n	8003568 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003542:	4b82      	ldr	r3, [pc, #520]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800354a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800354e:	d10b      	bne.n	8003568 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003550:	4b7e      	ldr	r3, [pc, #504]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d05b      	beq.n	8003614 <HAL_RCC_OscConfig+0x108>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d157      	bne.n	8003614 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e242      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003570:	d106      	bne.n	8003580 <HAL_RCC_OscConfig+0x74>
 8003572:	4b76      	ldr	r3, [pc, #472]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a75      	ldr	r2, [pc, #468]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	e01d      	b.n	80035bc <HAL_RCC_OscConfig+0xb0>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003588:	d10c      	bne.n	80035a4 <HAL_RCC_OscConfig+0x98>
 800358a:	4b70      	ldr	r3, [pc, #448]	; (800374c <HAL_RCC_OscConfig+0x240>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a6f      	ldr	r2, [pc, #444]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	4b6d      	ldr	r3, [pc, #436]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a6c      	ldr	r2, [pc, #432]	; (800374c <HAL_RCC_OscConfig+0x240>)
 800359c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	e00b      	b.n	80035bc <HAL_RCC_OscConfig+0xb0>
 80035a4:	4b69      	ldr	r3, [pc, #420]	; (800374c <HAL_RCC_OscConfig+0x240>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a68      	ldr	r2, [pc, #416]	; (800374c <HAL_RCC_OscConfig+0x240>)
 80035aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	4b66      	ldr	r3, [pc, #408]	; (800374c <HAL_RCC_OscConfig+0x240>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a65      	ldr	r2, [pc, #404]	; (800374c <HAL_RCC_OscConfig+0x240>)
 80035b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d013      	beq.n	80035ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c4:	f7ff f84e 	bl	8002664 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035cc:	f7ff f84a 	bl	8002664 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b64      	cmp	r3, #100	; 0x64
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e207      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035de:	4b5b      	ldr	r3, [pc, #364]	; (800374c <HAL_RCC_OscConfig+0x240>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0f0      	beq.n	80035cc <HAL_RCC_OscConfig+0xc0>
 80035ea:	e014      	b.n	8003616 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ec:	f7ff f83a 	bl	8002664 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035f4:	f7ff f836 	bl	8002664 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b64      	cmp	r3, #100	; 0x64
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e1f3      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003606:	4b51      	ldr	r3, [pc, #324]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f0      	bne.n	80035f4 <HAL_RCC_OscConfig+0xe8>
 8003612:	e000      	b.n	8003616 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d063      	beq.n	80036ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003622:	4b4a      	ldr	r3, [pc, #296]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 030c 	and.w	r3, r3, #12
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00b      	beq.n	8003646 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800362e:	4b47      	ldr	r3, [pc, #284]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003636:	2b08      	cmp	r3, #8
 8003638:	d11c      	bne.n	8003674 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800363a:	4b44      	ldr	r3, [pc, #272]	; (800374c <HAL_RCC_OscConfig+0x240>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d116      	bne.n	8003674 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003646:	4b41      	ldr	r3, [pc, #260]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d005      	beq.n	800365e <HAL_RCC_OscConfig+0x152>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d001      	beq.n	800365e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e1c7      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800365e:	4b3b      	ldr	r3, [pc, #236]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	4937      	ldr	r1, [pc, #220]	; (800374c <HAL_RCC_OscConfig+0x240>)
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003672:	e03a      	b.n	80036ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d020      	beq.n	80036be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800367c:	4b34      	ldr	r3, [pc, #208]	; (8003750 <HAL_RCC_OscConfig+0x244>)
 800367e:	2201      	movs	r2, #1
 8003680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003682:	f7fe ffef 	bl	8002664 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800368a:	f7fe ffeb 	bl	8002664 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e1a8      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800369c:	4b2b      	ldr	r3, [pc, #172]	; (800374c <HAL_RCC_OscConfig+0x240>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0f0      	beq.n	800368a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a8:	4b28      	ldr	r3, [pc, #160]	; (800374c <HAL_RCC_OscConfig+0x240>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	4925      	ldr	r1, [pc, #148]	; (800374c <HAL_RCC_OscConfig+0x240>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	600b      	str	r3, [r1, #0]
 80036bc:	e015      	b.n	80036ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036be:	4b24      	ldr	r3, [pc, #144]	; (8003750 <HAL_RCC_OscConfig+0x244>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c4:	f7fe ffce 	bl	8002664 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036cc:	f7fe ffca 	bl	8002664 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e187      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036de:	4b1b      	ldr	r3, [pc, #108]	; (800374c <HAL_RCC_OscConfig+0x240>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d036      	beq.n	8003764 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d016      	beq.n	800372c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036fe:	4b15      	ldr	r3, [pc, #84]	; (8003754 <HAL_RCC_OscConfig+0x248>)
 8003700:	2201      	movs	r2, #1
 8003702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003704:	f7fe ffae 	bl	8002664 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800370c:	f7fe ffaa 	bl	8002664 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e167      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800371e:	4b0b      	ldr	r3, [pc, #44]	; (800374c <HAL_RCC_OscConfig+0x240>)
 8003720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0f0      	beq.n	800370c <HAL_RCC_OscConfig+0x200>
 800372a:	e01b      	b.n	8003764 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800372c:	4b09      	ldr	r3, [pc, #36]	; (8003754 <HAL_RCC_OscConfig+0x248>)
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003732:	f7fe ff97 	bl	8002664 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003738:	e00e      	b.n	8003758 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800373a:	f7fe ff93 	bl	8002664 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d907      	bls.n	8003758 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e150      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
 800374c:	40023800 	.word	0x40023800
 8003750:	42470000 	.word	0x42470000
 8003754:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003758:	4b88      	ldr	r3, [pc, #544]	; (800397c <HAL_RCC_OscConfig+0x470>)
 800375a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1ea      	bne.n	800373a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 8097 	beq.w	80038a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003772:	2300      	movs	r3, #0
 8003774:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003776:	4b81      	ldr	r3, [pc, #516]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10f      	bne.n	80037a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003782:	2300      	movs	r3, #0
 8003784:	60bb      	str	r3, [r7, #8]
 8003786:	4b7d      	ldr	r3, [pc, #500]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	4a7c      	ldr	r2, [pc, #496]	; (800397c <HAL_RCC_OscConfig+0x470>)
 800378c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003790:	6413      	str	r3, [r2, #64]	; 0x40
 8003792:	4b7a      	ldr	r3, [pc, #488]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379a:	60bb      	str	r3, [r7, #8]
 800379c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800379e:	2301      	movs	r3, #1
 80037a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a2:	4b77      	ldr	r3, [pc, #476]	; (8003980 <HAL_RCC_OscConfig+0x474>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d118      	bne.n	80037e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ae:	4b74      	ldr	r3, [pc, #464]	; (8003980 <HAL_RCC_OscConfig+0x474>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a73      	ldr	r2, [pc, #460]	; (8003980 <HAL_RCC_OscConfig+0x474>)
 80037b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ba:	f7fe ff53 	bl	8002664 <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c2:	f7fe ff4f 	bl	8002664 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e10c      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d4:	4b6a      	ldr	r3, [pc, #424]	; (8003980 <HAL_RCC_OscConfig+0x474>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0f0      	beq.n	80037c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d106      	bne.n	80037f6 <HAL_RCC_OscConfig+0x2ea>
 80037e8:	4b64      	ldr	r3, [pc, #400]	; (800397c <HAL_RCC_OscConfig+0x470>)
 80037ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ec:	4a63      	ldr	r2, [pc, #396]	; (800397c <HAL_RCC_OscConfig+0x470>)
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	6713      	str	r3, [r2, #112]	; 0x70
 80037f4:	e01c      	b.n	8003830 <HAL_RCC_OscConfig+0x324>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	2b05      	cmp	r3, #5
 80037fc:	d10c      	bne.n	8003818 <HAL_RCC_OscConfig+0x30c>
 80037fe:	4b5f      	ldr	r3, [pc, #380]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003802:	4a5e      	ldr	r2, [pc, #376]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003804:	f043 0304 	orr.w	r3, r3, #4
 8003808:	6713      	str	r3, [r2, #112]	; 0x70
 800380a:	4b5c      	ldr	r3, [pc, #368]	; (800397c <HAL_RCC_OscConfig+0x470>)
 800380c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380e:	4a5b      	ldr	r2, [pc, #364]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003810:	f043 0301 	orr.w	r3, r3, #1
 8003814:	6713      	str	r3, [r2, #112]	; 0x70
 8003816:	e00b      	b.n	8003830 <HAL_RCC_OscConfig+0x324>
 8003818:	4b58      	ldr	r3, [pc, #352]	; (800397c <HAL_RCC_OscConfig+0x470>)
 800381a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381c:	4a57      	ldr	r2, [pc, #348]	; (800397c <HAL_RCC_OscConfig+0x470>)
 800381e:	f023 0301 	bic.w	r3, r3, #1
 8003822:	6713      	str	r3, [r2, #112]	; 0x70
 8003824:	4b55      	ldr	r3, [pc, #340]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003828:	4a54      	ldr	r2, [pc, #336]	; (800397c <HAL_RCC_OscConfig+0x470>)
 800382a:	f023 0304 	bic.w	r3, r3, #4
 800382e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d015      	beq.n	8003864 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003838:	f7fe ff14 	bl	8002664 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800383e:	e00a      	b.n	8003856 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003840:	f7fe ff10 	bl	8002664 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	f241 3288 	movw	r2, #5000	; 0x1388
 800384e:	4293      	cmp	r3, r2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e0cb      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003856:	4b49      	ldr	r3, [pc, #292]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0ee      	beq.n	8003840 <HAL_RCC_OscConfig+0x334>
 8003862:	e014      	b.n	800388e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003864:	f7fe fefe 	bl	8002664 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386a:	e00a      	b.n	8003882 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800386c:	f7fe fefa 	bl	8002664 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	f241 3288 	movw	r2, #5000	; 0x1388
 800387a:	4293      	cmp	r3, r2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e0b5      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003882:	4b3e      	ldr	r3, [pc, #248]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1ee      	bne.n	800386c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800388e:	7dfb      	ldrb	r3, [r7, #23]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d105      	bne.n	80038a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003894:	4b39      	ldr	r3, [pc, #228]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	4a38      	ldr	r2, [pc, #224]	; (800397c <HAL_RCC_OscConfig+0x470>)
 800389a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800389e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 80a1 	beq.w	80039ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038aa:	4b34      	ldr	r3, [pc, #208]	; (800397c <HAL_RCC_OscConfig+0x470>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 030c 	and.w	r3, r3, #12
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d05c      	beq.n	8003970 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d141      	bne.n	8003942 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038be:	4b31      	ldr	r3, [pc, #196]	; (8003984 <HAL_RCC_OscConfig+0x478>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c4:	f7fe fece 	bl	8002664 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038cc:	f7fe feca 	bl	8002664 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e087      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038de:	4b27      	ldr	r3, [pc, #156]	; (800397c <HAL_RCC_OscConfig+0x470>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1f0      	bne.n	80038cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69da      	ldr	r2, [r3, #28]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	019b      	lsls	r3, r3, #6
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003900:	085b      	lsrs	r3, r3, #1
 8003902:	3b01      	subs	r3, #1
 8003904:	041b      	lsls	r3, r3, #16
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390c:	061b      	lsls	r3, r3, #24
 800390e:	491b      	ldr	r1, [pc, #108]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003910:	4313      	orrs	r3, r2
 8003912:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003914:	4b1b      	ldr	r3, [pc, #108]	; (8003984 <HAL_RCC_OscConfig+0x478>)
 8003916:	2201      	movs	r2, #1
 8003918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391a:	f7fe fea3 	bl	8002664 <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003922:	f7fe fe9f 	bl	8002664 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e05c      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003934:	4b11      	ldr	r3, [pc, #68]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0f0      	beq.n	8003922 <HAL_RCC_OscConfig+0x416>
 8003940:	e054      	b.n	80039ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003942:	4b10      	ldr	r3, [pc, #64]	; (8003984 <HAL_RCC_OscConfig+0x478>)
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003948:	f7fe fe8c 	bl	8002664 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003950:	f7fe fe88 	bl	8002664 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e045      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003962:	4b06      	ldr	r3, [pc, #24]	; (800397c <HAL_RCC_OscConfig+0x470>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f0      	bne.n	8003950 <HAL_RCC_OscConfig+0x444>
 800396e:	e03d      	b.n	80039ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d107      	bne.n	8003988 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e038      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
 800397c:	40023800 	.word	0x40023800
 8003980:	40007000 	.word	0x40007000
 8003984:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003988:	4b1b      	ldr	r3, [pc, #108]	; (80039f8 <HAL_RCC_OscConfig+0x4ec>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d028      	beq.n	80039e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d121      	bne.n	80039e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d11a      	bne.n	80039e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039b8:	4013      	ands	r3, r2
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d111      	bne.n	80039e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ce:	085b      	lsrs	r3, r3, #1
 80039d0:	3b01      	subs	r3, #1
 80039d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d107      	bne.n	80039e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d001      	beq.n	80039ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e000      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40023800 	.word	0x40023800

080039fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0cc      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a10:	4b68      	ldr	r3, [pc, #416]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d90c      	bls.n	8003a38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a1e:	4b65      	ldr	r3, [pc, #404]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a26:	4b63      	ldr	r3, [pc, #396]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d001      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e0b8      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d020      	beq.n	8003a86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d005      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a50:	4b59      	ldr	r3, [pc, #356]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	4a58      	ldr	r2, [pc, #352]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0308 	and.w	r3, r3, #8
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d005      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a68:	4b53      	ldr	r3, [pc, #332]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	4a52      	ldr	r2, [pc, #328]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a74:	4b50      	ldr	r3, [pc, #320]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	494d      	ldr	r1, [pc, #308]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d044      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d107      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9a:	4b47      	ldr	r3, [pc, #284]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d119      	bne.n	8003ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e07f      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d003      	beq.n	8003aba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ab6:	2b03      	cmp	r3, #3
 8003ab8:	d107      	bne.n	8003aca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aba:	4b3f      	ldr	r3, [pc, #252]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d109      	bne.n	8003ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e06f      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aca:	4b3b      	ldr	r3, [pc, #236]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e067      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ada:	4b37      	ldr	r3, [pc, #220]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f023 0203 	bic.w	r2, r3, #3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	4934      	ldr	r1, [pc, #208]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aec:	f7fe fdba 	bl	8002664 <HAL_GetTick>
 8003af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af2:	e00a      	b.n	8003b0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af4:	f7fe fdb6 	bl	8002664 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e04f      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0a:	4b2b      	ldr	r3, [pc, #172]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 020c 	and.w	r2, r3, #12
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d1eb      	bne.n	8003af4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b1c:	4b25      	ldr	r3, [pc, #148]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d20c      	bcs.n	8003b44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b2a:	4b22      	ldr	r3, [pc, #136]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b32:	4b20      	ldr	r3, [pc, #128]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d001      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e032      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d008      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b50:	4b19      	ldr	r3, [pc, #100]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	4916      	ldr	r1, [pc, #88]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d009      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b6e:	4b12      	ldr	r3, [pc, #72]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	490e      	ldr	r1, [pc, #56]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b82:	f000 f821 	bl	8003bc8 <HAL_RCC_GetSysClockFreq>
 8003b86:	4602      	mov	r2, r0
 8003b88:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	091b      	lsrs	r3, r3, #4
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	490a      	ldr	r1, [pc, #40]	; (8003bbc <HAL_RCC_ClockConfig+0x1c0>)
 8003b94:	5ccb      	ldrb	r3, [r1, r3]
 8003b96:	fa22 f303 	lsr.w	r3, r2, r3
 8003b9a:	4a09      	ldr	r2, [pc, #36]	; (8003bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b9e:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fe fd1a 	bl	80025dc <HAL_InitTick>

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40023c00 	.word	0x40023c00
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	08009344 	.word	0x08009344
 8003bc0:	20000000 	.word	0x20000000
 8003bc4:	20000008 	.word	0x20000008

08003bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bcc:	b094      	sub	sp, #80	; 0x50
 8003bce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	647b      	str	r3, [r7, #68]	; 0x44
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bd8:	2300      	movs	r3, #0
 8003bda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003be0:	4b79      	ldr	r3, [pc, #484]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 030c 	and.w	r3, r3, #12
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d00d      	beq.n	8003c08 <HAL_RCC_GetSysClockFreq+0x40>
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	f200 80e1 	bhi.w	8003db4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <HAL_RCC_GetSysClockFreq+0x34>
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d003      	beq.n	8003c02 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bfa:	e0db      	b.n	8003db4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bfc:	4b73      	ldr	r3, [pc, #460]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x204>)
 8003bfe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003c00:	e0db      	b.n	8003dba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c02:	4b73      	ldr	r3, [pc, #460]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c06:	e0d8      	b.n	8003dba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c08:	4b6f      	ldr	r3, [pc, #444]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c10:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c12:	4b6d      	ldr	r3, [pc, #436]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d063      	beq.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c1e:	4b6a      	ldr	r3, [pc, #424]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	099b      	lsrs	r3, r3, #6
 8003c24:	2200      	movs	r2, #0
 8003c26:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c30:	633b      	str	r3, [r7, #48]	; 0x30
 8003c32:	2300      	movs	r3, #0
 8003c34:	637b      	str	r3, [r7, #52]	; 0x34
 8003c36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c3a:	4622      	mov	r2, r4
 8003c3c:	462b      	mov	r3, r5
 8003c3e:	f04f 0000 	mov.w	r0, #0
 8003c42:	f04f 0100 	mov.w	r1, #0
 8003c46:	0159      	lsls	r1, r3, #5
 8003c48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c4c:	0150      	lsls	r0, r2, #5
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	4621      	mov	r1, r4
 8003c54:	1a51      	subs	r1, r2, r1
 8003c56:	6139      	str	r1, [r7, #16]
 8003c58:	4629      	mov	r1, r5
 8003c5a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c6c:	4659      	mov	r1, fp
 8003c6e:	018b      	lsls	r3, r1, #6
 8003c70:	4651      	mov	r1, sl
 8003c72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c76:	4651      	mov	r1, sl
 8003c78:	018a      	lsls	r2, r1, #6
 8003c7a:	4651      	mov	r1, sl
 8003c7c:	ebb2 0801 	subs.w	r8, r2, r1
 8003c80:	4659      	mov	r1, fp
 8003c82:	eb63 0901 	sbc.w	r9, r3, r1
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	f04f 0300 	mov.w	r3, #0
 8003c8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c9a:	4690      	mov	r8, r2
 8003c9c:	4699      	mov	r9, r3
 8003c9e:	4623      	mov	r3, r4
 8003ca0:	eb18 0303 	adds.w	r3, r8, r3
 8003ca4:	60bb      	str	r3, [r7, #8]
 8003ca6:	462b      	mov	r3, r5
 8003ca8:	eb49 0303 	adc.w	r3, r9, r3
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	f04f 0200 	mov.w	r2, #0
 8003cb2:	f04f 0300 	mov.w	r3, #0
 8003cb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003cba:	4629      	mov	r1, r5
 8003cbc:	024b      	lsls	r3, r1, #9
 8003cbe:	4621      	mov	r1, r4
 8003cc0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cc4:	4621      	mov	r1, r4
 8003cc6:	024a      	lsls	r2, r1, #9
 8003cc8:	4610      	mov	r0, r2
 8003cca:	4619      	mov	r1, r3
 8003ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cce:	2200      	movs	r2, #0
 8003cd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cd8:	f7fc ff66 	bl	8000ba8 <__aeabi_uldivmod>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ce4:	e058      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ce6:	4b38      	ldr	r3, [pc, #224]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	099b      	lsrs	r3, r3, #6
 8003cec:	2200      	movs	r2, #0
 8003cee:	4618      	mov	r0, r3
 8003cf0:	4611      	mov	r1, r2
 8003cf2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cf6:	623b      	str	r3, [r7, #32]
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8003cfc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d00:	4642      	mov	r2, r8
 8003d02:	464b      	mov	r3, r9
 8003d04:	f04f 0000 	mov.w	r0, #0
 8003d08:	f04f 0100 	mov.w	r1, #0
 8003d0c:	0159      	lsls	r1, r3, #5
 8003d0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d12:	0150      	lsls	r0, r2, #5
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	4641      	mov	r1, r8
 8003d1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d1e:	4649      	mov	r1, r9
 8003d20:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	f04f 0300 	mov.w	r3, #0
 8003d2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d38:	ebb2 040a 	subs.w	r4, r2, sl
 8003d3c:	eb63 050b 	sbc.w	r5, r3, fp
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	00eb      	lsls	r3, r5, #3
 8003d4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d4e:	00e2      	lsls	r2, r4, #3
 8003d50:	4614      	mov	r4, r2
 8003d52:	461d      	mov	r5, r3
 8003d54:	4643      	mov	r3, r8
 8003d56:	18e3      	adds	r3, r4, r3
 8003d58:	603b      	str	r3, [r7, #0]
 8003d5a:	464b      	mov	r3, r9
 8003d5c:	eb45 0303 	adc.w	r3, r5, r3
 8003d60:	607b      	str	r3, [r7, #4]
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	f04f 0300 	mov.w	r3, #0
 8003d6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d6e:	4629      	mov	r1, r5
 8003d70:	028b      	lsls	r3, r1, #10
 8003d72:	4621      	mov	r1, r4
 8003d74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d78:	4621      	mov	r1, r4
 8003d7a:	028a      	lsls	r2, r1, #10
 8003d7c:	4610      	mov	r0, r2
 8003d7e:	4619      	mov	r1, r3
 8003d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d82:	2200      	movs	r2, #0
 8003d84:	61bb      	str	r3, [r7, #24]
 8003d86:	61fa      	str	r2, [r7, #28]
 8003d88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d8c:	f7fc ff0c 	bl	8000ba8 <__aeabi_uldivmod>
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	4613      	mov	r3, r2
 8003d96:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d98:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	0c1b      	lsrs	r3, r3, #16
 8003d9e:	f003 0303 	and.w	r3, r3, #3
 8003da2:	3301      	adds	r3, #1
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003da8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003db2:	e002      	b.n	8003dba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003db4:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x204>)
 8003db6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003db8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3750      	adds	r7, #80	; 0x50
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	00f42400 	.word	0x00f42400
 8003dd0:	007a1200 	.word	0x007a1200

08003dd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dd8:	4b03      	ldr	r3, [pc, #12]	; (8003de8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dda:	681b      	ldr	r3, [r3, #0]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	20000000 	.word	0x20000000

08003dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003df0:	f7ff fff0 	bl	8003dd4 <HAL_RCC_GetHCLKFreq>
 8003df4:	4602      	mov	r2, r0
 8003df6:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	0a9b      	lsrs	r3, r3, #10
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	4903      	ldr	r1, [pc, #12]	; (8003e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e02:	5ccb      	ldrb	r3, [r1, r3]
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	08009354 	.word	0x08009354

08003e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e18:	f7ff ffdc 	bl	8003dd4 <HAL_RCC_GetHCLKFreq>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	0b5b      	lsrs	r3, r3, #13
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	4903      	ldr	r1, [pc, #12]	; (8003e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e2a:	5ccb      	ldrb	r3, [r1, r3]
 8003e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40023800 	.word	0x40023800
 8003e38:	08009354 	.word	0x08009354

08003e3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e03f      	b.n	8003ece <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d106      	bne.n	8003e68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7fd fa7c 	bl	8001360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2224      	movs	r2, #36	; 0x24
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 fde9 	bl	8004a58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	691a      	ldr	r2, [r3, #16]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	695a      	ldr	r2, [r3, #20]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ea4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003eb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b08a      	sub	sp, #40	; 0x28
 8003eda:	af02      	add	r7, sp, #8
 8003edc:	60f8      	str	r0, [r7, #12]
 8003ede:	60b9      	str	r1, [r7, #8]
 8003ee0:	603b      	str	r3, [r7, #0]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b20      	cmp	r3, #32
 8003ef4:	d17c      	bne.n	8003ff0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <HAL_UART_Transmit+0x2c>
 8003efc:	88fb      	ldrh	r3, [r7, #6]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e075      	b.n	8003ff2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_UART_Transmit+0x3e>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e06e      	b.n	8003ff2 <HAL_UART_Transmit+0x11c>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2221      	movs	r2, #33	; 0x21
 8003f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f2a:	f7fe fb9b 	bl	8002664 <HAL_GetTick>
 8003f2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	88fa      	ldrh	r2, [r7, #6]
 8003f34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	88fa      	ldrh	r2, [r7, #6]
 8003f3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f44:	d108      	bne.n	8003f58 <HAL_UART_Transmit+0x82>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d104      	bne.n	8003f58 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	61bb      	str	r3, [r7, #24]
 8003f56:	e003      	b.n	8003f60 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003f68:	e02a      	b.n	8003fc0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	2200      	movs	r2, #0
 8003f72:	2180      	movs	r1, #128	; 0x80
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 fb29 	bl	80045cc <UART_WaitOnFlagUntilTimeout>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e036      	b.n	8003ff2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10b      	bne.n	8003fa2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	3302      	adds	r3, #2
 8003f9e:	61bb      	str	r3, [r7, #24]
 8003fa0:	e007      	b.n	8003fb2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	781a      	ldrb	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1cf      	bne.n	8003f6a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	2140      	movs	r1, #64	; 0x40
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f000 faf9 	bl	80045cc <UART_WaitOnFlagUntilTimeout>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e006      	b.n	8003ff2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003fec:	2300      	movs	r3, #0
 8003fee:	e000      	b.n	8003ff2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ff0:	2302      	movs	r3, #2
  }
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3720      	adds	r7, #32
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b084      	sub	sp, #16
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	60b9      	str	r1, [r7, #8]
 8004004:	4613      	mov	r3, r2
 8004006:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b20      	cmp	r3, #32
 8004012:	d11d      	bne.n	8004050 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d002      	beq.n	8004020 <HAL_UART_Receive_IT+0x26>
 800401a:	88fb      	ldrh	r3, [r7, #6]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e016      	b.n	8004052 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800402a:	2b01      	cmp	r3, #1
 800402c:	d101      	bne.n	8004032 <HAL_UART_Receive_IT+0x38>
 800402e:	2302      	movs	r3, #2
 8004030:	e00f      	b.n	8004052 <HAL_UART_Receive_IT+0x58>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004040:	88fb      	ldrh	r3, [r7, #6]
 8004042:	461a      	mov	r2, r3
 8004044:	68b9      	ldr	r1, [r7, #8]
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 fb2e 	bl	80046a8 <UART_Start_Receive_IT>
 800404c:	4603      	mov	r3, r0
 800404e:	e000      	b.n	8004052 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004050:	2302      	movs	r3, #2
  }
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
	...

0800405c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b0ba      	sub	sp, #232	; 0xe8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004082:	2300      	movs	r3, #0
 8004084:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004088:	2300      	movs	r3, #0
 800408a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800408e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800409a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10f      	bne.n	80040c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040a6:	f003 0320 	and.w	r3, r3, #32
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d009      	beq.n	80040c2 <HAL_UART_IRQHandler+0x66>
 80040ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040b2:	f003 0320 	and.w	r3, r3, #32
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 fc11 	bl	80048e2 <UART_Receive_IT>
      return;
 80040c0:	e256      	b.n	8004570 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80040c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 80de 	beq.w	8004288 <HAL_UART_IRQHandler+0x22c>
 80040cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d106      	bne.n	80040e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 80d1 	beq.w	8004288 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00b      	beq.n	800410a <HAL_UART_IRQHandler+0xae>
 80040f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d005      	beq.n	800410a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	f043 0201 	orr.w	r2, r3, #1
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800410a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00b      	beq.n	800412e <HAL_UART_IRQHandler+0xd2>
 8004116:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d005      	beq.n	800412e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	f043 0202 	orr.w	r2, r3, #2
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800412e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00b      	beq.n	8004152 <HAL_UART_IRQHandler+0xf6>
 800413a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d005      	beq.n	8004152 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	f043 0204 	orr.w	r2, r3, #4
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b00      	cmp	r3, #0
 800415c:	d011      	beq.n	8004182 <HAL_UART_IRQHandler+0x126>
 800415e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004162:	f003 0320 	and.w	r3, r3, #32
 8004166:	2b00      	cmp	r3, #0
 8004168:	d105      	bne.n	8004176 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800416a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d005      	beq.n	8004182 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	f043 0208 	orr.w	r2, r3, #8
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 81ed 	beq.w	8004566 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800418c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004190:	f003 0320 	and.w	r3, r3, #32
 8004194:	2b00      	cmp	r3, #0
 8004196:	d008      	beq.n	80041aa <HAL_UART_IRQHandler+0x14e>
 8004198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800419c:	f003 0320 	and.w	r3, r3, #32
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d002      	beq.n	80041aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 fb9c 	bl	80048e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b4:	2b40      	cmp	r3, #64	; 0x40
 80041b6:	bf0c      	ite	eq
 80041b8:	2301      	moveq	r3, #1
 80041ba:	2300      	movne	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d103      	bne.n	80041d6 <HAL_UART_IRQHandler+0x17a>
 80041ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d04f      	beq.n	8004276 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 faa4 	bl	8004724 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e6:	2b40      	cmp	r3, #64	; 0x40
 80041e8:	d141      	bne.n	800426e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	3314      	adds	r3, #20
 80041f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041f8:	e853 3f00 	ldrex	r3, [r3]
 80041fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004200:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004204:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004208:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	3314      	adds	r3, #20
 8004212:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004216:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800421a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004222:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004226:	e841 2300 	strex	r3, r2, [r1]
 800422a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800422e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1d9      	bne.n	80041ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423a:	2b00      	cmp	r3, #0
 800423c:	d013      	beq.n	8004266 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004242:	4a7d      	ldr	r2, [pc, #500]	; (8004438 <HAL_UART_IRQHandler+0x3dc>)
 8004244:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424a:	4618      	mov	r0, r3
 800424c:	f7fe ff9d 	bl	800318a <HAL_DMA_Abort_IT>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d016      	beq.n	8004284 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004260:	4610      	mov	r0, r2
 8004262:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004264:	e00e      	b.n	8004284 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f99a 	bl	80045a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800426c:	e00a      	b.n	8004284 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f996 	bl	80045a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004274:	e006      	b.n	8004284 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f992 	bl	80045a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004282:	e170      	b.n	8004566 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004284:	bf00      	nop
    return;
 8004286:	e16e      	b.n	8004566 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428c:	2b01      	cmp	r3, #1
 800428e:	f040 814a 	bne.w	8004526 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004296:	f003 0310 	and.w	r3, r3, #16
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 8143 	beq.w	8004526 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80042a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042a4:	f003 0310 	and.w	r3, r3, #16
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 813c 	beq.w	8004526 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042ae:	2300      	movs	r3, #0
 80042b0:	60bb      	str	r3, [r7, #8]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	60bb      	str	r3, [r7, #8]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	60bb      	str	r3, [r7, #8]
 80042c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ce:	2b40      	cmp	r3, #64	; 0x40
 80042d0:	f040 80b4 	bne.w	800443c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 8140 	beq.w	800456a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042f2:	429a      	cmp	r2, r3
 80042f4:	f080 8139 	bcs.w	800456a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800430a:	f000 8088 	beq.w	800441e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	330c      	adds	r3, #12
 8004314:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004318:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800431c:	e853 3f00 	ldrex	r3, [r3]
 8004320:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004324:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004328:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800432c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	330c      	adds	r3, #12
 8004336:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800433a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800433e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004342:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004346:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800434a:	e841 2300 	strex	r3, r2, [r1]
 800434e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004352:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1d9      	bne.n	800430e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3314      	adds	r3, #20
 8004360:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004362:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004364:	e853 3f00 	ldrex	r3, [r3]
 8004368:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800436a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800436c:	f023 0301 	bic.w	r3, r3, #1
 8004370:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	3314      	adds	r3, #20
 800437a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800437e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004382:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004384:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004386:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800438a:	e841 2300 	strex	r3, r2, [r1]
 800438e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004390:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1e1      	bne.n	800435a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	3314      	adds	r3, #20
 800439c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043a0:	e853 3f00 	ldrex	r3, [r3]
 80043a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80043a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3314      	adds	r3, #20
 80043b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80043ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80043bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80043c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80043c2:	e841 2300 	strex	r3, r2, [r1]
 80043c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80043c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1e3      	bne.n	8004396 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2220      	movs	r2, #32
 80043d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	330c      	adds	r3, #12
 80043e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043e6:	e853 3f00 	ldrex	r3, [r3]
 80043ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80043ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ee:	f023 0310 	bic.w	r3, r3, #16
 80043f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	330c      	adds	r3, #12
 80043fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004400:	65ba      	str	r2, [r7, #88]	; 0x58
 8004402:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004404:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004406:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004408:	e841 2300 	strex	r3, r2, [r1]
 800440c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800440e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1e3      	bne.n	80043dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	4618      	mov	r0, r3
 800441a:	f7fe fe46 	bl	80030aa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004426:	b29b      	uxth	r3, r3
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	b29b      	uxth	r3, r3
 800442c:	4619      	mov	r1, r3
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f8c0 	bl	80045b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004434:	e099      	b.n	800456a <HAL_UART_IRQHandler+0x50e>
 8004436:	bf00      	nop
 8004438:	080047eb 	.word	0x080047eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004444:	b29b      	uxth	r3, r3
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004450:	b29b      	uxth	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 808b 	beq.w	800456e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004458:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 8086 	beq.w	800456e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	330c      	adds	r3, #12
 8004468:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446c:	e853 3f00 	ldrex	r3, [r3]
 8004470:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004474:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004478:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	330c      	adds	r3, #12
 8004482:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004486:	647a      	str	r2, [r7, #68]	; 0x44
 8004488:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800448c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800448e:	e841 2300 	strex	r3, r2, [r1]
 8004492:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1e3      	bne.n	8004462 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	3314      	adds	r3, #20
 80044a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	e853 3f00 	ldrex	r3, [r3]
 80044a8:	623b      	str	r3, [r7, #32]
   return(result);
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	f023 0301 	bic.w	r3, r3, #1
 80044b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	3314      	adds	r3, #20
 80044ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80044be:	633a      	str	r2, [r7, #48]	; 0x30
 80044c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044c6:	e841 2300 	strex	r3, r2, [r1]
 80044ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1e3      	bne.n	800449a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2220      	movs	r2, #32
 80044d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	330c      	adds	r3, #12
 80044e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	e853 3f00 	ldrex	r3, [r3]
 80044ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0310 	bic.w	r3, r3, #16
 80044f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	330c      	adds	r3, #12
 8004500:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004504:	61fa      	str	r2, [r7, #28]
 8004506:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004508:	69b9      	ldr	r1, [r7, #24]
 800450a:	69fa      	ldr	r2, [r7, #28]
 800450c:	e841 2300 	strex	r3, r2, [r1]
 8004510:	617b      	str	r3, [r7, #20]
   return(result);
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1e3      	bne.n	80044e0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004518:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800451c:	4619      	mov	r1, r3
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f848 	bl	80045b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004524:	e023      	b.n	800456e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800452a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452e:	2b00      	cmp	r3, #0
 8004530:	d009      	beq.n	8004546 <HAL_UART_IRQHandler+0x4ea>
 8004532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f967 	bl	8004812 <UART_Transmit_IT>
    return;
 8004544:	e014      	b.n	8004570 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800454a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00e      	beq.n	8004570 <HAL_UART_IRQHandler+0x514>
 8004552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455a:	2b00      	cmp	r3, #0
 800455c:	d008      	beq.n	8004570 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f9a7 	bl	80048b2 <UART_EndTransmit_IT>
    return;
 8004564:	e004      	b.n	8004570 <HAL_UART_IRQHandler+0x514>
    return;
 8004566:	bf00      	nop
 8004568:	e002      	b.n	8004570 <HAL_UART_IRQHandler+0x514>
      return;
 800456a:	bf00      	nop
 800456c:	e000      	b.n	8004570 <HAL_UART_IRQHandler+0x514>
      return;
 800456e:	bf00      	nop
  }
}
 8004570:	37e8      	adds	r7, #232	; 0xe8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop

08004578 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	460b      	mov	r3, r1
 80045be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b090      	sub	sp, #64	; 0x40
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	603b      	str	r3, [r7, #0]
 80045d8:	4613      	mov	r3, r2
 80045da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045dc:	e050      	b.n	8004680 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e4:	d04c      	beq.n	8004680 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d007      	beq.n	80045fc <UART_WaitOnFlagUntilTimeout+0x30>
 80045ec:	f7fe f83a 	bl	8002664 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d241      	bcs.n	8004680 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	330c      	adds	r3, #12
 8004602:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004606:	e853 3f00 	ldrex	r3, [r3]
 800460a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004612:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	330c      	adds	r3, #12
 800461a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800461c:	637a      	str	r2, [r7, #52]	; 0x34
 800461e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004620:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004622:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004624:	e841 2300 	strex	r3, r2, [r1]
 8004628:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800462a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1e5      	bne.n	80045fc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	3314      	adds	r3, #20
 8004636:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	e853 3f00 	ldrex	r3, [r3]
 800463e:	613b      	str	r3, [r7, #16]
   return(result);
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	f023 0301 	bic.w	r3, r3, #1
 8004646:	63bb      	str	r3, [r7, #56]	; 0x38
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	3314      	adds	r3, #20
 800464e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004650:	623a      	str	r2, [r7, #32]
 8004652:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004654:	69f9      	ldr	r1, [r7, #28]
 8004656:	6a3a      	ldr	r2, [r7, #32]
 8004658:	e841 2300 	strex	r3, r2, [r1]
 800465c:	61bb      	str	r3, [r7, #24]
   return(result);
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1e5      	bne.n	8004630 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2220      	movs	r2, #32
 8004670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e00f      	b.n	80046a0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	4013      	ands	r3, r2
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	429a      	cmp	r2, r3
 800468e:	bf0c      	ite	eq
 8004690:	2301      	moveq	r3, #1
 8004692:	2300      	movne	r3, #0
 8004694:	b2db      	uxtb	r3, r3
 8004696:	461a      	mov	r2, r3
 8004698:	79fb      	ldrb	r3, [r7, #7]
 800469a:	429a      	cmp	r2, r3
 800469c:	d09f      	beq.n	80045de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3740      	adds	r7, #64	; 0x40
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	4613      	mov	r3, r2
 80046b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	88fa      	ldrh	r2, [r7, #6]
 80046c0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	88fa      	ldrh	r2, [r7, #6]
 80046c6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2222      	movs	r2, #34	; 0x22
 80046d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d007      	beq.n	80046f6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046f4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695a      	ldr	r2, [r3, #20]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f042 0201 	orr.w	r2, r2, #1
 8004704:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68da      	ldr	r2, [r3, #12]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f042 0220 	orr.w	r2, r2, #32
 8004714:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004724:	b480      	push	{r7}
 8004726:	b095      	sub	sp, #84	; 0x54
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	330c      	adds	r3, #12
 8004732:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004736:	e853 3f00 	ldrex	r3, [r3]
 800473a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800473c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004742:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	330c      	adds	r3, #12
 800474a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800474c:	643a      	str	r2, [r7, #64]	; 0x40
 800474e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004750:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004752:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004754:	e841 2300 	strex	r3, r2, [r1]
 8004758:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800475a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1e5      	bne.n	800472c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	3314      	adds	r3, #20
 8004766:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	e853 3f00 	ldrex	r3, [r3]
 800476e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	f023 0301 	bic.w	r3, r3, #1
 8004776:	64bb      	str	r3, [r7, #72]	; 0x48
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	3314      	adds	r3, #20
 800477e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004780:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004782:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004784:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004788:	e841 2300 	strex	r3, r2, [r1]
 800478c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1e5      	bne.n	8004760 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004798:	2b01      	cmp	r3, #1
 800479a:	d119      	bne.n	80047d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	330c      	adds	r3, #12
 80047a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	e853 3f00 	ldrex	r3, [r3]
 80047aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f023 0310 	bic.w	r3, r3, #16
 80047b2:	647b      	str	r3, [r7, #68]	; 0x44
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	330c      	adds	r3, #12
 80047ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047bc:	61ba      	str	r2, [r7, #24]
 80047be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c0:	6979      	ldr	r1, [r7, #20]
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	e841 2300 	strex	r3, r2, [r1]
 80047c8:	613b      	str	r3, [r7, #16]
   return(result);
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1e5      	bne.n	800479c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2220      	movs	r2, #32
 80047d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80047de:	bf00      	nop
 80047e0:	3754      	adds	r7, #84	; 0x54
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b084      	sub	sp, #16
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f7ff fecb 	bl	80045a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800480a:	bf00      	nop
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004812:	b480      	push	{r7}
 8004814:	b085      	sub	sp, #20
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b21      	cmp	r3, #33	; 0x21
 8004824:	d13e      	bne.n	80048a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800482e:	d114      	bne.n	800485a <UART_Transmit_IT+0x48>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d110      	bne.n	800485a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	461a      	mov	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800484c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	1c9a      	adds	r2, r3, #2
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	621a      	str	r2, [r3, #32]
 8004858:	e008      	b.n	800486c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	1c59      	adds	r1, r3, #1
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6211      	str	r1, [r2, #32]
 8004864:	781a      	ldrb	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004870:	b29b      	uxth	r3, r3
 8004872:	3b01      	subs	r3, #1
 8004874:	b29b      	uxth	r3, r3
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	4619      	mov	r1, r3
 800487a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10f      	bne.n	80048a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68da      	ldr	r2, [r3, #12]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800488e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68da      	ldr	r2, [r3, #12]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800489e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80048a0:	2300      	movs	r3, #0
 80048a2:	e000      	b.n	80048a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80048a4:	2302      	movs	r3, #2
  }
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b082      	sub	sp, #8
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68da      	ldr	r2, [r3, #12]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7ff fe50 	bl	8004578 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b08c      	sub	sp, #48	; 0x30
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b22      	cmp	r3, #34	; 0x22
 80048f4:	f040 80ab 	bne.w	8004a4e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004900:	d117      	bne.n	8004932 <UART_Receive_IT+0x50>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d113      	bne.n	8004932 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800490a:	2300      	movs	r3, #0
 800490c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004912:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	b29b      	uxth	r3, r3
 800491c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004920:	b29a      	uxth	r2, r3
 8004922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004924:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492a:	1c9a      	adds	r2, r3, #2
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	629a      	str	r2, [r3, #40]	; 0x28
 8004930:	e026      	b.n	8004980 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004936:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004938:	2300      	movs	r3, #0
 800493a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004944:	d007      	beq.n	8004956 <UART_Receive_IT+0x74>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10a      	bne.n	8004964 <UART_Receive_IT+0x82>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d106      	bne.n	8004964 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	b2da      	uxtb	r2, r3
 800495e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004960:	701a      	strb	r2, [r3, #0]
 8004962:	e008      	b.n	8004976 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	b2db      	uxtb	r3, r3
 800496c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004970:	b2da      	uxtb	r2, r3
 8004972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004974:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497a:	1c5a      	adds	r2, r3, #1
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004984:	b29b      	uxth	r3, r3
 8004986:	3b01      	subs	r3, #1
 8004988:	b29b      	uxth	r3, r3
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	4619      	mov	r1, r3
 800498e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004990:	2b00      	cmp	r3, #0
 8004992:	d15a      	bne.n	8004a4a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68da      	ldr	r2, [r3, #12]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f022 0220 	bic.w	r2, r2, #32
 80049a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	695a      	ldr	r2, [r3, #20]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0201 	bic.w	r2, r2, #1
 80049c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d135      	bne.n	8004a40 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	330c      	adds	r3, #12
 80049e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	e853 3f00 	ldrex	r3, [r3]
 80049e8:	613b      	str	r3, [r7, #16]
   return(result);
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	f023 0310 	bic.w	r3, r3, #16
 80049f0:	627b      	str	r3, [r7, #36]	; 0x24
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	330c      	adds	r3, #12
 80049f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049fa:	623a      	str	r2, [r7, #32]
 80049fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fe:	69f9      	ldr	r1, [r7, #28]
 8004a00:	6a3a      	ldr	r2, [r7, #32]
 8004a02:	e841 2300 	strex	r3, r2, [r1]
 8004a06:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1e5      	bne.n	80049da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0310 	and.w	r3, r3, #16
 8004a18:	2b10      	cmp	r3, #16
 8004a1a:	d10a      	bne.n	8004a32 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	60fb      	str	r3, [r7, #12]
 8004a30:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a36:	4619      	mov	r1, r3
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f7ff fdbb 	bl	80045b4 <HAL_UARTEx_RxEventCallback>
 8004a3e:	e002      	b.n	8004a46 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f7ff fda3 	bl	800458c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a46:	2300      	movs	r3, #0
 8004a48:	e002      	b.n	8004a50 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	e000      	b.n	8004a50 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004a4e:	2302      	movs	r3, #2
  }
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3730      	adds	r7, #48	; 0x30
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a5c:	b0c0      	sub	sp, #256	; 0x100
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a74:	68d9      	ldr	r1, [r3, #12]
 8004a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	ea40 0301 	orr.w	r3, r0, r1
 8004a80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	431a      	orrs	r2, r3
 8004a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ab0:	f021 010c 	bic.w	r1, r1, #12
 8004ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004abe:	430b      	orrs	r3, r1
 8004ac0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad2:	6999      	ldr	r1, [r3, #24]
 8004ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	ea40 0301 	orr.w	r3, r0, r1
 8004ade:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	4b8f      	ldr	r3, [pc, #572]	; (8004d24 <UART_SetConfig+0x2cc>)
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d005      	beq.n	8004af8 <UART_SetConfig+0xa0>
 8004aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	4b8d      	ldr	r3, [pc, #564]	; (8004d28 <UART_SetConfig+0x2d0>)
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d104      	bne.n	8004b02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004af8:	f7ff f98c 	bl	8003e14 <HAL_RCC_GetPCLK2Freq>
 8004afc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b00:	e003      	b.n	8004b0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b02:	f7ff f973 	bl	8003dec <HAL_RCC_GetPCLK1Freq>
 8004b06:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0e:	69db      	ldr	r3, [r3, #28]
 8004b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b14:	f040 810c 	bne.w	8004d30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b22:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b2a:	4622      	mov	r2, r4
 8004b2c:	462b      	mov	r3, r5
 8004b2e:	1891      	adds	r1, r2, r2
 8004b30:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b32:	415b      	adcs	r3, r3
 8004b34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b3a:	4621      	mov	r1, r4
 8004b3c:	eb12 0801 	adds.w	r8, r2, r1
 8004b40:	4629      	mov	r1, r5
 8004b42:	eb43 0901 	adc.w	r9, r3, r1
 8004b46:	f04f 0200 	mov.w	r2, #0
 8004b4a:	f04f 0300 	mov.w	r3, #0
 8004b4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b5a:	4690      	mov	r8, r2
 8004b5c:	4699      	mov	r9, r3
 8004b5e:	4623      	mov	r3, r4
 8004b60:	eb18 0303 	adds.w	r3, r8, r3
 8004b64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b68:	462b      	mov	r3, r5
 8004b6a:	eb49 0303 	adc.w	r3, r9, r3
 8004b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b7e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b86:	460b      	mov	r3, r1
 8004b88:	18db      	adds	r3, r3, r3
 8004b8a:	653b      	str	r3, [r7, #80]	; 0x50
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	eb42 0303 	adc.w	r3, r2, r3
 8004b92:	657b      	str	r3, [r7, #84]	; 0x54
 8004b94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b9c:	f7fc f804 	bl	8000ba8 <__aeabi_uldivmod>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4b61      	ldr	r3, [pc, #388]	; (8004d2c <UART_SetConfig+0x2d4>)
 8004ba6:	fba3 2302 	umull	r2, r3, r3, r2
 8004baa:	095b      	lsrs	r3, r3, #5
 8004bac:	011c      	lsls	r4, r3, #4
 8004bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bb8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004bbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004bc0:	4642      	mov	r2, r8
 8004bc2:	464b      	mov	r3, r9
 8004bc4:	1891      	adds	r1, r2, r2
 8004bc6:	64b9      	str	r1, [r7, #72]	; 0x48
 8004bc8:	415b      	adcs	r3, r3
 8004bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bcc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004bd0:	4641      	mov	r1, r8
 8004bd2:	eb12 0a01 	adds.w	sl, r2, r1
 8004bd6:	4649      	mov	r1, r9
 8004bd8:	eb43 0b01 	adc.w	fp, r3, r1
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004be8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bf0:	4692      	mov	sl, r2
 8004bf2:	469b      	mov	fp, r3
 8004bf4:	4643      	mov	r3, r8
 8004bf6:	eb1a 0303 	adds.w	r3, sl, r3
 8004bfa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bfe:	464b      	mov	r3, r9
 8004c00:	eb4b 0303 	adc.w	r3, fp, r3
 8004c04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c14:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	18db      	adds	r3, r3, r3
 8004c20:	643b      	str	r3, [r7, #64]	; 0x40
 8004c22:	4613      	mov	r3, r2
 8004c24:	eb42 0303 	adc.w	r3, r2, r3
 8004c28:	647b      	str	r3, [r7, #68]	; 0x44
 8004c2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c32:	f7fb ffb9 	bl	8000ba8 <__aeabi_uldivmod>
 8004c36:	4602      	mov	r2, r0
 8004c38:	460b      	mov	r3, r1
 8004c3a:	4611      	mov	r1, r2
 8004c3c:	4b3b      	ldr	r3, [pc, #236]	; (8004d2c <UART_SetConfig+0x2d4>)
 8004c3e:	fba3 2301 	umull	r2, r3, r3, r1
 8004c42:	095b      	lsrs	r3, r3, #5
 8004c44:	2264      	movs	r2, #100	; 0x64
 8004c46:	fb02 f303 	mul.w	r3, r2, r3
 8004c4a:	1acb      	subs	r3, r1, r3
 8004c4c:	00db      	lsls	r3, r3, #3
 8004c4e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c52:	4b36      	ldr	r3, [pc, #216]	; (8004d2c <UART_SetConfig+0x2d4>)
 8004c54:	fba3 2302 	umull	r2, r3, r3, r2
 8004c58:	095b      	lsrs	r3, r3, #5
 8004c5a:	005b      	lsls	r3, r3, #1
 8004c5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c60:	441c      	add	r4, r3
 8004c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c66:	2200      	movs	r2, #0
 8004c68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c6c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c74:	4642      	mov	r2, r8
 8004c76:	464b      	mov	r3, r9
 8004c78:	1891      	adds	r1, r2, r2
 8004c7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c7c:	415b      	adcs	r3, r3
 8004c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c84:	4641      	mov	r1, r8
 8004c86:	1851      	adds	r1, r2, r1
 8004c88:	6339      	str	r1, [r7, #48]	; 0x30
 8004c8a:	4649      	mov	r1, r9
 8004c8c:	414b      	adcs	r3, r1
 8004c8e:	637b      	str	r3, [r7, #52]	; 0x34
 8004c90:	f04f 0200 	mov.w	r2, #0
 8004c94:	f04f 0300 	mov.w	r3, #0
 8004c98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c9c:	4659      	mov	r1, fp
 8004c9e:	00cb      	lsls	r3, r1, #3
 8004ca0:	4651      	mov	r1, sl
 8004ca2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ca6:	4651      	mov	r1, sl
 8004ca8:	00ca      	lsls	r2, r1, #3
 8004caa:	4610      	mov	r0, r2
 8004cac:	4619      	mov	r1, r3
 8004cae:	4603      	mov	r3, r0
 8004cb0:	4642      	mov	r2, r8
 8004cb2:	189b      	adds	r3, r3, r2
 8004cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cb8:	464b      	mov	r3, r9
 8004cba:	460a      	mov	r2, r1
 8004cbc:	eb42 0303 	adc.w	r3, r2, r3
 8004cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004cd0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004cd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004cd8:	460b      	mov	r3, r1
 8004cda:	18db      	adds	r3, r3, r3
 8004cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cde:	4613      	mov	r3, r2
 8004ce0:	eb42 0303 	adc.w	r3, r2, r3
 8004ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ce6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004cee:	f7fb ff5b 	bl	8000ba8 <__aeabi_uldivmod>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	4b0d      	ldr	r3, [pc, #52]	; (8004d2c <UART_SetConfig+0x2d4>)
 8004cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8004cfc:	095b      	lsrs	r3, r3, #5
 8004cfe:	2164      	movs	r1, #100	; 0x64
 8004d00:	fb01 f303 	mul.w	r3, r1, r3
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	3332      	adds	r3, #50	; 0x32
 8004d0a:	4a08      	ldr	r2, [pc, #32]	; (8004d2c <UART_SetConfig+0x2d4>)
 8004d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d10:	095b      	lsrs	r3, r3, #5
 8004d12:	f003 0207 	and.w	r2, r3, #7
 8004d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4422      	add	r2, r4
 8004d1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d20:	e106      	b.n	8004f30 <UART_SetConfig+0x4d8>
 8004d22:	bf00      	nop
 8004d24:	40011000 	.word	0x40011000
 8004d28:	40011400 	.word	0x40011400
 8004d2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d34:	2200      	movs	r2, #0
 8004d36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d3a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d42:	4642      	mov	r2, r8
 8004d44:	464b      	mov	r3, r9
 8004d46:	1891      	adds	r1, r2, r2
 8004d48:	6239      	str	r1, [r7, #32]
 8004d4a:	415b      	adcs	r3, r3
 8004d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d52:	4641      	mov	r1, r8
 8004d54:	1854      	adds	r4, r2, r1
 8004d56:	4649      	mov	r1, r9
 8004d58:	eb43 0501 	adc.w	r5, r3, r1
 8004d5c:	f04f 0200 	mov.w	r2, #0
 8004d60:	f04f 0300 	mov.w	r3, #0
 8004d64:	00eb      	lsls	r3, r5, #3
 8004d66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d6a:	00e2      	lsls	r2, r4, #3
 8004d6c:	4614      	mov	r4, r2
 8004d6e:	461d      	mov	r5, r3
 8004d70:	4643      	mov	r3, r8
 8004d72:	18e3      	adds	r3, r4, r3
 8004d74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d78:	464b      	mov	r3, r9
 8004d7a:	eb45 0303 	adc.w	r3, r5, r3
 8004d7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d92:	f04f 0200 	mov.w	r2, #0
 8004d96:	f04f 0300 	mov.w	r3, #0
 8004d9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d9e:	4629      	mov	r1, r5
 8004da0:	008b      	lsls	r3, r1, #2
 8004da2:	4621      	mov	r1, r4
 8004da4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004da8:	4621      	mov	r1, r4
 8004daa:	008a      	lsls	r2, r1, #2
 8004dac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004db0:	f7fb fefa 	bl	8000ba8 <__aeabi_uldivmod>
 8004db4:	4602      	mov	r2, r0
 8004db6:	460b      	mov	r3, r1
 8004db8:	4b60      	ldr	r3, [pc, #384]	; (8004f3c <UART_SetConfig+0x4e4>)
 8004dba:	fba3 2302 	umull	r2, r3, r3, r2
 8004dbe:	095b      	lsrs	r3, r3, #5
 8004dc0:	011c      	lsls	r4, r3, #4
 8004dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004dcc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004dd0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004dd4:	4642      	mov	r2, r8
 8004dd6:	464b      	mov	r3, r9
 8004dd8:	1891      	adds	r1, r2, r2
 8004dda:	61b9      	str	r1, [r7, #24]
 8004ddc:	415b      	adcs	r3, r3
 8004dde:	61fb      	str	r3, [r7, #28]
 8004de0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004de4:	4641      	mov	r1, r8
 8004de6:	1851      	adds	r1, r2, r1
 8004de8:	6139      	str	r1, [r7, #16]
 8004dea:	4649      	mov	r1, r9
 8004dec:	414b      	adcs	r3, r1
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	f04f 0200 	mov.w	r2, #0
 8004df4:	f04f 0300 	mov.w	r3, #0
 8004df8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004dfc:	4659      	mov	r1, fp
 8004dfe:	00cb      	lsls	r3, r1, #3
 8004e00:	4651      	mov	r1, sl
 8004e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e06:	4651      	mov	r1, sl
 8004e08:	00ca      	lsls	r2, r1, #3
 8004e0a:	4610      	mov	r0, r2
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4603      	mov	r3, r0
 8004e10:	4642      	mov	r2, r8
 8004e12:	189b      	adds	r3, r3, r2
 8004e14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e18:	464b      	mov	r3, r9
 8004e1a:	460a      	mov	r2, r1
 8004e1c:	eb42 0303 	adc.w	r3, r2, r3
 8004e20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e2e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004e30:	f04f 0200 	mov.w	r2, #0
 8004e34:	f04f 0300 	mov.w	r3, #0
 8004e38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e3c:	4649      	mov	r1, r9
 8004e3e:	008b      	lsls	r3, r1, #2
 8004e40:	4641      	mov	r1, r8
 8004e42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e46:	4641      	mov	r1, r8
 8004e48:	008a      	lsls	r2, r1, #2
 8004e4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e4e:	f7fb feab 	bl	8000ba8 <__aeabi_uldivmod>
 8004e52:	4602      	mov	r2, r0
 8004e54:	460b      	mov	r3, r1
 8004e56:	4611      	mov	r1, r2
 8004e58:	4b38      	ldr	r3, [pc, #224]	; (8004f3c <UART_SetConfig+0x4e4>)
 8004e5a:	fba3 2301 	umull	r2, r3, r3, r1
 8004e5e:	095b      	lsrs	r3, r3, #5
 8004e60:	2264      	movs	r2, #100	; 0x64
 8004e62:	fb02 f303 	mul.w	r3, r2, r3
 8004e66:	1acb      	subs	r3, r1, r3
 8004e68:	011b      	lsls	r3, r3, #4
 8004e6a:	3332      	adds	r3, #50	; 0x32
 8004e6c:	4a33      	ldr	r2, [pc, #204]	; (8004f3c <UART_SetConfig+0x4e4>)
 8004e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e72:	095b      	lsrs	r3, r3, #5
 8004e74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e78:	441c      	add	r4, r3
 8004e7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e7e:	2200      	movs	r2, #0
 8004e80:	673b      	str	r3, [r7, #112]	; 0x70
 8004e82:	677a      	str	r2, [r7, #116]	; 0x74
 8004e84:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e88:	4642      	mov	r2, r8
 8004e8a:	464b      	mov	r3, r9
 8004e8c:	1891      	adds	r1, r2, r2
 8004e8e:	60b9      	str	r1, [r7, #8]
 8004e90:	415b      	adcs	r3, r3
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e98:	4641      	mov	r1, r8
 8004e9a:	1851      	adds	r1, r2, r1
 8004e9c:	6039      	str	r1, [r7, #0]
 8004e9e:	4649      	mov	r1, r9
 8004ea0:	414b      	adcs	r3, r1
 8004ea2:	607b      	str	r3, [r7, #4]
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	f04f 0300 	mov.w	r3, #0
 8004eac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004eb0:	4659      	mov	r1, fp
 8004eb2:	00cb      	lsls	r3, r1, #3
 8004eb4:	4651      	mov	r1, sl
 8004eb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eba:	4651      	mov	r1, sl
 8004ebc:	00ca      	lsls	r2, r1, #3
 8004ebe:	4610      	mov	r0, r2
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	4642      	mov	r2, r8
 8004ec6:	189b      	adds	r3, r3, r2
 8004ec8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004eca:	464b      	mov	r3, r9
 8004ecc:	460a      	mov	r2, r1
 8004ece:	eb42 0303 	adc.w	r3, r2, r3
 8004ed2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	663b      	str	r3, [r7, #96]	; 0x60
 8004ede:	667a      	str	r2, [r7, #100]	; 0x64
 8004ee0:	f04f 0200 	mov.w	r2, #0
 8004ee4:	f04f 0300 	mov.w	r3, #0
 8004ee8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004eec:	4649      	mov	r1, r9
 8004eee:	008b      	lsls	r3, r1, #2
 8004ef0:	4641      	mov	r1, r8
 8004ef2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ef6:	4641      	mov	r1, r8
 8004ef8:	008a      	lsls	r2, r1, #2
 8004efa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004efe:	f7fb fe53 	bl	8000ba8 <__aeabi_uldivmod>
 8004f02:	4602      	mov	r2, r0
 8004f04:	460b      	mov	r3, r1
 8004f06:	4b0d      	ldr	r3, [pc, #52]	; (8004f3c <UART_SetConfig+0x4e4>)
 8004f08:	fba3 1302 	umull	r1, r3, r3, r2
 8004f0c:	095b      	lsrs	r3, r3, #5
 8004f0e:	2164      	movs	r1, #100	; 0x64
 8004f10:	fb01 f303 	mul.w	r3, r1, r3
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	3332      	adds	r3, #50	; 0x32
 8004f1a:	4a08      	ldr	r2, [pc, #32]	; (8004f3c <UART_SetConfig+0x4e4>)
 8004f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f20:	095b      	lsrs	r3, r3, #5
 8004f22:	f003 020f 	and.w	r2, r3, #15
 8004f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4422      	add	r2, r4
 8004f2e:	609a      	str	r2, [r3, #8]
}
 8004f30:	bf00      	nop
 8004f32:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f36:	46bd      	mov	sp, r7
 8004f38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f3c:	51eb851f 	.word	0x51eb851f

08004f40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f103 0208 	add.w	r2, r3, #8
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f04f 32ff 	mov.w	r2, #4294967295
 8004f58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f103 0208 	add.w	r2, r3, #8
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f103 0208 	add.w	r2, r3, #8
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b085      	sub	sp, #20
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
 8004fa2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	1c5a      	adds	r2, r3, #1
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	601a      	str	r2, [r3, #0]
}
 8004fd6:	bf00      	nop
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b085      	sub	sp, #20
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff8:	d103      	bne.n	8005002 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	e00c      	b.n	800501c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	3308      	adds	r3, #8
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	e002      	b.n	8005010 <vListInsert+0x2e>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	429a      	cmp	r2, r3
 800501a:	d2f6      	bcs.n	800500a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	1c5a      	adds	r2, r3, #1
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	601a      	str	r2, [r3, #0]
}
 8005048:	bf00      	nop
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6892      	ldr	r2, [r2, #8]
 800506a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	6852      	ldr	r2, [r2, #4]
 8005074:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	429a      	cmp	r2, r3
 800507e:	d103      	bne.n	8005088 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	1e5a      	subs	r2, r3, #1
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10a      	bne.n	80050d2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80050bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80050ce:	bf00      	nop
 80050d0:	e7fe      	b.n	80050d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80050d2:	f001 fe8f 	bl	8006df4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050de:	68f9      	ldr	r1, [r7, #12]
 80050e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050e2:	fb01 f303 	mul.w	r3, r1, r3
 80050e6:	441a      	add	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005102:	3b01      	subs	r3, #1
 8005104:	68f9      	ldr	r1, [r7, #12]
 8005106:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005108:	fb01 f303 	mul.w	r3, r1, r3
 800510c:	441a      	add	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	22ff      	movs	r2, #255	; 0xff
 8005116:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	22ff      	movs	r2, #255	; 0xff
 800511e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d114      	bne.n	8005152 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d01a      	beq.n	8005166 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	3310      	adds	r3, #16
 8005134:	4618      	mov	r0, r3
 8005136:	f001 f955 	bl	80063e4 <xTaskRemoveFromEventList>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d012      	beq.n	8005166 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005140:	4b0c      	ldr	r3, [pc, #48]	; (8005174 <xQueueGenericReset+0xcc>)
 8005142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	e009      	b.n	8005166 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	3310      	adds	r3, #16
 8005156:	4618      	mov	r0, r3
 8005158:	f7ff fef2 	bl	8004f40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	3324      	adds	r3, #36	; 0x24
 8005160:	4618      	mov	r0, r3
 8005162:	f7ff feed 	bl	8004f40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005166:	f001 fe75 	bl	8006e54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800516a:	2301      	movs	r3, #1
}
 800516c:	4618      	mov	r0, r3
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	e000ed04 	.word	0xe000ed04

08005178 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005178:	b580      	push	{r7, lr}
 800517a:	b08a      	sub	sp, #40	; 0x28
 800517c:	af02      	add	r7, sp, #8
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	4613      	mov	r3, r2
 8005184:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10a      	bne.n	80051a2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800518c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005190:	f383 8811 	msr	BASEPRI, r3
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	613b      	str	r3, [r7, #16]
}
 800519e:	bf00      	nop
 80051a0:	e7fe      	b.n	80051a0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	fb02 f303 	mul.w	r3, r2, r3
 80051aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	3348      	adds	r3, #72	; 0x48
 80051b0:	4618      	mov	r0, r3
 80051b2:	f001 ff41 	bl	8007038 <pvPortMalloc>
 80051b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d011      	beq.n	80051e2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	3348      	adds	r3, #72	; 0x48
 80051c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80051d0:	79fa      	ldrb	r2, [r7, #7]
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	4613      	mov	r3, r2
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	68b9      	ldr	r1, [r7, #8]
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 f805 	bl	80051ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80051e2:	69bb      	ldr	r3, [r7, #24]
	}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3720      	adds	r7, #32
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
 80051f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d103      	bne.n	8005208 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	601a      	str	r2, [r3, #0]
 8005206:	e002      	b.n	800520e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800521a:	2101      	movs	r1, #1
 800521c:	69b8      	ldr	r0, [r7, #24]
 800521e:	f7ff ff43 	bl	80050a8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005222:	bf00      	nop
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <xQueueGenericSendFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b090      	sub	sp, #64	; 0x40
 800522e:	af00      	add	r7, sp, #0
 8005230:	60f8      	str	r0, [r7, #12]
 8005232:	60b9      	str	r1, [r7, #8]
 8005234:	607a      	str	r2, [r7, #4]
 8005236:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800523c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523e:	2b00      	cmp	r3, #0
 8005240:	d10a      	bne.n	8005258 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005246:	f383 8811 	msr	BASEPRI, r3
 800524a:	f3bf 8f6f 	isb	sy
 800524e:	f3bf 8f4f 	dsb	sy
 8005252:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005254:	bf00      	nop
 8005256:	e7fe      	b.n	8005256 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d103      	bne.n	8005266 <xQueueGenericSendFromISR+0x3c>
 800525e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <xQueueGenericSendFromISR+0x40>
 8005266:	2301      	movs	r3, #1
 8005268:	e000      	b.n	800526c <xQueueGenericSendFromISR+0x42>
 800526a:	2300      	movs	r3, #0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10a      	bne.n	8005286 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005282:	bf00      	nop
 8005284:	e7fe      	b.n	8005284 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b02      	cmp	r3, #2
 800528a:	d103      	bne.n	8005294 <xQueueGenericSendFromISR+0x6a>
 800528c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005290:	2b01      	cmp	r3, #1
 8005292:	d101      	bne.n	8005298 <xQueueGenericSendFromISR+0x6e>
 8005294:	2301      	movs	r3, #1
 8005296:	e000      	b.n	800529a <xQueueGenericSendFromISR+0x70>
 8005298:	2300      	movs	r3, #0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10a      	bne.n	80052b4 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	623b      	str	r3, [r7, #32]
}
 80052b0:	bf00      	nop
 80052b2:	e7fe      	b.n	80052b2 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052b4:	f001 fe80 	bl	8006fb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80052b8:	f3ef 8211 	mrs	r2, BASEPRI
 80052bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c0:	f383 8811 	msr	BASEPRI, r3
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	61fa      	str	r2, [r7, #28]
 80052ce:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80052d0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052d2:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052dc:	429a      	cmp	r2, r3
 80052de:	d302      	bcc.n	80052e6 <xQueueGenericSendFromISR+0xbc>
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d12f      	bne.n	8005346 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80052e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f4:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	68b9      	ldr	r1, [r7, #8]
 80052fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80052fc:	f000 fb16 	bl	800592c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005300:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005308:	d112      	bne.n	8005330 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800530a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	2b00      	cmp	r3, #0
 8005310:	d016      	beq.n	8005340 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005314:	3324      	adds	r3, #36	; 0x24
 8005316:	4618      	mov	r0, r3
 8005318:	f001 f864 	bl	80063e4 <xTaskRemoveFromEventList>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00e      	beq.n	8005340 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00b      	beq.n	8005340 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	e007      	b.n	8005340 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005330:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005334:	3301      	adds	r3, #1
 8005336:	b2db      	uxtb	r3, r3
 8005338:	b25a      	sxtb	r2, r3
 800533a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005340:	2301      	movs	r3, #1
 8005342:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005344:	e001      	b.n	800534a <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005346:	2300      	movs	r3, #0
 8005348:	63fb      	str	r3, [r7, #60]	; 0x3c
 800534a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800534c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005354:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005358:	4618      	mov	r0, r3
 800535a:	3740      	adds	r7, #64	; 0x40
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b08c      	sub	sp, #48	; 0x30
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800536c:	2300      	movs	r3, #0
 800536e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10a      	bne.n	8005390 <xQueueReceive+0x30>
	__asm volatile
 800537a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537e:	f383 8811 	msr	BASEPRI, r3
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	623b      	str	r3, [r7, #32]
}
 800538c:	bf00      	nop
 800538e:	e7fe      	b.n	800538e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d103      	bne.n	800539e <xQueueReceive+0x3e>
 8005396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <xQueueReceive+0x42>
 800539e:	2301      	movs	r3, #1
 80053a0:	e000      	b.n	80053a4 <xQueueReceive+0x44>
 80053a2:	2300      	movs	r3, #0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10a      	bne.n	80053be <xQueueReceive+0x5e>
	__asm volatile
 80053a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ac:	f383 8811 	msr	BASEPRI, r3
 80053b0:	f3bf 8f6f 	isb	sy
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	61fb      	str	r3, [r7, #28]
}
 80053ba:	bf00      	nop
 80053bc:	e7fe      	b.n	80053bc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053be:	f001 f9cd 	bl	800675c <xTaskGetSchedulerState>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d102      	bne.n	80053ce <xQueueReceive+0x6e>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <xQueueReceive+0x72>
 80053ce:	2301      	movs	r3, #1
 80053d0:	e000      	b.n	80053d4 <xQueueReceive+0x74>
 80053d2:	2300      	movs	r3, #0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10a      	bne.n	80053ee <xQueueReceive+0x8e>
	__asm volatile
 80053d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053dc:	f383 8811 	msr	BASEPRI, r3
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	61bb      	str	r3, [r7, #24]
}
 80053ea:	bf00      	nop
 80053ec:	e7fe      	b.n	80053ec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053ee:	f001 fd01 	bl	8006df4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d01f      	beq.n	800543e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80053fe:	68b9      	ldr	r1, [r7, #8]
 8005400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005402:	f000 fafd 	bl	8005a00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	1e5a      	subs	r2, r3, #1
 800540a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800540e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00f      	beq.n	8005436 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005418:	3310      	adds	r3, #16
 800541a:	4618      	mov	r0, r3
 800541c:	f000 ffe2 	bl	80063e4 <xTaskRemoveFromEventList>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d007      	beq.n	8005436 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005426:	4b3d      	ldr	r3, [pc, #244]	; (800551c <xQueueReceive+0x1bc>)
 8005428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005436:	f001 fd0d 	bl	8006e54 <vPortExitCritical>
				return pdPASS;
 800543a:	2301      	movs	r3, #1
 800543c:	e069      	b.n	8005512 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d103      	bne.n	800544c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005444:	f001 fd06 	bl	8006e54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005448:	2300      	movs	r3, #0
 800544a:	e062      	b.n	8005512 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800544c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544e:	2b00      	cmp	r3, #0
 8005450:	d106      	bne.n	8005460 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005452:	f107 0310 	add.w	r3, r7, #16
 8005456:	4618      	mov	r0, r3
 8005458:	f001 f826 	bl	80064a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800545c:	2301      	movs	r3, #1
 800545e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005460:	f001 fcf8 	bl	8006e54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005464:	f000 fdcc 	bl	8006000 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005468:	f001 fcc4 	bl	8006df4 <vPortEnterCritical>
 800546c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005472:	b25b      	sxtb	r3, r3
 8005474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005478:	d103      	bne.n	8005482 <xQueueReceive+0x122>
 800547a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005484:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005488:	b25b      	sxtb	r3, r3
 800548a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548e:	d103      	bne.n	8005498 <xQueueReceive+0x138>
 8005490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005492:	2200      	movs	r2, #0
 8005494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005498:	f001 fcdc 	bl	8006e54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800549c:	1d3a      	adds	r2, r7, #4
 800549e:	f107 0310 	add.w	r3, r7, #16
 80054a2:	4611      	mov	r1, r2
 80054a4:	4618      	mov	r0, r3
 80054a6:	f001 f815 	bl	80064d4 <xTaskCheckForTimeOut>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d123      	bne.n	80054f8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054b2:	f000 fb1d 	bl	8005af0 <prvIsQueueEmpty>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d017      	beq.n	80054ec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80054bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054be:	3324      	adds	r3, #36	; 0x24
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	4611      	mov	r1, r2
 80054c4:	4618      	mov	r0, r3
 80054c6:	f000 ff69 	bl	800639c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80054ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054cc:	f000 fabe 	bl	8005a4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80054d0:	f000 fda4 	bl	800601c <xTaskResumeAll>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d189      	bne.n	80053ee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80054da:	4b10      	ldr	r3, [pc, #64]	; (800551c <xQueueReceive+0x1bc>)
 80054dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054e0:	601a      	str	r2, [r3, #0]
 80054e2:	f3bf 8f4f 	dsb	sy
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	e780      	b.n	80053ee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80054ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054ee:	f000 faad 	bl	8005a4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054f2:	f000 fd93 	bl	800601c <xTaskResumeAll>
 80054f6:	e77a      	b.n	80053ee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80054f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054fa:	f000 faa7 	bl	8005a4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054fe:	f000 fd8d 	bl	800601c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005502:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005504:	f000 faf4 	bl	8005af0 <prvIsQueueEmpty>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	f43f af6f 	beq.w	80053ee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005510:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005512:	4618      	mov	r0, r3
 8005514:	3730      	adds	r7, #48	; 0x30
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	e000ed04 	.word	0xe000ed04

08005520 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b08e      	sub	sp, #56	; 0x38
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800552a:	2300      	movs	r3, #0
 800552c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005532:	2300      	movs	r3, #0
 8005534:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10a      	bne.n	8005552 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800553c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005540:	f383 8811 	msr	BASEPRI, r3
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	623b      	str	r3, [r7, #32]
}
 800554e:	bf00      	nop
 8005550:	e7fe      	b.n	8005550 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00a      	beq.n	8005570 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800555a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555e:	f383 8811 	msr	BASEPRI, r3
 8005562:	f3bf 8f6f 	isb	sy
 8005566:	f3bf 8f4f 	dsb	sy
 800556a:	61fb      	str	r3, [r7, #28]
}
 800556c:	bf00      	nop
 800556e:	e7fe      	b.n	800556e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005570:	f001 f8f4 	bl	800675c <xTaskGetSchedulerState>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d102      	bne.n	8005580 <xQueueSemaphoreTake+0x60>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <xQueueSemaphoreTake+0x64>
 8005580:	2301      	movs	r3, #1
 8005582:	e000      	b.n	8005586 <xQueueSemaphoreTake+0x66>
 8005584:	2300      	movs	r3, #0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10a      	bne.n	80055a0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800558a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558e:	f383 8811 	msr	BASEPRI, r3
 8005592:	f3bf 8f6f 	isb	sy
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	61bb      	str	r3, [r7, #24]
}
 800559c:	bf00      	nop
 800559e:	e7fe      	b.n	800559e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80055a0:	f001 fc28 	bl	8006df4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80055a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80055aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d024      	beq.n	80055fa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80055b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b2:	1e5a      	subs	r2, r3, #1
 80055b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d104      	bne.n	80055ca <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80055c0:	f001 fa74 	bl	8006aac <pvTaskIncrementMutexHeldCount>
 80055c4:	4602      	mov	r2, r0
 80055c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00f      	beq.n	80055f2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d4:	3310      	adds	r3, #16
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 ff04 	bl	80063e4 <xTaskRemoveFromEventList>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d007      	beq.n	80055f2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80055e2:	4b54      	ldr	r3, [pc, #336]	; (8005734 <xQueueSemaphoreTake+0x214>)
 80055e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80055f2:	f001 fc2f 	bl	8006e54 <vPortExitCritical>
				return pdPASS;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e097      	b.n	800572a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d111      	bne.n	8005624 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	617b      	str	r3, [r7, #20]
}
 8005618:	bf00      	nop
 800561a:	e7fe      	b.n	800561a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800561c:	f001 fc1a 	bl	8006e54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005620:	2300      	movs	r3, #0
 8005622:	e082      	b.n	800572a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005626:	2b00      	cmp	r3, #0
 8005628:	d106      	bne.n	8005638 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800562a:	f107 030c 	add.w	r3, r7, #12
 800562e:	4618      	mov	r0, r3
 8005630:	f000 ff3a 	bl	80064a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005634:	2301      	movs	r3, #1
 8005636:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005638:	f001 fc0c 	bl	8006e54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800563c:	f000 fce0 	bl	8006000 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005640:	f001 fbd8 	bl	8006df4 <vPortEnterCritical>
 8005644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005646:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800564a:	b25b      	sxtb	r3, r3
 800564c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005650:	d103      	bne.n	800565a <xQueueSemaphoreTake+0x13a>
 8005652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800565a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005660:	b25b      	sxtb	r3, r3
 8005662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005666:	d103      	bne.n	8005670 <xQueueSemaphoreTake+0x150>
 8005668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005670:	f001 fbf0 	bl	8006e54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005674:	463a      	mov	r2, r7
 8005676:	f107 030c 	add.w	r3, r7, #12
 800567a:	4611      	mov	r1, r2
 800567c:	4618      	mov	r0, r3
 800567e:	f000 ff29 	bl	80064d4 <xTaskCheckForTimeOut>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d132      	bne.n	80056ee <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005688:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800568a:	f000 fa31 	bl	8005af0 <prvIsQueueEmpty>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d026      	beq.n	80056e2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d109      	bne.n	80056b0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800569c:	f001 fbaa 	bl	8006df4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80056a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f001 f877 	bl	8006798 <xTaskPriorityInherit>
 80056aa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80056ac:	f001 fbd2 	bl	8006e54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80056b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b2:	3324      	adds	r3, #36	; 0x24
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	4611      	mov	r1, r2
 80056b8:	4618      	mov	r0, r3
 80056ba:	f000 fe6f 	bl	800639c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80056be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056c0:	f000 f9c4 	bl	8005a4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80056c4:	f000 fcaa 	bl	800601c <xTaskResumeAll>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f47f af68 	bne.w	80055a0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80056d0:	4b18      	ldr	r3, [pc, #96]	; (8005734 <xQueueSemaphoreTake+0x214>)
 80056d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056d6:	601a      	str	r2, [r3, #0]
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	f3bf 8f6f 	isb	sy
 80056e0:	e75e      	b.n	80055a0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80056e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056e4:	f000 f9b2 	bl	8005a4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056e8:	f000 fc98 	bl	800601c <xTaskResumeAll>
 80056ec:	e758      	b.n	80055a0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80056ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056f0:	f000 f9ac 	bl	8005a4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056f4:	f000 fc92 	bl	800601c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056fa:	f000 f9f9 	bl	8005af0 <prvIsQueueEmpty>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	f43f af4d 	beq.w	80055a0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00d      	beq.n	8005728 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800570c:	f001 fb72 	bl	8006df4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005710:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005712:	f000 f8f3 	bl	80058fc <prvGetDisinheritPriorityAfterTimeout>
 8005716:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800571e:	4618      	mov	r0, r3
 8005720:	f001 f936 	bl	8006990 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005724:	f001 fb96 	bl	8006e54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005728:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800572a:	4618      	mov	r0, r3
 800572c:	3738      	adds	r7, #56	; 0x38
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	e000ed04 	.word	0xe000ed04

08005738 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08e      	sub	sp, #56	; 0x38
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005744:	2300      	movs	r3, #0
 8005746:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800574c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10a      	bne.n	8005768 <xQueuePeek+0x30>
	__asm volatile
 8005752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005756:	f383 8811 	msr	BASEPRI, r3
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005764:	bf00      	nop
 8005766:	e7fe      	b.n	8005766 <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d103      	bne.n	8005776 <xQueuePeek+0x3e>
 800576e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <xQueuePeek+0x42>
 8005776:	2301      	movs	r3, #1
 8005778:	e000      	b.n	800577c <xQueuePeek+0x44>
 800577a:	2300      	movs	r3, #0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10a      	bne.n	8005796 <xQueuePeek+0x5e>
	__asm volatile
 8005780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	623b      	str	r3, [r7, #32]
}
 8005792:	bf00      	nop
 8005794:	e7fe      	b.n	8005794 <xQueuePeek+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005796:	f000 ffe1 	bl	800675c <xTaskGetSchedulerState>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d102      	bne.n	80057a6 <xQueuePeek+0x6e>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <xQueuePeek+0x72>
 80057a6:	2301      	movs	r3, #1
 80057a8:	e000      	b.n	80057ac <xQueuePeek+0x74>
 80057aa:	2300      	movs	r3, #0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10a      	bne.n	80057c6 <xQueuePeek+0x8e>
	__asm volatile
 80057b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b4:	f383 8811 	msr	BASEPRI, r3
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	61fb      	str	r3, [r7, #28]
}
 80057c2:	bf00      	nop
 80057c4:	e7fe      	b.n	80057c4 <xQueuePeek+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057c6:	f001 fb15 	bl	8006df4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ce:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d021      	beq.n	800581a <xQueuePeek+0xe2>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 80057d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80057dc:	68b9      	ldr	r1, [r7, #8]
 80057de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057e0:	f000 f90e 	bl	8005a00 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 80057e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057e8:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00f      	beq.n	8005812 <xQueuePeek+0xda>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f4:	3324      	adds	r3, #36	; 0x24
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 fdf4 	bl	80063e4 <xTaskRemoveFromEventList>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d007      	beq.n	8005812 <xQueuePeek+0xda>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8005802:	4b3d      	ldr	r3, [pc, #244]	; (80058f8 <xQueuePeek+0x1c0>)
 8005804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005808:	601a      	str	r2, [r3, #0]
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005812:	f001 fb1f 	bl	8006e54 <vPortExitCritical>
				return pdPASS;
 8005816:	2301      	movs	r3, #1
 8005818:	e069      	b.n	80058ee <xQueuePeek+0x1b6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d103      	bne.n	8005828 <xQueuePeek+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005820:	f001 fb18 	bl	8006e54 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005824:	2300      	movs	r3, #0
 8005826:	e062      	b.n	80058ee <xQueuePeek+0x1b6>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800582a:	2b00      	cmp	r3, #0
 800582c:	d106      	bne.n	800583c <xQueuePeek+0x104>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800582e:	f107 0314 	add.w	r3, r7, #20
 8005832:	4618      	mov	r0, r3
 8005834:	f000 fe38 	bl	80064a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005838:	2301      	movs	r3, #1
 800583a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800583c:	f001 fb0a 	bl	8006e54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005840:	f000 fbde 	bl	8006000 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005844:	f001 fad6 	bl	8006df4 <vPortEnterCritical>
 8005848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800584e:	b25b      	sxtb	r3, r3
 8005850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005854:	d103      	bne.n	800585e <xQueuePeek+0x126>
 8005856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800585e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005860:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005864:	b25b      	sxtb	r3, r3
 8005866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586a:	d103      	bne.n	8005874 <xQueuePeek+0x13c>
 800586c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586e:	2200      	movs	r2, #0
 8005870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005874:	f001 faee 	bl	8006e54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005878:	1d3a      	adds	r2, r7, #4
 800587a:	f107 0314 	add.w	r3, r7, #20
 800587e:	4611      	mov	r1, r2
 8005880:	4618      	mov	r0, r3
 8005882:	f000 fe27 	bl	80064d4 <xTaskCheckForTimeOut>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d123      	bne.n	80058d4 <xQueuePeek+0x19c>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800588c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800588e:	f000 f92f 	bl	8005af0 <prvIsQueueEmpty>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d017      	beq.n	80058c8 <xQueuePeek+0x190>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589a:	3324      	adds	r3, #36	; 0x24
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	4611      	mov	r1, r2
 80058a0:	4618      	mov	r0, r3
 80058a2:	f000 fd7b 	bl	800639c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80058a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058a8:	f000 f8d0 	bl	8005a4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80058ac:	f000 fbb6 	bl	800601c <xTaskResumeAll>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d187      	bne.n	80057c6 <xQueuePeek+0x8e>
				{
					portYIELD_WITHIN_API();
 80058b6:	4b10      	ldr	r3, [pc, #64]	; (80058f8 <xQueuePeek+0x1c0>)
 80058b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058bc:	601a      	str	r2, [r3, #0]
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	e77e      	b.n	80057c6 <xQueuePeek+0x8e>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 80058c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058ca:	f000 f8bf 	bl	8005a4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058ce:	f000 fba5 	bl	800601c <xTaskResumeAll>
 80058d2:	e778      	b.n	80057c6 <xQueuePeek+0x8e>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 80058d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058d6:	f000 f8b9 	bl	8005a4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058da:	f000 fb9f 	bl	800601c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058e0:	f000 f906 	bl	8005af0 <prvIsQueueEmpty>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f43f af6d 	beq.w	80057c6 <xQueuePeek+0x8e>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80058ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3738      	adds	r7, #56	; 0x38
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	e000ed04 	.word	0xe000ed04

080058fc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005908:	2b00      	cmp	r3, #0
 800590a:	d006      	beq.n	800591a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f1c3 0307 	rsb	r3, r3, #7
 8005916:	60fb      	str	r3, [r7, #12]
 8005918:	e001      	b.n	800591e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800591a:	2300      	movs	r3, #0
 800591c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800591e:	68fb      	ldr	r3, [r7, #12]
	}
 8005920:	4618      	mov	r0, r3
 8005922:	3714      	adds	r7, #20
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005938:	2300      	movs	r3, #0
 800593a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005940:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10d      	bne.n	8005966 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d14d      	bne.n	80059ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	4618      	mov	r0, r3
 8005958:	f000 ff94 	bl	8006884 <xTaskPriorityDisinherit>
 800595c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	609a      	str	r2, [r3, #8]
 8005964:	e043      	b.n	80059ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d119      	bne.n	80059a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6858      	ldr	r0, [r3, #4]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005974:	461a      	mov	r2, r3
 8005976:	68b9      	ldr	r1, [r7, #8]
 8005978:	f003 fcb4 	bl	80092e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005984:	441a      	add	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	685a      	ldr	r2, [r3, #4]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	429a      	cmp	r2, r3
 8005994:	d32b      	bcc.n	80059ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	605a      	str	r2, [r3, #4]
 800599e:	e026      	b.n	80059ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	68d8      	ldr	r0, [r3, #12]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a8:	461a      	mov	r2, r3
 80059aa:	68b9      	ldr	r1, [r7, #8]
 80059ac:	f003 fc9a 	bl	80092e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b8:	425b      	negs	r3, r3
 80059ba:	441a      	add	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	68da      	ldr	r2, [r3, #12]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d207      	bcs.n	80059dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	689a      	ldr	r2, [r3, #8]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d4:	425b      	negs	r3, r3
 80059d6:	441a      	add	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d105      	bne.n	80059ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	3b01      	subs	r3, #1
 80059ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80059f6:	697b      	ldr	r3, [r7, #20]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3718      	adds	r7, #24
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d018      	beq.n	8005a44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68da      	ldr	r2, [r3, #12]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	441a      	add	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68da      	ldr	r2, [r3, #12]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d303      	bcc.n	8005a34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68d9      	ldr	r1, [r3, #12]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	6838      	ldr	r0, [r7, #0]
 8005a40:	f003 fc50 	bl	80092e4 <memcpy>
	}
}
 8005a44:	bf00      	nop
 8005a46:	3708      	adds	r7, #8
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a54:	f001 f9ce 	bl	8006df4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a60:	e011      	b.n	8005a86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d012      	beq.n	8005a90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	3324      	adds	r3, #36	; 0x24
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 fcb8 	bl	80063e4 <xTaskRemoveFromEventList>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a7a:	f000 fd8d 	bl	8006598 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a7e:	7bfb      	ldrb	r3, [r7, #15]
 8005a80:	3b01      	subs	r3, #1
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	dce9      	bgt.n	8005a62 <prvUnlockQueue+0x16>
 8005a8e:	e000      	b.n	8005a92 <prvUnlockQueue+0x46>
					break;
 8005a90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	22ff      	movs	r2, #255	; 0xff
 8005a96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005a9a:	f001 f9db 	bl	8006e54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a9e:	f001 f9a9 	bl	8006df4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005aa8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005aaa:	e011      	b.n	8005ad0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d012      	beq.n	8005ada <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	3310      	adds	r3, #16
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 fc93 	bl	80063e4 <xTaskRemoveFromEventList>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ac4:	f000 fd68 	bl	8006598 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ac8:	7bbb      	ldrb	r3, [r7, #14]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ad0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	dce9      	bgt.n	8005aac <prvUnlockQueue+0x60>
 8005ad8:	e000      	b.n	8005adc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005ada:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	22ff      	movs	r2, #255	; 0xff
 8005ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005ae4:	f001 f9b6 	bl	8006e54 <vPortExitCritical>
}
 8005ae8:	bf00      	nop
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005af8:	f001 f97c 	bl	8006df4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d102      	bne.n	8005b0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b04:	2301      	movs	r3, #1
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	e001      	b.n	8005b0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b0e:	f001 f9a1 	bl	8006e54 <vPortExitCritical>

	return xReturn;
 8005b12:	68fb      	ldr	r3, [r7, #12]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b08e      	sub	sp, #56	; 0x38
 8005b20:	af04      	add	r7, sp, #16
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
 8005b28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10a      	bne.n	8005b46 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	623b      	str	r3, [r7, #32]
}
 8005b42:	bf00      	nop
 8005b44:	e7fe      	b.n	8005b44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10a      	bne.n	8005b62 <xTaskCreateStatic+0x46>
	__asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	61fb      	str	r3, [r7, #28]
}
 8005b5e:	bf00      	nop
 8005b60:	e7fe      	b.n	8005b60 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b62:	2354      	movs	r3, #84	; 0x54
 8005b64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	2b54      	cmp	r3, #84	; 0x54
 8005b6a:	d00a      	beq.n	8005b82 <xTaskCreateStatic+0x66>
	__asm volatile
 8005b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b70:	f383 8811 	msr	BASEPRI, r3
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	61bb      	str	r3, [r7, #24]
}
 8005b7e:	bf00      	nop
 8005b80:	e7fe      	b.n	8005b80 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005b82:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d01e      	beq.n	8005bc8 <xTaskCreateStatic+0xac>
 8005b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d01b      	beq.n	8005bc8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b92:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b98:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	9303      	str	r3, [sp, #12]
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	9302      	str	r3, [sp, #8]
 8005baa:	f107 0314 	add.w	r3, r7, #20
 8005bae:	9301      	str	r3, [sp, #4]
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	68b9      	ldr	r1, [r7, #8]
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f000 f850 	bl	8005c60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bc2:	f000 f8d5 	bl	8005d70 <prvAddNewTaskToReadyList>
 8005bc6:	e001      	b.n	8005bcc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005bcc:	697b      	ldr	r3, [r7, #20]
	}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3728      	adds	r7, #40	; 0x28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b08c      	sub	sp, #48	; 0x30
 8005bda:	af04      	add	r7, sp, #16
 8005bdc:	60f8      	str	r0, [r7, #12]
 8005bde:	60b9      	str	r1, [r7, #8]
 8005be0:	603b      	str	r3, [r7, #0]
 8005be2:	4613      	mov	r3, r2
 8005be4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005be6:	88fb      	ldrh	r3, [r7, #6]
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4618      	mov	r0, r3
 8005bec:	f001 fa24 	bl	8007038 <pvPortMalloc>
 8005bf0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00e      	beq.n	8005c16 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005bf8:	2054      	movs	r0, #84	; 0x54
 8005bfa:	f001 fa1d 	bl	8007038 <pvPortMalloc>
 8005bfe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	631a      	str	r2, [r3, #48]	; 0x30
 8005c0c:	e005      	b.n	8005c1a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c0e:	6978      	ldr	r0, [r7, #20]
 8005c10:	f001 fade 	bl	80071d0 <vPortFree>
 8005c14:	e001      	b.n	8005c1a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c16:	2300      	movs	r3, #0
 8005c18:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d017      	beq.n	8005c50 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c28:	88fa      	ldrh	r2, [r7, #6]
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	9303      	str	r3, [sp, #12]
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	9302      	str	r3, [sp, #8]
 8005c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c34:	9301      	str	r3, [sp, #4]
 8005c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	68b9      	ldr	r1, [r7, #8]
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f000 f80e 	bl	8005c60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c44:	69f8      	ldr	r0, [r7, #28]
 8005c46:	f000 f893 	bl	8005d70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	61bb      	str	r3, [r7, #24]
 8005c4e:	e002      	b.n	8005c56 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c50:	f04f 33ff 	mov.w	r3, #4294967295
 8005c54:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c56:	69bb      	ldr	r3, [r7, #24]
	}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3720      	adds	r7, #32
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b088      	sub	sp, #32
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
 8005c6c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	f023 0307 	bic.w	r3, r3, #7
 8005c86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	f003 0307 	and.w	r3, r3, #7
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00a      	beq.n	8005ca8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c96:	f383 8811 	msr	BASEPRI, r3
 8005c9a:	f3bf 8f6f 	isb	sy
 8005c9e:	f3bf 8f4f 	dsb	sy
 8005ca2:	617b      	str	r3, [r7, #20]
}
 8005ca4:	bf00      	nop
 8005ca6:	e7fe      	b.n	8005ca6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d01f      	beq.n	8005cee <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cae:	2300      	movs	r3, #0
 8005cb0:	61fb      	str	r3, [r7, #28]
 8005cb2:	e012      	b.n	8005cda <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	4413      	add	r3, r2
 8005cba:	7819      	ldrb	r1, [r3, #0]
 8005cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	3334      	adds	r3, #52	; 0x34
 8005cc4:	460a      	mov	r2, r1
 8005cc6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	4413      	add	r3, r2
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d006      	beq.n	8005ce2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	61fb      	str	r3, [r7, #28]
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	2b0f      	cmp	r3, #15
 8005cde:	d9e9      	bls.n	8005cb4 <prvInitialiseNewTask+0x54>
 8005ce0:	e000      	b.n	8005ce4 <prvInitialiseNewTask+0x84>
			{
				break;
 8005ce2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cec:	e003      	b.n	8005cf6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf8:	2b06      	cmp	r3, #6
 8005cfa:	d901      	bls.n	8005d00 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005cfc:	2306      	movs	r3, #6
 8005cfe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d04:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d0a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0e:	2200      	movs	r2, #0
 8005d10:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d14:	3304      	adds	r3, #4
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7ff f932 	bl	8004f80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1e:	3318      	adds	r3, #24
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7ff f92d 	bl	8004f80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2e:	f1c3 0207 	rsb	r2, r3, #7
 8005d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3e:	2200      	movs	r2, #0
 8005d40:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	68f9      	ldr	r1, [r7, #12]
 8005d4e:	69b8      	ldr	r0, [r7, #24]
 8005d50:	f000 ff26 	bl	8006ba0 <pxPortInitialiseStack>
 8005d54:	4602      	mov	r2, r0
 8005d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d58:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d66:	bf00      	nop
 8005d68:	3720      	adds	r7, #32
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
	...

08005d70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d78:	f001 f83c 	bl	8006df4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d7c:	4b2a      	ldr	r3, [pc, #168]	; (8005e28 <prvAddNewTaskToReadyList+0xb8>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	3301      	adds	r3, #1
 8005d82:	4a29      	ldr	r2, [pc, #164]	; (8005e28 <prvAddNewTaskToReadyList+0xb8>)
 8005d84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d86:	4b29      	ldr	r3, [pc, #164]	; (8005e2c <prvAddNewTaskToReadyList+0xbc>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d109      	bne.n	8005da2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d8e:	4a27      	ldr	r2, [pc, #156]	; (8005e2c <prvAddNewTaskToReadyList+0xbc>)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d94:	4b24      	ldr	r3, [pc, #144]	; (8005e28 <prvAddNewTaskToReadyList+0xb8>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d110      	bne.n	8005dbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d9c:	f000 fc20 	bl	80065e0 <prvInitialiseTaskLists>
 8005da0:	e00d      	b.n	8005dbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005da2:	4b23      	ldr	r3, [pc, #140]	; (8005e30 <prvAddNewTaskToReadyList+0xc0>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d109      	bne.n	8005dbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005daa:	4b20      	ldr	r3, [pc, #128]	; (8005e2c <prvAddNewTaskToReadyList+0xbc>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d802      	bhi.n	8005dbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005db8:	4a1c      	ldr	r2, [pc, #112]	; (8005e2c <prvAddNewTaskToReadyList+0xbc>)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005dbe:	4b1d      	ldr	r3, [pc, #116]	; (8005e34 <prvAddNewTaskToReadyList+0xc4>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	4a1b      	ldr	r2, [pc, #108]	; (8005e34 <prvAddNewTaskToReadyList+0xc4>)
 8005dc6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dcc:	2201      	movs	r2, #1
 8005dce:	409a      	lsls	r2, r3
 8005dd0:	4b19      	ldr	r3, [pc, #100]	; (8005e38 <prvAddNewTaskToReadyList+0xc8>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	4a18      	ldr	r2, [pc, #96]	; (8005e38 <prvAddNewTaskToReadyList+0xc8>)
 8005dd8:	6013      	str	r3, [r2, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dde:	4613      	mov	r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	4413      	add	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4a15      	ldr	r2, [pc, #84]	; (8005e3c <prvAddNewTaskToReadyList+0xcc>)
 8005de8:	441a      	add	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	3304      	adds	r3, #4
 8005dee:	4619      	mov	r1, r3
 8005df0:	4610      	mov	r0, r2
 8005df2:	f7ff f8d2 	bl	8004f9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005df6:	f001 f82d 	bl	8006e54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005dfa:	4b0d      	ldr	r3, [pc, #52]	; (8005e30 <prvAddNewTaskToReadyList+0xc0>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00e      	beq.n	8005e20 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e02:	4b0a      	ldr	r3, [pc, #40]	; (8005e2c <prvAddNewTaskToReadyList+0xbc>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d207      	bcs.n	8005e20 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e10:	4b0b      	ldr	r3, [pc, #44]	; (8005e40 <prvAddNewTaskToReadyList+0xd0>)
 8005e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e16:	601a      	str	r2, [r3, #0]
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e20:	bf00      	nop
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	20004418 	.word	0x20004418
 8005e2c:	20004318 	.word	0x20004318
 8005e30:	20004424 	.word	0x20004424
 8005e34:	20004434 	.word	0x20004434
 8005e38:	20004420 	.word	0x20004420
 8005e3c:	2000431c 	.word	0x2000431c
 8005e40:	e000ed04 	.word	0xe000ed04

08005e44 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b08a      	sub	sp, #40	; 0x28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10a      	bne.n	8005e6e <vTaskDelayUntil+0x2a>
	__asm volatile
 8005e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5c:	f383 8811 	msr	BASEPRI, r3
 8005e60:	f3bf 8f6f 	isb	sy
 8005e64:	f3bf 8f4f 	dsb	sy
 8005e68:	617b      	str	r3, [r7, #20]
}
 8005e6a:	bf00      	nop
 8005e6c:	e7fe      	b.n	8005e6c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10a      	bne.n	8005e8a <vTaskDelayUntil+0x46>
	__asm volatile
 8005e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e78:	f383 8811 	msr	BASEPRI, r3
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	613b      	str	r3, [r7, #16]
}
 8005e86:	bf00      	nop
 8005e88:	e7fe      	b.n	8005e88 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8005e8a:	4b2a      	ldr	r3, [pc, #168]	; (8005f34 <vTaskDelayUntil+0xf0>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00a      	beq.n	8005ea8 <vTaskDelayUntil+0x64>
	__asm volatile
 8005e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	60fb      	str	r3, [r7, #12]
}
 8005ea4:	bf00      	nop
 8005ea6:	e7fe      	b.n	8005ea6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8005ea8:	f000 f8aa 	bl	8006000 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005eac:	4b22      	ldr	r3, [pc, #136]	; (8005f38 <vTaskDelayUntil+0xf4>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	4413      	add	r3, r2
 8005eba:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6a3a      	ldr	r2, [r7, #32]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d20b      	bcs.n	8005ede <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	69fa      	ldr	r2, [r7, #28]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d211      	bcs.n	8005ef4 <vTaskDelayUntil+0xb0>
 8005ed0:	69fa      	ldr	r2, [r7, #28]
 8005ed2:	6a3b      	ldr	r3, [r7, #32]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d90d      	bls.n	8005ef4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	627b      	str	r3, [r7, #36]	; 0x24
 8005edc:	e00a      	b.n	8005ef4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	69fa      	ldr	r2, [r7, #28]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d303      	bcc.n	8005ef0 <vTaskDelayUntil+0xac>
 8005ee8:	69fa      	ldr	r2, [r7, #28]
 8005eea:	6a3b      	ldr	r3, [r7, #32]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d901      	bls.n	8005ef4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	69fa      	ldr	r2, [r7, #28]
 8005ef8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d006      	beq.n	8005f0e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005f00:	69fa      	ldr	r2, [r7, #28]
 8005f02:	6a3b      	ldr	r3, [r7, #32]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	2100      	movs	r1, #0
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f000 fde3 	bl	8006ad4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005f0e:	f000 f885 	bl	800601c <xTaskResumeAll>
 8005f12:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d107      	bne.n	8005f2a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8005f1a:	4b08      	ldr	r3, [pc, #32]	; (8005f3c <vTaskDelayUntil+0xf8>)
 8005f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f2a:	bf00      	nop
 8005f2c:	3728      	adds	r7, #40	; 0x28
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	20004440 	.word	0x20004440
 8005f38:	2000441c 	.word	0x2000441c
 8005f3c:	e000ed04 	.word	0xe000ed04

08005f40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b08a      	sub	sp, #40	; 0x28
 8005f44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005f46:	2300      	movs	r3, #0
 8005f48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005f4e:	463a      	mov	r2, r7
 8005f50:	1d39      	adds	r1, r7, #4
 8005f52:	f107 0308 	add.w	r3, r7, #8
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7fa ffa4 	bl	8000ea4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005f5c:	6839      	ldr	r1, [r7, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	9202      	str	r2, [sp, #8]
 8005f64:	9301      	str	r3, [sp, #4]
 8005f66:	2300      	movs	r3, #0
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	460a      	mov	r2, r1
 8005f6e:	491e      	ldr	r1, [pc, #120]	; (8005fe8 <vTaskStartScheduler+0xa8>)
 8005f70:	481e      	ldr	r0, [pc, #120]	; (8005fec <vTaskStartScheduler+0xac>)
 8005f72:	f7ff fdd3 	bl	8005b1c <xTaskCreateStatic>
 8005f76:	4603      	mov	r3, r0
 8005f78:	4a1d      	ldr	r2, [pc, #116]	; (8005ff0 <vTaskStartScheduler+0xb0>)
 8005f7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005f7c:	4b1c      	ldr	r3, [pc, #112]	; (8005ff0 <vTaskStartScheduler+0xb0>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d002      	beq.n	8005f8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005f84:	2301      	movs	r3, #1
 8005f86:	617b      	str	r3, [r7, #20]
 8005f88:	e001      	b.n	8005f8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d116      	bne.n	8005fc2 <vTaskStartScheduler+0x82>
	__asm volatile
 8005f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f98:	f383 8811 	msr	BASEPRI, r3
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	613b      	str	r3, [r7, #16]
}
 8005fa6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005fa8:	4b12      	ldr	r3, [pc, #72]	; (8005ff4 <vTaskStartScheduler+0xb4>)
 8005faa:	f04f 32ff 	mov.w	r2, #4294967295
 8005fae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005fb0:	4b11      	ldr	r3, [pc, #68]	; (8005ff8 <vTaskStartScheduler+0xb8>)
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005fb6:	4b11      	ldr	r3, [pc, #68]	; (8005ffc <vTaskStartScheduler+0xbc>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005fbc:	f000 fe78 	bl	8006cb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005fc0:	e00e      	b.n	8005fe0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc8:	d10a      	bne.n	8005fe0 <vTaskStartScheduler+0xa0>
	__asm volatile
 8005fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fce:	f383 8811 	msr	BASEPRI, r3
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	60fb      	str	r3, [r7, #12]
}
 8005fdc:	bf00      	nop
 8005fde:	e7fe      	b.n	8005fde <vTaskStartScheduler+0x9e>
}
 8005fe0:	bf00      	nop
 8005fe2:	3718      	adds	r7, #24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	0800933c 	.word	0x0800933c
 8005fec:	080065b1 	.word	0x080065b1
 8005ff0:	2000443c 	.word	0x2000443c
 8005ff4:	20004438 	.word	0x20004438
 8005ff8:	20004424 	.word	0x20004424
 8005ffc:	2000441c 	.word	0x2000441c

08006000 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006000:	b480      	push	{r7}
 8006002:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006004:	4b04      	ldr	r3, [pc, #16]	; (8006018 <vTaskSuspendAll+0x18>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	3301      	adds	r3, #1
 800600a:	4a03      	ldr	r2, [pc, #12]	; (8006018 <vTaskSuspendAll+0x18>)
 800600c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800600e:	bf00      	nop
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr
 8006018:	20004440 	.word	0x20004440

0800601c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006022:	2300      	movs	r3, #0
 8006024:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006026:	2300      	movs	r3, #0
 8006028:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800602a:	4b41      	ldr	r3, [pc, #260]	; (8006130 <xTaskResumeAll+0x114>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10a      	bne.n	8006048 <xTaskResumeAll+0x2c>
	__asm volatile
 8006032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	603b      	str	r3, [r7, #0]
}
 8006044:	bf00      	nop
 8006046:	e7fe      	b.n	8006046 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006048:	f000 fed4 	bl	8006df4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800604c:	4b38      	ldr	r3, [pc, #224]	; (8006130 <xTaskResumeAll+0x114>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3b01      	subs	r3, #1
 8006052:	4a37      	ldr	r2, [pc, #220]	; (8006130 <xTaskResumeAll+0x114>)
 8006054:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006056:	4b36      	ldr	r3, [pc, #216]	; (8006130 <xTaskResumeAll+0x114>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d161      	bne.n	8006122 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800605e:	4b35      	ldr	r3, [pc, #212]	; (8006134 <xTaskResumeAll+0x118>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d05d      	beq.n	8006122 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006066:	e02e      	b.n	80060c6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006068:	4b33      	ldr	r3, [pc, #204]	; (8006138 <xTaskResumeAll+0x11c>)
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	3318      	adds	r3, #24
 8006074:	4618      	mov	r0, r3
 8006076:	f7fe ffed 	bl	8005054 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	3304      	adds	r3, #4
 800607e:	4618      	mov	r0, r3
 8006080:	f7fe ffe8 	bl	8005054 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006088:	2201      	movs	r2, #1
 800608a:	409a      	lsls	r2, r3
 800608c:	4b2b      	ldr	r3, [pc, #172]	; (800613c <xTaskResumeAll+0x120>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4313      	orrs	r3, r2
 8006092:	4a2a      	ldr	r2, [pc, #168]	; (800613c <xTaskResumeAll+0x120>)
 8006094:	6013      	str	r3, [r2, #0]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800609a:	4613      	mov	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4a27      	ldr	r2, [pc, #156]	; (8006140 <xTaskResumeAll+0x124>)
 80060a4:	441a      	add	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	3304      	adds	r3, #4
 80060aa:	4619      	mov	r1, r3
 80060ac:	4610      	mov	r0, r2
 80060ae:	f7fe ff74 	bl	8004f9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b6:	4b23      	ldr	r3, [pc, #140]	; (8006144 <xTaskResumeAll+0x128>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060bc:	429a      	cmp	r2, r3
 80060be:	d302      	bcc.n	80060c6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80060c0:	4b21      	ldr	r3, [pc, #132]	; (8006148 <xTaskResumeAll+0x12c>)
 80060c2:	2201      	movs	r2, #1
 80060c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060c6:	4b1c      	ldr	r3, [pc, #112]	; (8006138 <xTaskResumeAll+0x11c>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1cc      	bne.n	8006068 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80060d4:	f000 fb22 	bl	800671c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80060d8:	4b1c      	ldr	r3, [pc, #112]	; (800614c <xTaskResumeAll+0x130>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d010      	beq.n	8006106 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80060e4:	f000 f846 	bl	8006174 <xTaskIncrementTick>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d002      	beq.n	80060f4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80060ee:	4b16      	ldr	r3, [pc, #88]	; (8006148 <xTaskResumeAll+0x12c>)
 80060f0:	2201      	movs	r2, #1
 80060f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	3b01      	subs	r3, #1
 80060f8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1f1      	bne.n	80060e4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006100:	4b12      	ldr	r3, [pc, #72]	; (800614c <xTaskResumeAll+0x130>)
 8006102:	2200      	movs	r2, #0
 8006104:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006106:	4b10      	ldr	r3, [pc, #64]	; (8006148 <xTaskResumeAll+0x12c>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d009      	beq.n	8006122 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800610e:	2301      	movs	r3, #1
 8006110:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006112:	4b0f      	ldr	r3, [pc, #60]	; (8006150 <xTaskResumeAll+0x134>)
 8006114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006122:	f000 fe97 	bl	8006e54 <vPortExitCritical>

	return xAlreadyYielded;
 8006126:	68bb      	ldr	r3, [r7, #8]
}
 8006128:	4618      	mov	r0, r3
 800612a:	3710      	adds	r7, #16
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	20004440 	.word	0x20004440
 8006134:	20004418 	.word	0x20004418
 8006138:	200043d8 	.word	0x200043d8
 800613c:	20004420 	.word	0x20004420
 8006140:	2000431c 	.word	0x2000431c
 8006144:	20004318 	.word	0x20004318
 8006148:	2000442c 	.word	0x2000442c
 800614c:	20004428 	.word	0x20004428
 8006150:	e000ed04 	.word	0xe000ed04

08006154 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800615a:	4b05      	ldr	r3, [pc, #20]	; (8006170 <xTaskGetTickCount+0x1c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006160:	687b      	ldr	r3, [r7, #4]
}
 8006162:	4618      	mov	r0, r3
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	2000441c 	.word	0x2000441c

08006174 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b086      	sub	sp, #24
 8006178:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800617a:	2300      	movs	r3, #0
 800617c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800617e:	4b4e      	ldr	r3, [pc, #312]	; (80062b8 <xTaskIncrementTick+0x144>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	f040 808e 	bne.w	80062a4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006188:	4b4c      	ldr	r3, [pc, #304]	; (80062bc <xTaskIncrementTick+0x148>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	3301      	adds	r3, #1
 800618e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006190:	4a4a      	ldr	r2, [pc, #296]	; (80062bc <xTaskIncrementTick+0x148>)
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d120      	bne.n	80061de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800619c:	4b48      	ldr	r3, [pc, #288]	; (80062c0 <xTaskIncrementTick+0x14c>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00a      	beq.n	80061bc <xTaskIncrementTick+0x48>
	__asm volatile
 80061a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061aa:	f383 8811 	msr	BASEPRI, r3
 80061ae:	f3bf 8f6f 	isb	sy
 80061b2:	f3bf 8f4f 	dsb	sy
 80061b6:	603b      	str	r3, [r7, #0]
}
 80061b8:	bf00      	nop
 80061ba:	e7fe      	b.n	80061ba <xTaskIncrementTick+0x46>
 80061bc:	4b40      	ldr	r3, [pc, #256]	; (80062c0 <xTaskIncrementTick+0x14c>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	60fb      	str	r3, [r7, #12]
 80061c2:	4b40      	ldr	r3, [pc, #256]	; (80062c4 <xTaskIncrementTick+0x150>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a3e      	ldr	r2, [pc, #248]	; (80062c0 <xTaskIncrementTick+0x14c>)
 80061c8:	6013      	str	r3, [r2, #0]
 80061ca:	4a3e      	ldr	r2, [pc, #248]	; (80062c4 <xTaskIncrementTick+0x150>)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6013      	str	r3, [r2, #0]
 80061d0:	4b3d      	ldr	r3, [pc, #244]	; (80062c8 <xTaskIncrementTick+0x154>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	3301      	adds	r3, #1
 80061d6:	4a3c      	ldr	r2, [pc, #240]	; (80062c8 <xTaskIncrementTick+0x154>)
 80061d8:	6013      	str	r3, [r2, #0]
 80061da:	f000 fa9f 	bl	800671c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80061de:	4b3b      	ldr	r3, [pc, #236]	; (80062cc <xTaskIncrementTick+0x158>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d348      	bcc.n	800627a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061e8:	4b35      	ldr	r3, [pc, #212]	; (80062c0 <xTaskIncrementTick+0x14c>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d104      	bne.n	80061fc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061f2:	4b36      	ldr	r3, [pc, #216]	; (80062cc <xTaskIncrementTick+0x158>)
 80061f4:	f04f 32ff 	mov.w	r2, #4294967295
 80061f8:	601a      	str	r2, [r3, #0]
					break;
 80061fa:	e03e      	b.n	800627a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061fc:	4b30      	ldr	r3, [pc, #192]	; (80062c0 <xTaskIncrementTick+0x14c>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	429a      	cmp	r2, r3
 8006212:	d203      	bcs.n	800621c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006214:	4a2d      	ldr	r2, [pc, #180]	; (80062cc <xTaskIncrementTick+0x158>)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800621a:	e02e      	b.n	800627a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	3304      	adds	r3, #4
 8006220:	4618      	mov	r0, r3
 8006222:	f7fe ff17 	bl	8005054 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622a:	2b00      	cmp	r3, #0
 800622c:	d004      	beq.n	8006238 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	3318      	adds	r3, #24
 8006232:	4618      	mov	r0, r3
 8006234:	f7fe ff0e 	bl	8005054 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623c:	2201      	movs	r2, #1
 800623e:	409a      	lsls	r2, r3
 8006240:	4b23      	ldr	r3, [pc, #140]	; (80062d0 <xTaskIncrementTick+0x15c>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4313      	orrs	r3, r2
 8006246:	4a22      	ldr	r2, [pc, #136]	; (80062d0 <xTaskIncrementTick+0x15c>)
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800624e:	4613      	mov	r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	4413      	add	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4a1f      	ldr	r2, [pc, #124]	; (80062d4 <xTaskIncrementTick+0x160>)
 8006258:	441a      	add	r2, r3
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	3304      	adds	r3, #4
 800625e:	4619      	mov	r1, r3
 8006260:	4610      	mov	r0, r2
 8006262:	f7fe fe9a 	bl	8004f9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800626a:	4b1b      	ldr	r3, [pc, #108]	; (80062d8 <xTaskIncrementTick+0x164>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006270:	429a      	cmp	r2, r3
 8006272:	d3b9      	bcc.n	80061e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006274:	2301      	movs	r3, #1
 8006276:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006278:	e7b6      	b.n	80061e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800627a:	4b17      	ldr	r3, [pc, #92]	; (80062d8 <xTaskIncrementTick+0x164>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006280:	4914      	ldr	r1, [pc, #80]	; (80062d4 <xTaskIncrementTick+0x160>)
 8006282:	4613      	mov	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	440b      	add	r3, r1
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d901      	bls.n	8006296 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006292:	2301      	movs	r3, #1
 8006294:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006296:	4b11      	ldr	r3, [pc, #68]	; (80062dc <xTaskIncrementTick+0x168>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d007      	beq.n	80062ae <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800629e:	2301      	movs	r3, #1
 80062a0:	617b      	str	r3, [r7, #20]
 80062a2:	e004      	b.n	80062ae <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80062a4:	4b0e      	ldr	r3, [pc, #56]	; (80062e0 <xTaskIncrementTick+0x16c>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	3301      	adds	r3, #1
 80062aa:	4a0d      	ldr	r2, [pc, #52]	; (80062e0 <xTaskIncrementTick+0x16c>)
 80062ac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80062ae:	697b      	ldr	r3, [r7, #20]
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3718      	adds	r7, #24
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	20004440 	.word	0x20004440
 80062bc:	2000441c 	.word	0x2000441c
 80062c0:	200043d0 	.word	0x200043d0
 80062c4:	200043d4 	.word	0x200043d4
 80062c8:	20004430 	.word	0x20004430
 80062cc:	20004438 	.word	0x20004438
 80062d0:	20004420 	.word	0x20004420
 80062d4:	2000431c 	.word	0x2000431c
 80062d8:	20004318 	.word	0x20004318
 80062dc:	2000442c 	.word	0x2000442c
 80062e0:	20004428 	.word	0x20004428

080062e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80062e4:	b480      	push	{r7}
 80062e6:	b087      	sub	sp, #28
 80062e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80062ea:	4b27      	ldr	r3, [pc, #156]	; (8006388 <vTaskSwitchContext+0xa4>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d003      	beq.n	80062fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80062f2:	4b26      	ldr	r3, [pc, #152]	; (800638c <vTaskSwitchContext+0xa8>)
 80062f4:	2201      	movs	r2, #1
 80062f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80062f8:	e03f      	b.n	800637a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80062fa:	4b24      	ldr	r3, [pc, #144]	; (800638c <vTaskSwitchContext+0xa8>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006300:	4b23      	ldr	r3, [pc, #140]	; (8006390 <vTaskSwitchContext+0xac>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	fab3 f383 	clz	r3, r3
 800630c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800630e:	7afb      	ldrb	r3, [r7, #11]
 8006310:	f1c3 031f 	rsb	r3, r3, #31
 8006314:	617b      	str	r3, [r7, #20]
 8006316:	491f      	ldr	r1, [pc, #124]	; (8006394 <vTaskSwitchContext+0xb0>)
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	4613      	mov	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	440b      	add	r3, r1
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10a      	bne.n	8006340 <vTaskSwitchContext+0x5c>
	__asm volatile
 800632a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632e:	f383 8811 	msr	BASEPRI, r3
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	607b      	str	r3, [r7, #4]
}
 800633c:	bf00      	nop
 800633e:	e7fe      	b.n	800633e <vTaskSwitchContext+0x5a>
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	4613      	mov	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4a12      	ldr	r2, [pc, #72]	; (8006394 <vTaskSwitchContext+0xb0>)
 800634c:	4413      	add	r3, r2
 800634e:	613b      	str	r3, [r7, #16]
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	685a      	ldr	r2, [r3, #4]
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	605a      	str	r2, [r3, #4]
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	3308      	adds	r3, #8
 8006362:	429a      	cmp	r2, r3
 8006364:	d104      	bne.n	8006370 <vTaskSwitchContext+0x8c>
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	685a      	ldr	r2, [r3, #4]
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	605a      	str	r2, [r3, #4]
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	4a08      	ldr	r2, [pc, #32]	; (8006398 <vTaskSwitchContext+0xb4>)
 8006378:	6013      	str	r3, [r2, #0]
}
 800637a:	bf00      	nop
 800637c:	371c      	adds	r7, #28
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	20004440 	.word	0x20004440
 800638c:	2000442c 	.word	0x2000442c
 8006390:	20004420 	.word	0x20004420
 8006394:	2000431c 	.word	0x2000431c
 8006398:	20004318 	.word	0x20004318

0800639c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10a      	bne.n	80063c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80063ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	60fb      	str	r3, [r7, #12]
}
 80063be:	bf00      	nop
 80063c0:	e7fe      	b.n	80063c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80063c2:	4b07      	ldr	r3, [pc, #28]	; (80063e0 <vTaskPlaceOnEventList+0x44>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	3318      	adds	r3, #24
 80063c8:	4619      	mov	r1, r3
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7fe fe09 	bl	8004fe2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80063d0:	2101      	movs	r1, #1
 80063d2:	6838      	ldr	r0, [r7, #0]
 80063d4:	f000 fb7e 	bl	8006ad4 <prvAddCurrentTaskToDelayedList>
}
 80063d8:	bf00      	nop
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	20004318 	.word	0x20004318

080063e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10a      	bne.n	8006410 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80063fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	60fb      	str	r3, [r7, #12]
}
 800640c:	bf00      	nop
 800640e:	e7fe      	b.n	800640e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	3318      	adds	r3, #24
 8006414:	4618      	mov	r0, r3
 8006416:	f7fe fe1d 	bl	8005054 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800641a:	4b1d      	ldr	r3, [pc, #116]	; (8006490 <xTaskRemoveFromEventList+0xac>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d11c      	bne.n	800645c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	3304      	adds	r3, #4
 8006426:	4618      	mov	r0, r3
 8006428:	f7fe fe14 	bl	8005054 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006430:	2201      	movs	r2, #1
 8006432:	409a      	lsls	r2, r3
 8006434:	4b17      	ldr	r3, [pc, #92]	; (8006494 <xTaskRemoveFromEventList+0xb0>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4313      	orrs	r3, r2
 800643a:	4a16      	ldr	r2, [pc, #88]	; (8006494 <xTaskRemoveFromEventList+0xb0>)
 800643c:	6013      	str	r3, [r2, #0]
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006442:	4613      	mov	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4413      	add	r3, r2
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4a13      	ldr	r2, [pc, #76]	; (8006498 <xTaskRemoveFromEventList+0xb4>)
 800644c:	441a      	add	r2, r3
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	3304      	adds	r3, #4
 8006452:	4619      	mov	r1, r3
 8006454:	4610      	mov	r0, r2
 8006456:	f7fe fda0 	bl	8004f9a <vListInsertEnd>
 800645a:	e005      	b.n	8006468 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	3318      	adds	r3, #24
 8006460:	4619      	mov	r1, r3
 8006462:	480e      	ldr	r0, [pc, #56]	; (800649c <xTaskRemoveFromEventList+0xb8>)
 8006464:	f7fe fd99 	bl	8004f9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800646c:	4b0c      	ldr	r3, [pc, #48]	; (80064a0 <xTaskRemoveFromEventList+0xbc>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006472:	429a      	cmp	r2, r3
 8006474:	d905      	bls.n	8006482 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006476:	2301      	movs	r3, #1
 8006478:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800647a:	4b0a      	ldr	r3, [pc, #40]	; (80064a4 <xTaskRemoveFromEventList+0xc0>)
 800647c:	2201      	movs	r2, #1
 800647e:	601a      	str	r2, [r3, #0]
 8006480:	e001      	b.n	8006486 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006482:	2300      	movs	r3, #0
 8006484:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006486:	697b      	ldr	r3, [r7, #20]
}
 8006488:	4618      	mov	r0, r3
 800648a:	3718      	adds	r7, #24
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	20004440 	.word	0x20004440
 8006494:	20004420 	.word	0x20004420
 8006498:	2000431c 	.word	0x2000431c
 800649c:	200043d8 	.word	0x200043d8
 80064a0:	20004318 	.word	0x20004318
 80064a4:	2000442c 	.word	0x2000442c

080064a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80064b0:	4b06      	ldr	r3, [pc, #24]	; (80064cc <vTaskInternalSetTimeOutState+0x24>)
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80064b8:	4b05      	ldr	r3, [pc, #20]	; (80064d0 <vTaskInternalSetTimeOutState+0x28>)
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	605a      	str	r2, [r3, #4]
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr
 80064cc:	20004430 	.word	0x20004430
 80064d0:	2000441c 	.word	0x2000441c

080064d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b088      	sub	sp, #32
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10a      	bne.n	80064fa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80064e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e8:	f383 8811 	msr	BASEPRI, r3
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	613b      	str	r3, [r7, #16]
}
 80064f6:	bf00      	nop
 80064f8:	e7fe      	b.n	80064f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10a      	bne.n	8006516 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006504:	f383 8811 	msr	BASEPRI, r3
 8006508:	f3bf 8f6f 	isb	sy
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	60fb      	str	r3, [r7, #12]
}
 8006512:	bf00      	nop
 8006514:	e7fe      	b.n	8006514 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006516:	f000 fc6d 	bl	8006df4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800651a:	4b1d      	ldr	r3, [pc, #116]	; (8006590 <xTaskCheckForTimeOut+0xbc>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	69ba      	ldr	r2, [r7, #24]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006532:	d102      	bne.n	800653a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006534:	2300      	movs	r3, #0
 8006536:	61fb      	str	r3, [r7, #28]
 8006538:	e023      	b.n	8006582 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	4b15      	ldr	r3, [pc, #84]	; (8006594 <xTaskCheckForTimeOut+0xc0>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	429a      	cmp	r2, r3
 8006544:	d007      	beq.n	8006556 <xTaskCheckForTimeOut+0x82>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	69ba      	ldr	r2, [r7, #24]
 800654c:	429a      	cmp	r2, r3
 800654e:	d302      	bcc.n	8006556 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006550:	2301      	movs	r3, #1
 8006552:	61fb      	str	r3, [r7, #28]
 8006554:	e015      	b.n	8006582 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	429a      	cmp	r2, r3
 800655e:	d20b      	bcs.n	8006578 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	1ad2      	subs	r2, r2, r3
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f7ff ff9b 	bl	80064a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006572:	2300      	movs	r3, #0
 8006574:	61fb      	str	r3, [r7, #28]
 8006576:	e004      	b.n	8006582 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	2200      	movs	r2, #0
 800657c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800657e:	2301      	movs	r3, #1
 8006580:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006582:	f000 fc67 	bl	8006e54 <vPortExitCritical>

	return xReturn;
 8006586:	69fb      	ldr	r3, [r7, #28]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3720      	adds	r7, #32
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	2000441c 	.word	0x2000441c
 8006594:	20004430 	.word	0x20004430

08006598 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006598:	b480      	push	{r7}
 800659a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800659c:	4b03      	ldr	r3, [pc, #12]	; (80065ac <vTaskMissedYield+0x14>)
 800659e:	2201      	movs	r2, #1
 80065a0:	601a      	str	r2, [r3, #0]
}
 80065a2:	bf00      	nop
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	2000442c 	.word	0x2000442c

080065b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80065b8:	f000 f852 	bl	8006660 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80065bc:	4b06      	ldr	r3, [pc, #24]	; (80065d8 <prvIdleTask+0x28>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d9f9      	bls.n	80065b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80065c4:	4b05      	ldr	r3, [pc, #20]	; (80065dc <prvIdleTask+0x2c>)
 80065c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065ca:	601a      	str	r2, [r3, #0]
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80065d4:	e7f0      	b.n	80065b8 <prvIdleTask+0x8>
 80065d6:	bf00      	nop
 80065d8:	2000431c 	.word	0x2000431c
 80065dc:	e000ed04 	.word	0xe000ed04

080065e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065e6:	2300      	movs	r3, #0
 80065e8:	607b      	str	r3, [r7, #4]
 80065ea:	e00c      	b.n	8006606 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	4613      	mov	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4a12      	ldr	r2, [pc, #72]	; (8006640 <prvInitialiseTaskLists+0x60>)
 80065f8:	4413      	add	r3, r2
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7fe fca0 	bl	8004f40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	3301      	adds	r3, #1
 8006604:	607b      	str	r3, [r7, #4]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2b06      	cmp	r3, #6
 800660a:	d9ef      	bls.n	80065ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800660c:	480d      	ldr	r0, [pc, #52]	; (8006644 <prvInitialiseTaskLists+0x64>)
 800660e:	f7fe fc97 	bl	8004f40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006612:	480d      	ldr	r0, [pc, #52]	; (8006648 <prvInitialiseTaskLists+0x68>)
 8006614:	f7fe fc94 	bl	8004f40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006618:	480c      	ldr	r0, [pc, #48]	; (800664c <prvInitialiseTaskLists+0x6c>)
 800661a:	f7fe fc91 	bl	8004f40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800661e:	480c      	ldr	r0, [pc, #48]	; (8006650 <prvInitialiseTaskLists+0x70>)
 8006620:	f7fe fc8e 	bl	8004f40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006624:	480b      	ldr	r0, [pc, #44]	; (8006654 <prvInitialiseTaskLists+0x74>)
 8006626:	f7fe fc8b 	bl	8004f40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800662a:	4b0b      	ldr	r3, [pc, #44]	; (8006658 <prvInitialiseTaskLists+0x78>)
 800662c:	4a05      	ldr	r2, [pc, #20]	; (8006644 <prvInitialiseTaskLists+0x64>)
 800662e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006630:	4b0a      	ldr	r3, [pc, #40]	; (800665c <prvInitialiseTaskLists+0x7c>)
 8006632:	4a05      	ldr	r2, [pc, #20]	; (8006648 <prvInitialiseTaskLists+0x68>)
 8006634:	601a      	str	r2, [r3, #0]
}
 8006636:	bf00      	nop
 8006638:	3708      	adds	r7, #8
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	2000431c 	.word	0x2000431c
 8006644:	200043a8 	.word	0x200043a8
 8006648:	200043bc 	.word	0x200043bc
 800664c:	200043d8 	.word	0x200043d8
 8006650:	200043ec 	.word	0x200043ec
 8006654:	20004404 	.word	0x20004404
 8006658:	200043d0 	.word	0x200043d0
 800665c:	200043d4 	.word	0x200043d4

08006660 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006666:	e019      	b.n	800669c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006668:	f000 fbc4 	bl	8006df4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800666c:	4b10      	ldr	r3, [pc, #64]	; (80066b0 <prvCheckTasksWaitingTermination+0x50>)
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	3304      	adds	r3, #4
 8006678:	4618      	mov	r0, r3
 800667a:	f7fe fceb 	bl	8005054 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800667e:	4b0d      	ldr	r3, [pc, #52]	; (80066b4 <prvCheckTasksWaitingTermination+0x54>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	3b01      	subs	r3, #1
 8006684:	4a0b      	ldr	r2, [pc, #44]	; (80066b4 <prvCheckTasksWaitingTermination+0x54>)
 8006686:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006688:	4b0b      	ldr	r3, [pc, #44]	; (80066b8 <prvCheckTasksWaitingTermination+0x58>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	3b01      	subs	r3, #1
 800668e:	4a0a      	ldr	r2, [pc, #40]	; (80066b8 <prvCheckTasksWaitingTermination+0x58>)
 8006690:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006692:	f000 fbdf 	bl	8006e54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 f810 	bl	80066bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800669c:	4b06      	ldr	r3, [pc, #24]	; (80066b8 <prvCheckTasksWaitingTermination+0x58>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1e1      	bne.n	8006668 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80066a4:	bf00      	nop
 80066a6:	bf00      	nop
 80066a8:	3708      	adds	r7, #8
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	200043ec 	.word	0x200043ec
 80066b4:	20004418 	.word	0x20004418
 80066b8:	20004400 	.word	0x20004400

080066bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d108      	bne.n	80066e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d2:	4618      	mov	r0, r3
 80066d4:	f000 fd7c 	bl	80071d0 <vPortFree>
				vPortFree( pxTCB );
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 fd79 	bl	80071d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80066de:	e018      	b.n	8006712 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d103      	bne.n	80066f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fd70 	bl	80071d0 <vPortFree>
	}
 80066f0:	e00f      	b.n	8006712 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d00a      	beq.n	8006712 <prvDeleteTCB+0x56>
	__asm volatile
 80066fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006700:	f383 8811 	msr	BASEPRI, r3
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	60fb      	str	r3, [r7, #12]
}
 800670e:	bf00      	nop
 8006710:	e7fe      	b.n	8006710 <prvDeleteTCB+0x54>
	}
 8006712:	bf00      	nop
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
	...

0800671c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006722:	4b0c      	ldr	r3, [pc, #48]	; (8006754 <prvResetNextTaskUnblockTime+0x38>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d104      	bne.n	8006736 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800672c:	4b0a      	ldr	r3, [pc, #40]	; (8006758 <prvResetNextTaskUnblockTime+0x3c>)
 800672e:	f04f 32ff 	mov.w	r2, #4294967295
 8006732:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006734:	e008      	b.n	8006748 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006736:	4b07      	ldr	r3, [pc, #28]	; (8006754 <prvResetNextTaskUnblockTime+0x38>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	4a04      	ldr	r2, [pc, #16]	; (8006758 <prvResetNextTaskUnblockTime+0x3c>)
 8006746:	6013      	str	r3, [r2, #0]
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr
 8006754:	200043d0 	.word	0x200043d0
 8006758:	20004438 	.word	0x20004438

0800675c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006762:	4b0b      	ldr	r3, [pc, #44]	; (8006790 <xTaskGetSchedulerState+0x34>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d102      	bne.n	8006770 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800676a:	2301      	movs	r3, #1
 800676c:	607b      	str	r3, [r7, #4]
 800676e:	e008      	b.n	8006782 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006770:	4b08      	ldr	r3, [pc, #32]	; (8006794 <xTaskGetSchedulerState+0x38>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d102      	bne.n	800677e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006778:	2302      	movs	r3, #2
 800677a:	607b      	str	r3, [r7, #4]
 800677c:	e001      	b.n	8006782 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800677e:	2300      	movs	r3, #0
 8006780:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006782:	687b      	ldr	r3, [r7, #4]
	}
 8006784:	4618      	mov	r0, r3
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr
 8006790:	20004424 	.word	0x20004424
 8006794:	20004440 	.word	0x20004440

08006798 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80067a4:	2300      	movs	r3, #0
 80067a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d05e      	beq.n	800686c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b2:	4b31      	ldr	r3, [pc, #196]	; (8006878 <xTaskPriorityInherit+0xe0>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d24e      	bcs.n	800685a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	db06      	blt.n	80067d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067c4:	4b2c      	ldr	r3, [pc, #176]	; (8006878 <xTaskPriorityInherit+0xe0>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ca:	f1c3 0207 	rsb	r2, r3, #7
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	6959      	ldr	r1, [r3, #20]
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067da:	4613      	mov	r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4a26      	ldr	r2, [pc, #152]	; (800687c <xTaskPriorityInherit+0xe4>)
 80067e4:	4413      	add	r3, r2
 80067e6:	4299      	cmp	r1, r3
 80067e8:	d12f      	bne.n	800684a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	3304      	adds	r3, #4
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fe fc30 	bl	8005054 <uxListRemove>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10a      	bne.n	8006810 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fe:	2201      	movs	r2, #1
 8006800:	fa02 f303 	lsl.w	r3, r2, r3
 8006804:	43da      	mvns	r2, r3
 8006806:	4b1e      	ldr	r3, [pc, #120]	; (8006880 <xTaskPriorityInherit+0xe8>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4013      	ands	r3, r2
 800680c:	4a1c      	ldr	r2, [pc, #112]	; (8006880 <xTaskPriorityInherit+0xe8>)
 800680e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006810:	4b19      	ldr	r3, [pc, #100]	; (8006878 <xTaskPriorityInherit+0xe0>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681e:	2201      	movs	r2, #1
 8006820:	409a      	lsls	r2, r3
 8006822:	4b17      	ldr	r3, [pc, #92]	; (8006880 <xTaskPriorityInherit+0xe8>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4313      	orrs	r3, r2
 8006828:	4a15      	ldr	r2, [pc, #84]	; (8006880 <xTaskPriorityInherit+0xe8>)
 800682a:	6013      	str	r3, [r2, #0]
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006830:	4613      	mov	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	4a10      	ldr	r2, [pc, #64]	; (800687c <xTaskPriorityInherit+0xe4>)
 800683a:	441a      	add	r2, r3
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	3304      	adds	r3, #4
 8006840:	4619      	mov	r1, r3
 8006842:	4610      	mov	r0, r2
 8006844:	f7fe fba9 	bl	8004f9a <vListInsertEnd>
 8006848:	e004      	b.n	8006854 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800684a:	4b0b      	ldr	r3, [pc, #44]	; (8006878 <xTaskPriorityInherit+0xe0>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006854:	2301      	movs	r3, #1
 8006856:	60fb      	str	r3, [r7, #12]
 8006858:	e008      	b.n	800686c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800685e:	4b06      	ldr	r3, [pc, #24]	; (8006878 <xTaskPriorityInherit+0xe0>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006864:	429a      	cmp	r2, r3
 8006866:	d201      	bcs.n	800686c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006868:	2301      	movs	r3, #1
 800686a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800686c:	68fb      	ldr	r3, [r7, #12]
	}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	20004318 	.word	0x20004318
 800687c:	2000431c 	.word	0x2000431c
 8006880:	20004420 	.word	0x20004420

08006884 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006890:	2300      	movs	r3, #0
 8006892:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d06e      	beq.n	8006978 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800689a:	4b3a      	ldr	r3, [pc, #232]	; (8006984 <xTaskPriorityDisinherit+0x100>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d00a      	beq.n	80068ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80068a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a8:	f383 8811 	msr	BASEPRI, r3
 80068ac:	f3bf 8f6f 	isb	sy
 80068b0:	f3bf 8f4f 	dsb	sy
 80068b4:	60fb      	str	r3, [r7, #12]
}
 80068b6:	bf00      	nop
 80068b8:	e7fe      	b.n	80068b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10a      	bne.n	80068d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80068c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c6:	f383 8811 	msr	BASEPRI, r3
 80068ca:	f3bf 8f6f 	isb	sy
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	60bb      	str	r3, [r7, #8]
}
 80068d4:	bf00      	nop
 80068d6:	e7fe      	b.n	80068d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068dc:	1e5a      	subs	r2, r3, #1
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d044      	beq.n	8006978 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d140      	bne.n	8006978 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	3304      	adds	r3, #4
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7fe fbaa 	bl	8005054 <uxListRemove>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d115      	bne.n	8006932 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800690a:	491f      	ldr	r1, [pc, #124]	; (8006988 <xTaskPriorityDisinherit+0x104>)
 800690c:	4613      	mov	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4413      	add	r3, r2
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	440b      	add	r3, r1
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d10a      	bne.n	8006932 <xTaskPriorityDisinherit+0xae>
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006920:	2201      	movs	r2, #1
 8006922:	fa02 f303 	lsl.w	r3, r2, r3
 8006926:	43da      	mvns	r2, r3
 8006928:	4b18      	ldr	r3, [pc, #96]	; (800698c <xTaskPriorityDisinherit+0x108>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4013      	ands	r3, r2
 800692e:	4a17      	ldr	r2, [pc, #92]	; (800698c <xTaskPriorityDisinherit+0x108>)
 8006930:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693e:	f1c3 0207 	rsb	r2, r3, #7
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694a:	2201      	movs	r2, #1
 800694c:	409a      	lsls	r2, r3
 800694e:	4b0f      	ldr	r3, [pc, #60]	; (800698c <xTaskPriorityDisinherit+0x108>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4313      	orrs	r3, r2
 8006954:	4a0d      	ldr	r2, [pc, #52]	; (800698c <xTaskPriorityDisinherit+0x108>)
 8006956:	6013      	str	r3, [r2, #0]
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800695c:	4613      	mov	r3, r2
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4a08      	ldr	r2, [pc, #32]	; (8006988 <xTaskPriorityDisinherit+0x104>)
 8006966:	441a      	add	r2, r3
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	3304      	adds	r3, #4
 800696c:	4619      	mov	r1, r3
 800696e:	4610      	mov	r0, r2
 8006970:	f7fe fb13 	bl	8004f9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006974:	2301      	movs	r3, #1
 8006976:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006978:	697b      	ldr	r3, [r7, #20]
	}
 800697a:	4618      	mov	r0, r3
 800697c:	3718      	adds	r7, #24
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	20004318 	.word	0x20004318
 8006988:	2000431c 	.word	0x2000431c
 800698c:	20004420 	.word	0x20004420

08006990 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006990:	b580      	push	{r7, lr}
 8006992:	b088      	sub	sp, #32
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800699e:	2301      	movs	r3, #1
 80069a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d077      	beq.n	8006a98 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d10a      	bne.n	80069c6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80069b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b4:	f383 8811 	msr	BASEPRI, r3
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	60fb      	str	r3, [r7, #12]
}
 80069c2:	bf00      	nop
 80069c4:	e7fe      	b.n	80069c4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ca:	683a      	ldr	r2, [r7, #0]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d902      	bls.n	80069d6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	61fb      	str	r3, [r7, #28]
 80069d4:	e002      	b.n	80069dc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069da:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e0:	69fa      	ldr	r2, [r7, #28]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d058      	beq.n	8006a98 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d153      	bne.n	8006a98 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80069f0:	4b2b      	ldr	r3, [pc, #172]	; (8006aa0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	69ba      	ldr	r2, [r7, #24]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d10a      	bne.n	8006a10 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80069fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fe:	f383 8811 	msr	BASEPRI, r3
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	60bb      	str	r3, [r7, #8]
}
 8006a0c:	bf00      	nop
 8006a0e:	e7fe      	b.n	8006a0e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a14:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	69fa      	ldr	r2, [r7, #28]
 8006a1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	db04      	blt.n	8006a2e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	f1c3 0207 	rsb	r2, r3, #7
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	6959      	ldr	r1, [r3, #20]
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	4613      	mov	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4a19      	ldr	r2, [pc, #100]	; (8006aa4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006a3e:	4413      	add	r3, r2
 8006a40:	4299      	cmp	r1, r3
 8006a42:	d129      	bne.n	8006a98 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	3304      	adds	r3, #4
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7fe fb03 	bl	8005054 <uxListRemove>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10a      	bne.n	8006a6a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a58:	2201      	movs	r2, #1
 8006a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a5e:	43da      	mvns	r2, r3
 8006a60:	4b11      	ldr	r3, [pc, #68]	; (8006aa8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4013      	ands	r3, r2
 8006a66:	4a10      	ldr	r2, [pc, #64]	; (8006aa8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006a68:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6e:	2201      	movs	r2, #1
 8006a70:	409a      	lsls	r2, r3
 8006a72:	4b0d      	ldr	r3, [pc, #52]	; (8006aa8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	4a0b      	ldr	r2, [pc, #44]	; (8006aa8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006a7a:	6013      	str	r3, [r2, #0]
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a80:	4613      	mov	r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4a06      	ldr	r2, [pc, #24]	; (8006aa4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006a8a:	441a      	add	r2, r3
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	3304      	adds	r3, #4
 8006a90:	4619      	mov	r1, r3
 8006a92:	4610      	mov	r0, r2
 8006a94:	f7fe fa81 	bl	8004f9a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a98:	bf00      	nop
 8006a9a:	3720      	adds	r7, #32
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	20004318 	.word	0x20004318
 8006aa4:	2000431c 	.word	0x2000431c
 8006aa8:	20004420 	.word	0x20004420

08006aac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006aac:	b480      	push	{r7}
 8006aae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006ab0:	4b07      	ldr	r3, [pc, #28]	; (8006ad0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d004      	beq.n	8006ac2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006ab8:	4b05      	ldr	r3, [pc, #20]	; (8006ad0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006abe:	3201      	adds	r2, #1
 8006ac0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006ac2:	4b03      	ldr	r3, [pc, #12]	; (8006ad0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
	}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	20004318 	.word	0x20004318

08006ad4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ade:	4b29      	ldr	r3, [pc, #164]	; (8006b84 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ae4:	4b28      	ldr	r3, [pc, #160]	; (8006b88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3304      	adds	r3, #4
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fe fab2 	bl	8005054 <uxListRemove>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10b      	bne.n	8006b0e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006af6:	4b24      	ldr	r3, [pc, #144]	; (8006b88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afc:	2201      	movs	r2, #1
 8006afe:	fa02 f303 	lsl.w	r3, r2, r3
 8006b02:	43da      	mvns	r2, r3
 8006b04:	4b21      	ldr	r3, [pc, #132]	; (8006b8c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4013      	ands	r3, r2
 8006b0a:	4a20      	ldr	r2, [pc, #128]	; (8006b8c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b0c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b14:	d10a      	bne.n	8006b2c <prvAddCurrentTaskToDelayedList+0x58>
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d007      	beq.n	8006b2c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b1c:	4b1a      	ldr	r3, [pc, #104]	; (8006b88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	3304      	adds	r3, #4
 8006b22:	4619      	mov	r1, r3
 8006b24:	481a      	ldr	r0, [pc, #104]	; (8006b90 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006b26:	f7fe fa38 	bl	8004f9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b2a:	e026      	b.n	8006b7a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4413      	add	r3, r2
 8006b32:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b34:	4b14      	ldr	r3, [pc, #80]	; (8006b88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d209      	bcs.n	8006b58 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b44:	4b13      	ldr	r3, [pc, #76]	; (8006b94 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	4b0f      	ldr	r3, [pc, #60]	; (8006b88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	3304      	adds	r3, #4
 8006b4e:	4619      	mov	r1, r3
 8006b50:	4610      	mov	r0, r2
 8006b52:	f7fe fa46 	bl	8004fe2 <vListInsert>
}
 8006b56:	e010      	b.n	8006b7a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b58:	4b0f      	ldr	r3, [pc, #60]	; (8006b98 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	4b0a      	ldr	r3, [pc, #40]	; (8006b88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3304      	adds	r3, #4
 8006b62:	4619      	mov	r1, r3
 8006b64:	4610      	mov	r0, r2
 8006b66:	f7fe fa3c 	bl	8004fe2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b6a:	4b0c      	ldr	r3, [pc, #48]	; (8006b9c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d202      	bcs.n	8006b7a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006b74:	4a09      	ldr	r2, [pc, #36]	; (8006b9c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	6013      	str	r3, [r2, #0]
}
 8006b7a:	bf00      	nop
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	2000441c 	.word	0x2000441c
 8006b88:	20004318 	.word	0x20004318
 8006b8c:	20004420 	.word	0x20004420
 8006b90:	20004404 	.word	0x20004404
 8006b94:	200043d4 	.word	0x200043d4
 8006b98:	200043d0 	.word	0x200043d0
 8006b9c:	20004438 	.word	0x20004438

08006ba0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	3b04      	subs	r3, #4
 8006bb0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006bb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	3b04      	subs	r3, #4
 8006bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	f023 0201 	bic.w	r2, r3, #1
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	3b04      	subs	r3, #4
 8006bce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006bd0:	4a0c      	ldr	r2, [pc, #48]	; (8006c04 <pxPortInitialiseStack+0x64>)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	3b14      	subs	r3, #20
 8006bda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	3b04      	subs	r3, #4
 8006be6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f06f 0202 	mvn.w	r2, #2
 8006bee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	3b20      	subs	r3, #32
 8006bf4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr
 8006c04:	08006c09 	.word	0x08006c09

08006c08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c12:	4b12      	ldr	r3, [pc, #72]	; (8006c5c <prvTaskExitError+0x54>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c1a:	d00a      	beq.n	8006c32 <prvTaskExitError+0x2a>
	__asm volatile
 8006c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c20:	f383 8811 	msr	BASEPRI, r3
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	60fb      	str	r3, [r7, #12]
}
 8006c2e:	bf00      	nop
 8006c30:	e7fe      	b.n	8006c30 <prvTaskExitError+0x28>
	__asm volatile
 8006c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c36:	f383 8811 	msr	BASEPRI, r3
 8006c3a:	f3bf 8f6f 	isb	sy
 8006c3e:	f3bf 8f4f 	dsb	sy
 8006c42:	60bb      	str	r3, [r7, #8]
}
 8006c44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c46:	bf00      	nop
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d0fc      	beq.n	8006c48 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c4e:	bf00      	nop
 8006c50:	bf00      	nop
 8006c52:	3714      	adds	r7, #20
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr
 8006c5c:	20000010 	.word	0x20000010

08006c60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c60:	4b07      	ldr	r3, [pc, #28]	; (8006c80 <pxCurrentTCBConst2>)
 8006c62:	6819      	ldr	r1, [r3, #0]
 8006c64:	6808      	ldr	r0, [r1, #0]
 8006c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c6a:	f380 8809 	msr	PSP, r0
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f04f 0000 	mov.w	r0, #0
 8006c76:	f380 8811 	msr	BASEPRI, r0
 8006c7a:	4770      	bx	lr
 8006c7c:	f3af 8000 	nop.w

08006c80 <pxCurrentTCBConst2>:
 8006c80:	20004318 	.word	0x20004318
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c84:	bf00      	nop
 8006c86:	bf00      	nop

08006c88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006c88:	4808      	ldr	r0, [pc, #32]	; (8006cac <prvPortStartFirstTask+0x24>)
 8006c8a:	6800      	ldr	r0, [r0, #0]
 8006c8c:	6800      	ldr	r0, [r0, #0]
 8006c8e:	f380 8808 	msr	MSP, r0
 8006c92:	f04f 0000 	mov.w	r0, #0
 8006c96:	f380 8814 	msr	CONTROL, r0
 8006c9a:	b662      	cpsie	i
 8006c9c:	b661      	cpsie	f
 8006c9e:	f3bf 8f4f 	dsb	sy
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	df00      	svc	0
 8006ca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006caa:	bf00      	nop
 8006cac:	e000ed08 	.word	0xe000ed08

08006cb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006cb6:	4b46      	ldr	r3, [pc, #280]	; (8006dd0 <xPortStartScheduler+0x120>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a46      	ldr	r2, [pc, #280]	; (8006dd4 <xPortStartScheduler+0x124>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d10a      	bne.n	8006cd6 <xPortStartScheduler+0x26>
	__asm volatile
 8006cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	613b      	str	r3, [r7, #16]
}
 8006cd2:	bf00      	nop
 8006cd4:	e7fe      	b.n	8006cd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006cd6:	4b3e      	ldr	r3, [pc, #248]	; (8006dd0 <xPortStartScheduler+0x120>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a3f      	ldr	r2, [pc, #252]	; (8006dd8 <xPortStartScheduler+0x128>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d10a      	bne.n	8006cf6 <xPortStartScheduler+0x46>
	__asm volatile
 8006ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce4:	f383 8811 	msr	BASEPRI, r3
 8006ce8:	f3bf 8f6f 	isb	sy
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	60fb      	str	r3, [r7, #12]
}
 8006cf2:	bf00      	nop
 8006cf4:	e7fe      	b.n	8006cf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006cf6:	4b39      	ldr	r3, [pc, #228]	; (8006ddc <xPortStartScheduler+0x12c>)
 8006cf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	22ff      	movs	r2, #255	; 0xff
 8006d06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d10:	78fb      	ldrb	r3, [r7, #3]
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d18:	b2da      	uxtb	r2, r3
 8006d1a:	4b31      	ldr	r3, [pc, #196]	; (8006de0 <xPortStartScheduler+0x130>)
 8006d1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d1e:	4b31      	ldr	r3, [pc, #196]	; (8006de4 <xPortStartScheduler+0x134>)
 8006d20:	2207      	movs	r2, #7
 8006d22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d24:	e009      	b.n	8006d3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006d26:	4b2f      	ldr	r3, [pc, #188]	; (8006de4 <xPortStartScheduler+0x134>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	4a2d      	ldr	r2, [pc, #180]	; (8006de4 <xPortStartScheduler+0x134>)
 8006d2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d30:	78fb      	ldrb	r3, [r7, #3]
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	005b      	lsls	r3, r3, #1
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d3a:	78fb      	ldrb	r3, [r7, #3]
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d42:	2b80      	cmp	r3, #128	; 0x80
 8006d44:	d0ef      	beq.n	8006d26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d46:	4b27      	ldr	r3, [pc, #156]	; (8006de4 <xPortStartScheduler+0x134>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f1c3 0307 	rsb	r3, r3, #7
 8006d4e:	2b04      	cmp	r3, #4
 8006d50:	d00a      	beq.n	8006d68 <xPortStartScheduler+0xb8>
	__asm volatile
 8006d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d56:	f383 8811 	msr	BASEPRI, r3
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	60bb      	str	r3, [r7, #8]
}
 8006d64:	bf00      	nop
 8006d66:	e7fe      	b.n	8006d66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d68:	4b1e      	ldr	r3, [pc, #120]	; (8006de4 <xPortStartScheduler+0x134>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	021b      	lsls	r3, r3, #8
 8006d6e:	4a1d      	ldr	r2, [pc, #116]	; (8006de4 <xPortStartScheduler+0x134>)
 8006d70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d72:	4b1c      	ldr	r3, [pc, #112]	; (8006de4 <xPortStartScheduler+0x134>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d7a:	4a1a      	ldr	r2, [pc, #104]	; (8006de4 <xPortStartScheduler+0x134>)
 8006d7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d86:	4b18      	ldr	r3, [pc, #96]	; (8006de8 <xPortStartScheduler+0x138>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a17      	ldr	r2, [pc, #92]	; (8006de8 <xPortStartScheduler+0x138>)
 8006d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d92:	4b15      	ldr	r3, [pc, #84]	; (8006de8 <xPortStartScheduler+0x138>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a14      	ldr	r2, [pc, #80]	; (8006de8 <xPortStartScheduler+0x138>)
 8006d98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d9e:	f000 f8dd 	bl	8006f5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006da2:	4b12      	ldr	r3, [pc, #72]	; (8006dec <xPortStartScheduler+0x13c>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006da8:	f000 f8fc 	bl	8006fa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006dac:	4b10      	ldr	r3, [pc, #64]	; (8006df0 <xPortStartScheduler+0x140>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a0f      	ldr	r2, [pc, #60]	; (8006df0 <xPortStartScheduler+0x140>)
 8006db2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006db6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006db8:	f7ff ff66 	bl	8006c88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006dbc:	f7ff fa92 	bl	80062e4 <vTaskSwitchContext>
	prvTaskExitError();
 8006dc0:	f7ff ff22 	bl	8006c08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3718      	adds	r7, #24
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	e000ed00 	.word	0xe000ed00
 8006dd4:	410fc271 	.word	0x410fc271
 8006dd8:	410fc270 	.word	0x410fc270
 8006ddc:	e000e400 	.word	0xe000e400
 8006de0:	20004444 	.word	0x20004444
 8006de4:	20004448 	.word	0x20004448
 8006de8:	e000ed20 	.word	0xe000ed20
 8006dec:	20000010 	.word	0x20000010
 8006df0:	e000ef34 	.word	0xe000ef34

08006df4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
	__asm volatile
 8006dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfe:	f383 8811 	msr	BASEPRI, r3
 8006e02:	f3bf 8f6f 	isb	sy
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	607b      	str	r3, [r7, #4]
}
 8006e0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006e0e:	4b0f      	ldr	r3, [pc, #60]	; (8006e4c <vPortEnterCritical+0x58>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	3301      	adds	r3, #1
 8006e14:	4a0d      	ldr	r2, [pc, #52]	; (8006e4c <vPortEnterCritical+0x58>)
 8006e16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006e18:	4b0c      	ldr	r3, [pc, #48]	; (8006e4c <vPortEnterCritical+0x58>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d10f      	bne.n	8006e40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006e20:	4b0b      	ldr	r3, [pc, #44]	; (8006e50 <vPortEnterCritical+0x5c>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00a      	beq.n	8006e40 <vPortEnterCritical+0x4c>
	__asm volatile
 8006e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2e:	f383 8811 	msr	BASEPRI, r3
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	603b      	str	r3, [r7, #0]
}
 8006e3c:	bf00      	nop
 8006e3e:	e7fe      	b.n	8006e3e <vPortEnterCritical+0x4a>
	}
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr
 8006e4c:	20000010 	.word	0x20000010
 8006e50:	e000ed04 	.word	0xe000ed04

08006e54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e5a:	4b12      	ldr	r3, [pc, #72]	; (8006ea4 <vPortExitCritical+0x50>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10a      	bne.n	8006e78 <vPortExitCritical+0x24>
	__asm volatile
 8006e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e66:	f383 8811 	msr	BASEPRI, r3
 8006e6a:	f3bf 8f6f 	isb	sy
 8006e6e:	f3bf 8f4f 	dsb	sy
 8006e72:	607b      	str	r3, [r7, #4]
}
 8006e74:	bf00      	nop
 8006e76:	e7fe      	b.n	8006e76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006e78:	4b0a      	ldr	r3, [pc, #40]	; (8006ea4 <vPortExitCritical+0x50>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	4a09      	ldr	r2, [pc, #36]	; (8006ea4 <vPortExitCritical+0x50>)
 8006e80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e82:	4b08      	ldr	r3, [pc, #32]	; (8006ea4 <vPortExitCritical+0x50>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d105      	bne.n	8006e96 <vPortExitCritical+0x42>
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	f383 8811 	msr	BASEPRI, r3
}
 8006e94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e96:	bf00      	nop
 8006e98:	370c      	adds	r7, #12
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	20000010 	.word	0x20000010
	...

08006eb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006eb0:	f3ef 8009 	mrs	r0, PSP
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	4b15      	ldr	r3, [pc, #84]	; (8006f10 <pxCurrentTCBConst>)
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	f01e 0f10 	tst.w	lr, #16
 8006ec0:	bf08      	it	eq
 8006ec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eca:	6010      	str	r0, [r2, #0]
 8006ecc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ed0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ed4:	f380 8811 	msr	BASEPRI, r0
 8006ed8:	f3bf 8f4f 	dsb	sy
 8006edc:	f3bf 8f6f 	isb	sy
 8006ee0:	f7ff fa00 	bl	80062e4 <vTaskSwitchContext>
 8006ee4:	f04f 0000 	mov.w	r0, #0
 8006ee8:	f380 8811 	msr	BASEPRI, r0
 8006eec:	bc09      	pop	{r0, r3}
 8006eee:	6819      	ldr	r1, [r3, #0]
 8006ef0:	6808      	ldr	r0, [r1, #0]
 8006ef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef6:	f01e 0f10 	tst.w	lr, #16
 8006efa:	bf08      	it	eq
 8006efc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006f00:	f380 8809 	msr	PSP, r0
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	f3af 8000 	nop.w

08006f10 <pxCurrentTCBConst>:
 8006f10:	20004318 	.word	0x20004318
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006f14:	bf00      	nop
 8006f16:	bf00      	nop

08006f18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f22:	f383 8811 	msr	BASEPRI, r3
 8006f26:	f3bf 8f6f 	isb	sy
 8006f2a:	f3bf 8f4f 	dsb	sy
 8006f2e:	607b      	str	r3, [r7, #4]
}
 8006f30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006f32:	f7ff f91f 	bl	8006174 <xTaskIncrementTick>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d003      	beq.n	8006f44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006f3c:	4b06      	ldr	r3, [pc, #24]	; (8006f58 <xPortSysTickHandler+0x40>)
 8006f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	2300      	movs	r3, #0
 8006f46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	f383 8811 	msr	BASEPRI, r3
}
 8006f4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f50:	bf00      	nop
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	e000ed04 	.word	0xe000ed04

08006f5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f60:	4b0b      	ldr	r3, [pc, #44]	; (8006f90 <vPortSetupTimerInterrupt+0x34>)
 8006f62:	2200      	movs	r2, #0
 8006f64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f66:	4b0b      	ldr	r3, [pc, #44]	; (8006f94 <vPortSetupTimerInterrupt+0x38>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f6c:	4b0a      	ldr	r3, [pc, #40]	; (8006f98 <vPortSetupTimerInterrupt+0x3c>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a0a      	ldr	r2, [pc, #40]	; (8006f9c <vPortSetupTimerInterrupt+0x40>)
 8006f72:	fba2 2303 	umull	r2, r3, r2, r3
 8006f76:	099b      	lsrs	r3, r3, #6
 8006f78:	4a09      	ldr	r2, [pc, #36]	; (8006fa0 <vPortSetupTimerInterrupt+0x44>)
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f7e:	4b04      	ldr	r3, [pc, #16]	; (8006f90 <vPortSetupTimerInterrupt+0x34>)
 8006f80:	2207      	movs	r2, #7
 8006f82:	601a      	str	r2, [r3, #0]
}
 8006f84:	bf00      	nop
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	e000e010 	.word	0xe000e010
 8006f94:	e000e018 	.word	0xe000e018
 8006f98:	20000000 	.word	0x20000000
 8006f9c:	10624dd3 	.word	0x10624dd3
 8006fa0:	e000e014 	.word	0xe000e014

08006fa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006fa4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006fb4 <vPortEnableVFP+0x10>
 8006fa8:	6801      	ldr	r1, [r0, #0]
 8006faa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006fae:	6001      	str	r1, [r0, #0]
 8006fb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006fb2:	bf00      	nop
 8006fb4:	e000ed88 	.word	0xe000ed88

08006fb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006fbe:	f3ef 8305 	mrs	r3, IPSR
 8006fc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2b0f      	cmp	r3, #15
 8006fc8:	d914      	bls.n	8006ff4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006fca:	4a17      	ldr	r2, [pc, #92]	; (8007028 <vPortValidateInterruptPriority+0x70>)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	4413      	add	r3, r2
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006fd4:	4b15      	ldr	r3, [pc, #84]	; (800702c <vPortValidateInterruptPriority+0x74>)
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	7afa      	ldrb	r2, [r7, #11]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d20a      	bcs.n	8006ff4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe2:	f383 8811 	msr	BASEPRI, r3
 8006fe6:	f3bf 8f6f 	isb	sy
 8006fea:	f3bf 8f4f 	dsb	sy
 8006fee:	607b      	str	r3, [r7, #4]
}
 8006ff0:	bf00      	nop
 8006ff2:	e7fe      	b.n	8006ff2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006ff4:	4b0e      	ldr	r3, [pc, #56]	; (8007030 <vPortValidateInterruptPriority+0x78>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ffc:	4b0d      	ldr	r3, [pc, #52]	; (8007034 <vPortValidateInterruptPriority+0x7c>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	429a      	cmp	r2, r3
 8007002:	d90a      	bls.n	800701a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007008:	f383 8811 	msr	BASEPRI, r3
 800700c:	f3bf 8f6f 	isb	sy
 8007010:	f3bf 8f4f 	dsb	sy
 8007014:	603b      	str	r3, [r7, #0]
}
 8007016:	bf00      	nop
 8007018:	e7fe      	b.n	8007018 <vPortValidateInterruptPriority+0x60>
	}
 800701a:	bf00      	nop
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	e000e3f0 	.word	0xe000e3f0
 800702c:	20004444 	.word	0x20004444
 8007030:	e000ed0c 	.word	0xe000ed0c
 8007034:	20004448 	.word	0x20004448

08007038 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b08a      	sub	sp, #40	; 0x28
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007040:	2300      	movs	r3, #0
 8007042:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007044:	f7fe ffdc 	bl	8006000 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007048:	4b5b      	ldr	r3, [pc, #364]	; (80071b8 <pvPortMalloc+0x180>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007050:	f000 f920 	bl	8007294 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007054:	4b59      	ldr	r3, [pc, #356]	; (80071bc <pvPortMalloc+0x184>)
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4013      	ands	r3, r2
 800705c:	2b00      	cmp	r3, #0
 800705e:	f040 8093 	bne.w	8007188 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d01d      	beq.n	80070a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007068:	2208      	movs	r2, #8
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4413      	add	r3, r2
 800706e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f003 0307 	and.w	r3, r3, #7
 8007076:	2b00      	cmp	r3, #0
 8007078:	d014      	beq.n	80070a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f023 0307 	bic.w	r3, r3, #7
 8007080:	3308      	adds	r3, #8
 8007082:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f003 0307 	and.w	r3, r3, #7
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00a      	beq.n	80070a4 <pvPortMalloc+0x6c>
	__asm volatile
 800708e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007092:	f383 8811 	msr	BASEPRI, r3
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	617b      	str	r3, [r7, #20]
}
 80070a0:	bf00      	nop
 80070a2:	e7fe      	b.n	80070a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d06e      	beq.n	8007188 <pvPortMalloc+0x150>
 80070aa:	4b45      	ldr	r3, [pc, #276]	; (80071c0 <pvPortMalloc+0x188>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d869      	bhi.n	8007188 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80070b4:	4b43      	ldr	r3, [pc, #268]	; (80071c4 <pvPortMalloc+0x18c>)
 80070b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80070b8:	4b42      	ldr	r3, [pc, #264]	; (80071c4 <pvPortMalloc+0x18c>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070be:	e004      	b.n	80070ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80070c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80070c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d903      	bls.n	80070dc <pvPortMalloc+0xa4>
 80070d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1f1      	bne.n	80070c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80070dc:	4b36      	ldr	r3, [pc, #216]	; (80071b8 <pvPortMalloc+0x180>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d050      	beq.n	8007188 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80070e6:	6a3b      	ldr	r3, [r7, #32]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2208      	movs	r2, #8
 80070ec:	4413      	add	r3, r2
 80070ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80070f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fa:	685a      	ldr	r2, [r3, #4]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	1ad2      	subs	r2, r2, r3
 8007100:	2308      	movs	r3, #8
 8007102:	005b      	lsls	r3, r3, #1
 8007104:	429a      	cmp	r2, r3
 8007106:	d91f      	bls.n	8007148 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4413      	add	r3, r2
 800710e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	f003 0307 	and.w	r3, r3, #7
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00a      	beq.n	8007130 <pvPortMalloc+0xf8>
	__asm volatile
 800711a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711e:	f383 8811 	msr	BASEPRI, r3
 8007122:	f3bf 8f6f 	isb	sy
 8007126:	f3bf 8f4f 	dsb	sy
 800712a:	613b      	str	r3, [r7, #16]
}
 800712c:	bf00      	nop
 800712e:	e7fe      	b.n	800712e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007132:	685a      	ldr	r2, [r3, #4]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	1ad2      	subs	r2, r2, r3
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800713c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007142:	69b8      	ldr	r0, [r7, #24]
 8007144:	f000 f908 	bl	8007358 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007148:	4b1d      	ldr	r3, [pc, #116]	; (80071c0 <pvPortMalloc+0x188>)
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	4a1b      	ldr	r2, [pc, #108]	; (80071c0 <pvPortMalloc+0x188>)
 8007154:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007156:	4b1a      	ldr	r3, [pc, #104]	; (80071c0 <pvPortMalloc+0x188>)
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	4b1b      	ldr	r3, [pc, #108]	; (80071c8 <pvPortMalloc+0x190>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	429a      	cmp	r2, r3
 8007160:	d203      	bcs.n	800716a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007162:	4b17      	ldr	r3, [pc, #92]	; (80071c0 <pvPortMalloc+0x188>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a18      	ldr	r2, [pc, #96]	; (80071c8 <pvPortMalloc+0x190>)
 8007168:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800716a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716c:	685a      	ldr	r2, [r3, #4]
 800716e:	4b13      	ldr	r3, [pc, #76]	; (80071bc <pvPortMalloc+0x184>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	431a      	orrs	r2, r3
 8007174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007176:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717a:	2200      	movs	r2, #0
 800717c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800717e:	4b13      	ldr	r3, [pc, #76]	; (80071cc <pvPortMalloc+0x194>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	3301      	adds	r3, #1
 8007184:	4a11      	ldr	r2, [pc, #68]	; (80071cc <pvPortMalloc+0x194>)
 8007186:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007188:	f7fe ff48 	bl	800601c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	f003 0307 	and.w	r3, r3, #7
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00a      	beq.n	80071ac <pvPortMalloc+0x174>
	__asm volatile
 8007196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719a:	f383 8811 	msr	BASEPRI, r3
 800719e:	f3bf 8f6f 	isb	sy
 80071a2:	f3bf 8f4f 	dsb	sy
 80071a6:	60fb      	str	r3, [r7, #12]
}
 80071a8:	bf00      	nop
 80071aa:	e7fe      	b.n	80071aa <pvPortMalloc+0x172>
	return pvReturn;
 80071ac:	69fb      	ldr	r3, [r7, #28]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3728      	adds	r7, #40	; 0x28
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	20008054 	.word	0x20008054
 80071bc:	20008068 	.word	0x20008068
 80071c0:	20008058 	.word	0x20008058
 80071c4:	2000804c 	.word	0x2000804c
 80071c8:	2000805c 	.word	0x2000805c
 80071cc:	20008060 	.word	0x20008060

080071d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b086      	sub	sp, #24
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d04d      	beq.n	800727e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80071e2:	2308      	movs	r3, #8
 80071e4:	425b      	negs	r3, r3
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	4413      	add	r3, r2
 80071ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	685a      	ldr	r2, [r3, #4]
 80071f4:	4b24      	ldr	r3, [pc, #144]	; (8007288 <vPortFree+0xb8>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4013      	ands	r3, r2
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d10a      	bne.n	8007214 <vPortFree+0x44>
	__asm volatile
 80071fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007202:	f383 8811 	msr	BASEPRI, r3
 8007206:	f3bf 8f6f 	isb	sy
 800720a:	f3bf 8f4f 	dsb	sy
 800720e:	60fb      	str	r3, [r7, #12]
}
 8007210:	bf00      	nop
 8007212:	e7fe      	b.n	8007212 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00a      	beq.n	8007232 <vPortFree+0x62>
	__asm volatile
 800721c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007220:	f383 8811 	msr	BASEPRI, r3
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	f3bf 8f4f 	dsb	sy
 800722c:	60bb      	str	r3, [r7, #8]
}
 800722e:	bf00      	nop
 8007230:	e7fe      	b.n	8007230 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	685a      	ldr	r2, [r3, #4]
 8007236:	4b14      	ldr	r3, [pc, #80]	; (8007288 <vPortFree+0xb8>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4013      	ands	r3, r2
 800723c:	2b00      	cmp	r3, #0
 800723e:	d01e      	beq.n	800727e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d11a      	bne.n	800727e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	685a      	ldr	r2, [r3, #4]
 800724c:	4b0e      	ldr	r3, [pc, #56]	; (8007288 <vPortFree+0xb8>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	43db      	mvns	r3, r3
 8007252:	401a      	ands	r2, r3
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007258:	f7fe fed2 	bl	8006000 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	685a      	ldr	r2, [r3, #4]
 8007260:	4b0a      	ldr	r3, [pc, #40]	; (800728c <vPortFree+0xbc>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4413      	add	r3, r2
 8007266:	4a09      	ldr	r2, [pc, #36]	; (800728c <vPortFree+0xbc>)
 8007268:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800726a:	6938      	ldr	r0, [r7, #16]
 800726c:	f000 f874 	bl	8007358 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007270:	4b07      	ldr	r3, [pc, #28]	; (8007290 <vPortFree+0xc0>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	3301      	adds	r3, #1
 8007276:	4a06      	ldr	r2, [pc, #24]	; (8007290 <vPortFree+0xc0>)
 8007278:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800727a:	f7fe fecf 	bl	800601c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800727e:	bf00      	nop
 8007280:	3718      	adds	r7, #24
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	20008068 	.word	0x20008068
 800728c:	20008058 	.word	0x20008058
 8007290:	20008064 	.word	0x20008064

08007294 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800729a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800729e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80072a0:	4b27      	ldr	r3, [pc, #156]	; (8007340 <prvHeapInit+0xac>)
 80072a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f003 0307 	and.w	r3, r3, #7
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00c      	beq.n	80072c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	3307      	adds	r3, #7
 80072b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f023 0307 	bic.w	r3, r3, #7
 80072ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	4a1f      	ldr	r2, [pc, #124]	; (8007340 <prvHeapInit+0xac>)
 80072c4:	4413      	add	r3, r2
 80072c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80072cc:	4a1d      	ldr	r2, [pc, #116]	; (8007344 <prvHeapInit+0xb0>)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80072d2:	4b1c      	ldr	r3, [pc, #112]	; (8007344 <prvHeapInit+0xb0>)
 80072d4:	2200      	movs	r2, #0
 80072d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	4413      	add	r3, r2
 80072de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80072e0:	2208      	movs	r2, #8
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	1a9b      	subs	r3, r3, r2
 80072e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f023 0307 	bic.w	r3, r3, #7
 80072ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	4a15      	ldr	r2, [pc, #84]	; (8007348 <prvHeapInit+0xb4>)
 80072f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80072f6:	4b14      	ldr	r3, [pc, #80]	; (8007348 <prvHeapInit+0xb4>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2200      	movs	r2, #0
 80072fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80072fe:	4b12      	ldr	r3, [pc, #72]	; (8007348 <prvHeapInit+0xb4>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2200      	movs	r2, #0
 8007304:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	1ad2      	subs	r2, r2, r3
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007314:	4b0c      	ldr	r3, [pc, #48]	; (8007348 <prvHeapInit+0xb4>)
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	4a0a      	ldr	r2, [pc, #40]	; (800734c <prvHeapInit+0xb8>)
 8007322:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	4a09      	ldr	r2, [pc, #36]	; (8007350 <prvHeapInit+0xbc>)
 800732a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800732c:	4b09      	ldr	r3, [pc, #36]	; (8007354 <prvHeapInit+0xc0>)
 800732e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007332:	601a      	str	r2, [r3, #0]
}
 8007334:	bf00      	nop
 8007336:	3714      	adds	r7, #20
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr
 8007340:	2000444c 	.word	0x2000444c
 8007344:	2000804c 	.word	0x2000804c
 8007348:	20008054 	.word	0x20008054
 800734c:	2000805c 	.word	0x2000805c
 8007350:	20008058 	.word	0x20008058
 8007354:	20008068 	.word	0x20008068

08007358 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007360:	4b28      	ldr	r3, [pc, #160]	; (8007404 <prvInsertBlockIntoFreeList+0xac>)
 8007362:	60fb      	str	r3, [r7, #12]
 8007364:	e002      	b.n	800736c <prvInsertBlockIntoFreeList+0x14>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	60fb      	str	r3, [r7, #12]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	429a      	cmp	r2, r3
 8007374:	d8f7      	bhi.n	8007366 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	68ba      	ldr	r2, [r7, #8]
 8007380:	4413      	add	r3, r2
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	429a      	cmp	r2, r3
 8007386:	d108      	bne.n	800739a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	685a      	ldr	r2, [r3, #4]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	441a      	add	r2, r3
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	441a      	add	r2, r3
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d118      	bne.n	80073e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	4b15      	ldr	r3, [pc, #84]	; (8007408 <prvInsertBlockIntoFreeList+0xb0>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d00d      	beq.n	80073d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	685a      	ldr	r2, [r3, #4]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	441a      	add	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	601a      	str	r2, [r3, #0]
 80073d4:	e008      	b.n	80073e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80073d6:	4b0c      	ldr	r3, [pc, #48]	; (8007408 <prvInsertBlockIntoFreeList+0xb0>)
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	601a      	str	r2, [r3, #0]
 80073de:	e003      	b.n	80073e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d002      	beq.n	80073f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073f6:	bf00      	nop
 80073f8:	3714      	adds	r7, #20
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	2000804c 	.word	0x2000804c
 8007408:	20008054 	.word	0x20008054

0800740c <pow>:
 800740c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800740e:	ed2d 8b02 	vpush	{d8}
 8007412:	eeb0 8a40 	vmov.f32	s16, s0
 8007416:	eef0 8a60 	vmov.f32	s17, s1
 800741a:	ec55 4b11 	vmov	r4, r5, d1
 800741e:	f000 fb73 	bl	8007b08 <__ieee754_pow>
 8007422:	4622      	mov	r2, r4
 8007424:	462b      	mov	r3, r5
 8007426:	4620      	mov	r0, r4
 8007428:	4629      	mov	r1, r5
 800742a:	ec57 6b10 	vmov	r6, r7, d0
 800742e:	f7f9 fb2d 	bl	8000a8c <__aeabi_dcmpun>
 8007432:	2800      	cmp	r0, #0
 8007434:	d13b      	bne.n	80074ae <pow+0xa2>
 8007436:	ec51 0b18 	vmov	r0, r1, d8
 800743a:	2200      	movs	r2, #0
 800743c:	2300      	movs	r3, #0
 800743e:	f7f9 faf3 	bl	8000a28 <__aeabi_dcmpeq>
 8007442:	b1b8      	cbz	r0, 8007474 <pow+0x68>
 8007444:	2200      	movs	r2, #0
 8007446:	2300      	movs	r3, #0
 8007448:	4620      	mov	r0, r4
 800744a:	4629      	mov	r1, r5
 800744c:	f7f9 faec 	bl	8000a28 <__aeabi_dcmpeq>
 8007450:	2800      	cmp	r0, #0
 8007452:	d146      	bne.n	80074e2 <pow+0xd6>
 8007454:	ec45 4b10 	vmov	d0, r4, r5
 8007458:	f000 f89e 	bl	8007598 <finite>
 800745c:	b338      	cbz	r0, 80074ae <pow+0xa2>
 800745e:	2200      	movs	r2, #0
 8007460:	2300      	movs	r3, #0
 8007462:	4620      	mov	r0, r4
 8007464:	4629      	mov	r1, r5
 8007466:	f7f9 fae9 	bl	8000a3c <__aeabi_dcmplt>
 800746a:	b300      	cbz	r0, 80074ae <pow+0xa2>
 800746c:	f001 ff10 	bl	8009290 <__errno>
 8007470:	2322      	movs	r3, #34	; 0x22
 8007472:	e01b      	b.n	80074ac <pow+0xa0>
 8007474:	ec47 6b10 	vmov	d0, r6, r7
 8007478:	f000 f88e 	bl	8007598 <finite>
 800747c:	b9e0      	cbnz	r0, 80074b8 <pow+0xac>
 800747e:	eeb0 0a48 	vmov.f32	s0, s16
 8007482:	eef0 0a68 	vmov.f32	s1, s17
 8007486:	f000 f887 	bl	8007598 <finite>
 800748a:	b1a8      	cbz	r0, 80074b8 <pow+0xac>
 800748c:	ec45 4b10 	vmov	d0, r4, r5
 8007490:	f000 f882 	bl	8007598 <finite>
 8007494:	b180      	cbz	r0, 80074b8 <pow+0xac>
 8007496:	4632      	mov	r2, r6
 8007498:	463b      	mov	r3, r7
 800749a:	4630      	mov	r0, r6
 800749c:	4639      	mov	r1, r7
 800749e:	f7f9 faf5 	bl	8000a8c <__aeabi_dcmpun>
 80074a2:	2800      	cmp	r0, #0
 80074a4:	d0e2      	beq.n	800746c <pow+0x60>
 80074a6:	f001 fef3 	bl	8009290 <__errno>
 80074aa:	2321      	movs	r3, #33	; 0x21
 80074ac:	6003      	str	r3, [r0, #0]
 80074ae:	ecbd 8b02 	vpop	{d8}
 80074b2:	ec47 6b10 	vmov	d0, r6, r7
 80074b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074b8:	2200      	movs	r2, #0
 80074ba:	2300      	movs	r3, #0
 80074bc:	4630      	mov	r0, r6
 80074be:	4639      	mov	r1, r7
 80074c0:	f7f9 fab2 	bl	8000a28 <__aeabi_dcmpeq>
 80074c4:	2800      	cmp	r0, #0
 80074c6:	d0f2      	beq.n	80074ae <pow+0xa2>
 80074c8:	eeb0 0a48 	vmov.f32	s0, s16
 80074cc:	eef0 0a68 	vmov.f32	s1, s17
 80074d0:	f000 f862 	bl	8007598 <finite>
 80074d4:	2800      	cmp	r0, #0
 80074d6:	d0ea      	beq.n	80074ae <pow+0xa2>
 80074d8:	ec45 4b10 	vmov	d0, r4, r5
 80074dc:	f000 f85c 	bl	8007598 <finite>
 80074e0:	e7c3      	b.n	800746a <pow+0x5e>
 80074e2:	4f01      	ldr	r7, [pc, #4]	; (80074e8 <pow+0xdc>)
 80074e4:	2600      	movs	r6, #0
 80074e6:	e7e2      	b.n	80074ae <pow+0xa2>
 80074e8:	3ff00000 	.word	0x3ff00000
 80074ec:	00000000 	.word	0x00000000

080074f0 <cos>:
 80074f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074f2:	ec53 2b10 	vmov	r2, r3, d0
 80074f6:	4826      	ldr	r0, [pc, #152]	; (8007590 <cos+0xa0>)
 80074f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80074fc:	4281      	cmp	r1, r0
 80074fe:	dc06      	bgt.n	800750e <cos+0x1e>
 8007500:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007588 <cos+0x98>
 8007504:	b005      	add	sp, #20
 8007506:	f85d eb04 	ldr.w	lr, [sp], #4
 800750a:	f000 b975 	b.w	80077f8 <__kernel_cos>
 800750e:	4821      	ldr	r0, [pc, #132]	; (8007594 <cos+0xa4>)
 8007510:	4281      	cmp	r1, r0
 8007512:	dd09      	ble.n	8007528 <cos+0x38>
 8007514:	ee10 0a10 	vmov	r0, s0
 8007518:	4619      	mov	r1, r3
 800751a:	f7f8 fe65 	bl	80001e8 <__aeabi_dsub>
 800751e:	ec41 0b10 	vmov	d0, r0, r1
 8007522:	b005      	add	sp, #20
 8007524:	f85d fb04 	ldr.w	pc, [sp], #4
 8007528:	4668      	mov	r0, sp
 800752a:	f001 f819 	bl	8008560 <__ieee754_rem_pio2>
 800752e:	f000 0003 	and.w	r0, r0, #3
 8007532:	2801      	cmp	r0, #1
 8007534:	d00b      	beq.n	800754e <cos+0x5e>
 8007536:	2802      	cmp	r0, #2
 8007538:	d016      	beq.n	8007568 <cos+0x78>
 800753a:	b9e0      	cbnz	r0, 8007576 <cos+0x86>
 800753c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007540:	ed9d 0b00 	vldr	d0, [sp]
 8007544:	f000 f958 	bl	80077f8 <__kernel_cos>
 8007548:	ec51 0b10 	vmov	r0, r1, d0
 800754c:	e7e7      	b.n	800751e <cos+0x2e>
 800754e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007552:	ed9d 0b00 	vldr	d0, [sp]
 8007556:	f000 fa17 	bl	8007988 <__kernel_sin>
 800755a:	ec53 2b10 	vmov	r2, r3, d0
 800755e:	ee10 0a10 	vmov	r0, s0
 8007562:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007566:	e7da      	b.n	800751e <cos+0x2e>
 8007568:	ed9d 1b02 	vldr	d1, [sp, #8]
 800756c:	ed9d 0b00 	vldr	d0, [sp]
 8007570:	f000 f942 	bl	80077f8 <__kernel_cos>
 8007574:	e7f1      	b.n	800755a <cos+0x6a>
 8007576:	ed9d 1b02 	vldr	d1, [sp, #8]
 800757a:	ed9d 0b00 	vldr	d0, [sp]
 800757e:	2001      	movs	r0, #1
 8007580:	f000 fa02 	bl	8007988 <__kernel_sin>
 8007584:	e7e0      	b.n	8007548 <cos+0x58>
 8007586:	bf00      	nop
	...
 8007590:	3fe921fb 	.word	0x3fe921fb
 8007594:	7fefffff 	.word	0x7fefffff

08007598 <finite>:
 8007598:	b082      	sub	sp, #8
 800759a:	ed8d 0b00 	vstr	d0, [sp]
 800759e:	9801      	ldr	r0, [sp, #4]
 80075a0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80075a4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80075a8:	0fc0      	lsrs	r0, r0, #31
 80075aa:	b002      	add	sp, #8
 80075ac:	4770      	bx	lr
	...

080075b0 <__ieee754_sqrt>:
 80075b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075b4:	ec55 4b10 	vmov	r4, r5, d0
 80075b8:	4e67      	ldr	r6, [pc, #412]	; (8007758 <__ieee754_sqrt+0x1a8>)
 80075ba:	43ae      	bics	r6, r5
 80075bc:	ee10 0a10 	vmov	r0, s0
 80075c0:	ee10 2a10 	vmov	r2, s0
 80075c4:	4629      	mov	r1, r5
 80075c6:	462b      	mov	r3, r5
 80075c8:	d10d      	bne.n	80075e6 <__ieee754_sqrt+0x36>
 80075ca:	f7f8 ffc5 	bl	8000558 <__aeabi_dmul>
 80075ce:	4602      	mov	r2, r0
 80075d0:	460b      	mov	r3, r1
 80075d2:	4620      	mov	r0, r4
 80075d4:	4629      	mov	r1, r5
 80075d6:	f7f8 fe09 	bl	80001ec <__adddf3>
 80075da:	4604      	mov	r4, r0
 80075dc:	460d      	mov	r5, r1
 80075de:	ec45 4b10 	vmov	d0, r4, r5
 80075e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075e6:	2d00      	cmp	r5, #0
 80075e8:	dc0b      	bgt.n	8007602 <__ieee754_sqrt+0x52>
 80075ea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80075ee:	4326      	orrs	r6, r4
 80075f0:	d0f5      	beq.n	80075de <__ieee754_sqrt+0x2e>
 80075f2:	b135      	cbz	r5, 8007602 <__ieee754_sqrt+0x52>
 80075f4:	f7f8 fdf8 	bl	80001e8 <__aeabi_dsub>
 80075f8:	4602      	mov	r2, r0
 80075fa:	460b      	mov	r3, r1
 80075fc:	f7f9 f8d6 	bl	80007ac <__aeabi_ddiv>
 8007600:	e7eb      	b.n	80075da <__ieee754_sqrt+0x2a>
 8007602:	1509      	asrs	r1, r1, #20
 8007604:	f000 808d 	beq.w	8007722 <__ieee754_sqrt+0x172>
 8007608:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800760c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8007610:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007614:	07c9      	lsls	r1, r1, #31
 8007616:	bf5c      	itt	pl
 8007618:	005b      	lslpl	r3, r3, #1
 800761a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800761e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007622:	bf58      	it	pl
 8007624:	0052      	lslpl	r2, r2, #1
 8007626:	2500      	movs	r5, #0
 8007628:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800762c:	1076      	asrs	r6, r6, #1
 800762e:	0052      	lsls	r2, r2, #1
 8007630:	f04f 0e16 	mov.w	lr, #22
 8007634:	46ac      	mov	ip, r5
 8007636:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800763a:	eb0c 0001 	add.w	r0, ip, r1
 800763e:	4298      	cmp	r0, r3
 8007640:	bfde      	ittt	le
 8007642:	1a1b      	suble	r3, r3, r0
 8007644:	eb00 0c01 	addle.w	ip, r0, r1
 8007648:	186d      	addle	r5, r5, r1
 800764a:	005b      	lsls	r3, r3, #1
 800764c:	f1be 0e01 	subs.w	lr, lr, #1
 8007650:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007654:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007658:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800765c:	d1ed      	bne.n	800763a <__ieee754_sqrt+0x8a>
 800765e:	4674      	mov	r4, lr
 8007660:	2720      	movs	r7, #32
 8007662:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007666:	4563      	cmp	r3, ip
 8007668:	eb01 000e 	add.w	r0, r1, lr
 800766c:	dc02      	bgt.n	8007674 <__ieee754_sqrt+0xc4>
 800766e:	d113      	bne.n	8007698 <__ieee754_sqrt+0xe8>
 8007670:	4290      	cmp	r0, r2
 8007672:	d811      	bhi.n	8007698 <__ieee754_sqrt+0xe8>
 8007674:	2800      	cmp	r0, #0
 8007676:	eb00 0e01 	add.w	lr, r0, r1
 800767a:	da57      	bge.n	800772c <__ieee754_sqrt+0x17c>
 800767c:	f1be 0f00 	cmp.w	lr, #0
 8007680:	db54      	blt.n	800772c <__ieee754_sqrt+0x17c>
 8007682:	f10c 0801 	add.w	r8, ip, #1
 8007686:	eba3 030c 	sub.w	r3, r3, ip
 800768a:	4290      	cmp	r0, r2
 800768c:	bf88      	it	hi
 800768e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007692:	1a12      	subs	r2, r2, r0
 8007694:	440c      	add	r4, r1
 8007696:	46c4      	mov	ip, r8
 8007698:	005b      	lsls	r3, r3, #1
 800769a:	3f01      	subs	r7, #1
 800769c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80076a0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80076a4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80076a8:	d1dd      	bne.n	8007666 <__ieee754_sqrt+0xb6>
 80076aa:	4313      	orrs	r3, r2
 80076ac:	d01b      	beq.n	80076e6 <__ieee754_sqrt+0x136>
 80076ae:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800775c <__ieee754_sqrt+0x1ac>
 80076b2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8007760 <__ieee754_sqrt+0x1b0>
 80076b6:	e9da 0100 	ldrd	r0, r1, [sl]
 80076ba:	e9db 2300 	ldrd	r2, r3, [fp]
 80076be:	f7f8 fd93 	bl	80001e8 <__aeabi_dsub>
 80076c2:	e9da 8900 	ldrd	r8, r9, [sl]
 80076c6:	4602      	mov	r2, r0
 80076c8:	460b      	mov	r3, r1
 80076ca:	4640      	mov	r0, r8
 80076cc:	4649      	mov	r1, r9
 80076ce:	f7f9 f9bf 	bl	8000a50 <__aeabi_dcmple>
 80076d2:	b140      	cbz	r0, 80076e6 <__ieee754_sqrt+0x136>
 80076d4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80076d8:	e9da 0100 	ldrd	r0, r1, [sl]
 80076dc:	e9db 2300 	ldrd	r2, r3, [fp]
 80076e0:	d126      	bne.n	8007730 <__ieee754_sqrt+0x180>
 80076e2:	3501      	adds	r5, #1
 80076e4:	463c      	mov	r4, r7
 80076e6:	106a      	asrs	r2, r5, #1
 80076e8:	0863      	lsrs	r3, r4, #1
 80076ea:	07e9      	lsls	r1, r5, #31
 80076ec:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80076f0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80076f4:	bf48      	it	mi
 80076f6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80076fa:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80076fe:	461c      	mov	r4, r3
 8007700:	e76d      	b.n	80075de <__ieee754_sqrt+0x2e>
 8007702:	0ad3      	lsrs	r3, r2, #11
 8007704:	3815      	subs	r0, #21
 8007706:	0552      	lsls	r2, r2, #21
 8007708:	2b00      	cmp	r3, #0
 800770a:	d0fa      	beq.n	8007702 <__ieee754_sqrt+0x152>
 800770c:	02dc      	lsls	r4, r3, #11
 800770e:	d50a      	bpl.n	8007726 <__ieee754_sqrt+0x176>
 8007710:	f1c1 0420 	rsb	r4, r1, #32
 8007714:	fa22 f404 	lsr.w	r4, r2, r4
 8007718:	1e4d      	subs	r5, r1, #1
 800771a:	408a      	lsls	r2, r1
 800771c:	4323      	orrs	r3, r4
 800771e:	1b41      	subs	r1, r0, r5
 8007720:	e772      	b.n	8007608 <__ieee754_sqrt+0x58>
 8007722:	4608      	mov	r0, r1
 8007724:	e7f0      	b.n	8007708 <__ieee754_sqrt+0x158>
 8007726:	005b      	lsls	r3, r3, #1
 8007728:	3101      	adds	r1, #1
 800772a:	e7ef      	b.n	800770c <__ieee754_sqrt+0x15c>
 800772c:	46e0      	mov	r8, ip
 800772e:	e7aa      	b.n	8007686 <__ieee754_sqrt+0xd6>
 8007730:	f7f8 fd5c 	bl	80001ec <__adddf3>
 8007734:	e9da 8900 	ldrd	r8, r9, [sl]
 8007738:	4602      	mov	r2, r0
 800773a:	460b      	mov	r3, r1
 800773c:	4640      	mov	r0, r8
 800773e:	4649      	mov	r1, r9
 8007740:	f7f9 f97c 	bl	8000a3c <__aeabi_dcmplt>
 8007744:	b120      	cbz	r0, 8007750 <__ieee754_sqrt+0x1a0>
 8007746:	1ca0      	adds	r0, r4, #2
 8007748:	bf08      	it	eq
 800774a:	3501      	addeq	r5, #1
 800774c:	3402      	adds	r4, #2
 800774e:	e7ca      	b.n	80076e6 <__ieee754_sqrt+0x136>
 8007750:	3401      	adds	r4, #1
 8007752:	f024 0401 	bic.w	r4, r4, #1
 8007756:	e7c6      	b.n	80076e6 <__ieee754_sqrt+0x136>
 8007758:	7ff00000 	.word	0x7ff00000
 800775c:	20000018 	.word	0x20000018
 8007760:	20000020 	.word	0x20000020

08007764 <round>:
 8007764:	ec53 2b10 	vmov	r2, r3, d0
 8007768:	b570      	push	{r4, r5, r6, lr}
 800776a:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800776e:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 8007772:	2813      	cmp	r0, #19
 8007774:	ee10 5a10 	vmov	r5, s0
 8007778:	4619      	mov	r1, r3
 800777a:	dc18      	bgt.n	80077ae <round+0x4a>
 800777c:	2800      	cmp	r0, #0
 800777e:	da09      	bge.n	8007794 <round+0x30>
 8007780:	3001      	adds	r0, #1
 8007782:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8007786:	d103      	bne.n	8007790 <round+0x2c>
 8007788:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800778c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007790:	2300      	movs	r3, #0
 8007792:	e02a      	b.n	80077ea <round+0x86>
 8007794:	4c16      	ldr	r4, [pc, #88]	; (80077f0 <round+0x8c>)
 8007796:	4104      	asrs	r4, r0
 8007798:	ea03 0604 	and.w	r6, r3, r4
 800779c:	4316      	orrs	r6, r2
 800779e:	d011      	beq.n	80077c4 <round+0x60>
 80077a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80077a4:	4103      	asrs	r3, r0
 80077a6:	440b      	add	r3, r1
 80077a8:	ea23 0104 	bic.w	r1, r3, r4
 80077ac:	e7f0      	b.n	8007790 <round+0x2c>
 80077ae:	2833      	cmp	r0, #51	; 0x33
 80077b0:	dd0b      	ble.n	80077ca <round+0x66>
 80077b2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80077b6:	d105      	bne.n	80077c4 <round+0x60>
 80077b8:	ee10 0a10 	vmov	r0, s0
 80077bc:	f7f8 fd16 	bl	80001ec <__adddf3>
 80077c0:	4602      	mov	r2, r0
 80077c2:	460b      	mov	r3, r1
 80077c4:	ec43 2b10 	vmov	d0, r2, r3
 80077c8:	bd70      	pop	{r4, r5, r6, pc}
 80077ca:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 80077ce:	f04f 34ff 	mov.w	r4, #4294967295
 80077d2:	40f4      	lsrs	r4, r6
 80077d4:	4214      	tst	r4, r2
 80077d6:	d0f5      	beq.n	80077c4 <round+0x60>
 80077d8:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 80077dc:	2301      	movs	r3, #1
 80077de:	4083      	lsls	r3, r0
 80077e0:	195b      	adds	r3, r3, r5
 80077e2:	bf28      	it	cs
 80077e4:	3101      	addcs	r1, #1
 80077e6:	ea23 0304 	bic.w	r3, r3, r4
 80077ea:	461a      	mov	r2, r3
 80077ec:	460b      	mov	r3, r1
 80077ee:	e7e9      	b.n	80077c4 <round+0x60>
 80077f0:	000fffff 	.word	0x000fffff
 80077f4:	00000000 	.word	0x00000000

080077f8 <__kernel_cos>:
 80077f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077fc:	ec57 6b10 	vmov	r6, r7, d0
 8007800:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007804:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007808:	ed8d 1b00 	vstr	d1, [sp]
 800780c:	da07      	bge.n	800781e <__kernel_cos+0x26>
 800780e:	ee10 0a10 	vmov	r0, s0
 8007812:	4639      	mov	r1, r7
 8007814:	f7f9 f950 	bl	8000ab8 <__aeabi_d2iz>
 8007818:	2800      	cmp	r0, #0
 800781a:	f000 8088 	beq.w	800792e <__kernel_cos+0x136>
 800781e:	4632      	mov	r2, r6
 8007820:	463b      	mov	r3, r7
 8007822:	4630      	mov	r0, r6
 8007824:	4639      	mov	r1, r7
 8007826:	f7f8 fe97 	bl	8000558 <__aeabi_dmul>
 800782a:	4b51      	ldr	r3, [pc, #324]	; (8007970 <__kernel_cos+0x178>)
 800782c:	2200      	movs	r2, #0
 800782e:	4604      	mov	r4, r0
 8007830:	460d      	mov	r5, r1
 8007832:	f7f8 fe91 	bl	8000558 <__aeabi_dmul>
 8007836:	a340      	add	r3, pc, #256	; (adr r3, 8007938 <__kernel_cos+0x140>)
 8007838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783c:	4682      	mov	sl, r0
 800783e:	468b      	mov	fp, r1
 8007840:	4620      	mov	r0, r4
 8007842:	4629      	mov	r1, r5
 8007844:	f7f8 fe88 	bl	8000558 <__aeabi_dmul>
 8007848:	a33d      	add	r3, pc, #244	; (adr r3, 8007940 <__kernel_cos+0x148>)
 800784a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784e:	f7f8 fccd 	bl	80001ec <__adddf3>
 8007852:	4622      	mov	r2, r4
 8007854:	462b      	mov	r3, r5
 8007856:	f7f8 fe7f 	bl	8000558 <__aeabi_dmul>
 800785a:	a33b      	add	r3, pc, #236	; (adr r3, 8007948 <__kernel_cos+0x150>)
 800785c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007860:	f7f8 fcc2 	bl	80001e8 <__aeabi_dsub>
 8007864:	4622      	mov	r2, r4
 8007866:	462b      	mov	r3, r5
 8007868:	f7f8 fe76 	bl	8000558 <__aeabi_dmul>
 800786c:	a338      	add	r3, pc, #224	; (adr r3, 8007950 <__kernel_cos+0x158>)
 800786e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007872:	f7f8 fcbb 	bl	80001ec <__adddf3>
 8007876:	4622      	mov	r2, r4
 8007878:	462b      	mov	r3, r5
 800787a:	f7f8 fe6d 	bl	8000558 <__aeabi_dmul>
 800787e:	a336      	add	r3, pc, #216	; (adr r3, 8007958 <__kernel_cos+0x160>)
 8007880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007884:	f7f8 fcb0 	bl	80001e8 <__aeabi_dsub>
 8007888:	4622      	mov	r2, r4
 800788a:	462b      	mov	r3, r5
 800788c:	f7f8 fe64 	bl	8000558 <__aeabi_dmul>
 8007890:	a333      	add	r3, pc, #204	; (adr r3, 8007960 <__kernel_cos+0x168>)
 8007892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007896:	f7f8 fca9 	bl	80001ec <__adddf3>
 800789a:	4622      	mov	r2, r4
 800789c:	462b      	mov	r3, r5
 800789e:	f7f8 fe5b 	bl	8000558 <__aeabi_dmul>
 80078a2:	4622      	mov	r2, r4
 80078a4:	462b      	mov	r3, r5
 80078a6:	f7f8 fe57 	bl	8000558 <__aeabi_dmul>
 80078aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078ae:	4604      	mov	r4, r0
 80078b0:	460d      	mov	r5, r1
 80078b2:	4630      	mov	r0, r6
 80078b4:	4639      	mov	r1, r7
 80078b6:	f7f8 fe4f 	bl	8000558 <__aeabi_dmul>
 80078ba:	460b      	mov	r3, r1
 80078bc:	4602      	mov	r2, r0
 80078be:	4629      	mov	r1, r5
 80078c0:	4620      	mov	r0, r4
 80078c2:	f7f8 fc91 	bl	80001e8 <__aeabi_dsub>
 80078c6:	4b2b      	ldr	r3, [pc, #172]	; (8007974 <__kernel_cos+0x17c>)
 80078c8:	4598      	cmp	r8, r3
 80078ca:	4606      	mov	r6, r0
 80078cc:	460f      	mov	r7, r1
 80078ce:	dc10      	bgt.n	80078f2 <__kernel_cos+0xfa>
 80078d0:	4602      	mov	r2, r0
 80078d2:	460b      	mov	r3, r1
 80078d4:	4650      	mov	r0, sl
 80078d6:	4659      	mov	r1, fp
 80078d8:	f7f8 fc86 	bl	80001e8 <__aeabi_dsub>
 80078dc:	460b      	mov	r3, r1
 80078de:	4926      	ldr	r1, [pc, #152]	; (8007978 <__kernel_cos+0x180>)
 80078e0:	4602      	mov	r2, r0
 80078e2:	2000      	movs	r0, #0
 80078e4:	f7f8 fc80 	bl	80001e8 <__aeabi_dsub>
 80078e8:	ec41 0b10 	vmov	d0, r0, r1
 80078ec:	b003      	add	sp, #12
 80078ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078f2:	4b22      	ldr	r3, [pc, #136]	; (800797c <__kernel_cos+0x184>)
 80078f4:	4920      	ldr	r1, [pc, #128]	; (8007978 <__kernel_cos+0x180>)
 80078f6:	4598      	cmp	r8, r3
 80078f8:	bfcc      	ite	gt
 80078fa:	4d21      	ldrgt	r5, [pc, #132]	; (8007980 <__kernel_cos+0x188>)
 80078fc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007900:	2400      	movs	r4, #0
 8007902:	4622      	mov	r2, r4
 8007904:	462b      	mov	r3, r5
 8007906:	2000      	movs	r0, #0
 8007908:	f7f8 fc6e 	bl	80001e8 <__aeabi_dsub>
 800790c:	4622      	mov	r2, r4
 800790e:	4680      	mov	r8, r0
 8007910:	4689      	mov	r9, r1
 8007912:	462b      	mov	r3, r5
 8007914:	4650      	mov	r0, sl
 8007916:	4659      	mov	r1, fp
 8007918:	f7f8 fc66 	bl	80001e8 <__aeabi_dsub>
 800791c:	4632      	mov	r2, r6
 800791e:	463b      	mov	r3, r7
 8007920:	f7f8 fc62 	bl	80001e8 <__aeabi_dsub>
 8007924:	4602      	mov	r2, r0
 8007926:	460b      	mov	r3, r1
 8007928:	4640      	mov	r0, r8
 800792a:	4649      	mov	r1, r9
 800792c:	e7da      	b.n	80078e4 <__kernel_cos+0xec>
 800792e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007968 <__kernel_cos+0x170>
 8007932:	e7db      	b.n	80078ec <__kernel_cos+0xf4>
 8007934:	f3af 8000 	nop.w
 8007938:	be8838d4 	.word	0xbe8838d4
 800793c:	bda8fae9 	.word	0xbda8fae9
 8007940:	bdb4b1c4 	.word	0xbdb4b1c4
 8007944:	3e21ee9e 	.word	0x3e21ee9e
 8007948:	809c52ad 	.word	0x809c52ad
 800794c:	3e927e4f 	.word	0x3e927e4f
 8007950:	19cb1590 	.word	0x19cb1590
 8007954:	3efa01a0 	.word	0x3efa01a0
 8007958:	16c15177 	.word	0x16c15177
 800795c:	3f56c16c 	.word	0x3f56c16c
 8007960:	5555554c 	.word	0x5555554c
 8007964:	3fa55555 	.word	0x3fa55555
 8007968:	00000000 	.word	0x00000000
 800796c:	3ff00000 	.word	0x3ff00000
 8007970:	3fe00000 	.word	0x3fe00000
 8007974:	3fd33332 	.word	0x3fd33332
 8007978:	3ff00000 	.word	0x3ff00000
 800797c:	3fe90000 	.word	0x3fe90000
 8007980:	3fd20000 	.word	0x3fd20000
 8007984:	00000000 	.word	0x00000000

08007988 <__kernel_sin>:
 8007988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800798c:	ed2d 8b04 	vpush	{d8-d9}
 8007990:	eeb0 8a41 	vmov.f32	s16, s2
 8007994:	eef0 8a61 	vmov.f32	s17, s3
 8007998:	ec55 4b10 	vmov	r4, r5, d0
 800799c:	b083      	sub	sp, #12
 800799e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80079a2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80079a6:	9001      	str	r0, [sp, #4]
 80079a8:	da06      	bge.n	80079b8 <__kernel_sin+0x30>
 80079aa:	ee10 0a10 	vmov	r0, s0
 80079ae:	4629      	mov	r1, r5
 80079b0:	f7f9 f882 	bl	8000ab8 <__aeabi_d2iz>
 80079b4:	2800      	cmp	r0, #0
 80079b6:	d051      	beq.n	8007a5c <__kernel_sin+0xd4>
 80079b8:	4622      	mov	r2, r4
 80079ba:	462b      	mov	r3, r5
 80079bc:	4620      	mov	r0, r4
 80079be:	4629      	mov	r1, r5
 80079c0:	f7f8 fdca 	bl	8000558 <__aeabi_dmul>
 80079c4:	4682      	mov	sl, r0
 80079c6:	468b      	mov	fp, r1
 80079c8:	4602      	mov	r2, r0
 80079ca:	460b      	mov	r3, r1
 80079cc:	4620      	mov	r0, r4
 80079ce:	4629      	mov	r1, r5
 80079d0:	f7f8 fdc2 	bl	8000558 <__aeabi_dmul>
 80079d4:	a341      	add	r3, pc, #260	; (adr r3, 8007adc <__kernel_sin+0x154>)
 80079d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079da:	4680      	mov	r8, r0
 80079dc:	4689      	mov	r9, r1
 80079de:	4650      	mov	r0, sl
 80079e0:	4659      	mov	r1, fp
 80079e2:	f7f8 fdb9 	bl	8000558 <__aeabi_dmul>
 80079e6:	a33f      	add	r3, pc, #252	; (adr r3, 8007ae4 <__kernel_sin+0x15c>)
 80079e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ec:	f7f8 fbfc 	bl	80001e8 <__aeabi_dsub>
 80079f0:	4652      	mov	r2, sl
 80079f2:	465b      	mov	r3, fp
 80079f4:	f7f8 fdb0 	bl	8000558 <__aeabi_dmul>
 80079f8:	a33c      	add	r3, pc, #240	; (adr r3, 8007aec <__kernel_sin+0x164>)
 80079fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fe:	f7f8 fbf5 	bl	80001ec <__adddf3>
 8007a02:	4652      	mov	r2, sl
 8007a04:	465b      	mov	r3, fp
 8007a06:	f7f8 fda7 	bl	8000558 <__aeabi_dmul>
 8007a0a:	a33a      	add	r3, pc, #232	; (adr r3, 8007af4 <__kernel_sin+0x16c>)
 8007a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a10:	f7f8 fbea 	bl	80001e8 <__aeabi_dsub>
 8007a14:	4652      	mov	r2, sl
 8007a16:	465b      	mov	r3, fp
 8007a18:	f7f8 fd9e 	bl	8000558 <__aeabi_dmul>
 8007a1c:	a337      	add	r3, pc, #220	; (adr r3, 8007afc <__kernel_sin+0x174>)
 8007a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a22:	f7f8 fbe3 	bl	80001ec <__adddf3>
 8007a26:	9b01      	ldr	r3, [sp, #4]
 8007a28:	4606      	mov	r6, r0
 8007a2a:	460f      	mov	r7, r1
 8007a2c:	b9eb      	cbnz	r3, 8007a6a <__kernel_sin+0xe2>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	460b      	mov	r3, r1
 8007a32:	4650      	mov	r0, sl
 8007a34:	4659      	mov	r1, fp
 8007a36:	f7f8 fd8f 	bl	8000558 <__aeabi_dmul>
 8007a3a:	a325      	add	r3, pc, #148	; (adr r3, 8007ad0 <__kernel_sin+0x148>)
 8007a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a40:	f7f8 fbd2 	bl	80001e8 <__aeabi_dsub>
 8007a44:	4642      	mov	r2, r8
 8007a46:	464b      	mov	r3, r9
 8007a48:	f7f8 fd86 	bl	8000558 <__aeabi_dmul>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	460b      	mov	r3, r1
 8007a50:	4620      	mov	r0, r4
 8007a52:	4629      	mov	r1, r5
 8007a54:	f7f8 fbca 	bl	80001ec <__adddf3>
 8007a58:	4604      	mov	r4, r0
 8007a5a:	460d      	mov	r5, r1
 8007a5c:	ec45 4b10 	vmov	d0, r4, r5
 8007a60:	b003      	add	sp, #12
 8007a62:	ecbd 8b04 	vpop	{d8-d9}
 8007a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a6a:	4b1b      	ldr	r3, [pc, #108]	; (8007ad8 <__kernel_sin+0x150>)
 8007a6c:	ec51 0b18 	vmov	r0, r1, d8
 8007a70:	2200      	movs	r2, #0
 8007a72:	f7f8 fd71 	bl	8000558 <__aeabi_dmul>
 8007a76:	4632      	mov	r2, r6
 8007a78:	ec41 0b19 	vmov	d9, r0, r1
 8007a7c:	463b      	mov	r3, r7
 8007a7e:	4640      	mov	r0, r8
 8007a80:	4649      	mov	r1, r9
 8007a82:	f7f8 fd69 	bl	8000558 <__aeabi_dmul>
 8007a86:	4602      	mov	r2, r0
 8007a88:	460b      	mov	r3, r1
 8007a8a:	ec51 0b19 	vmov	r0, r1, d9
 8007a8e:	f7f8 fbab 	bl	80001e8 <__aeabi_dsub>
 8007a92:	4652      	mov	r2, sl
 8007a94:	465b      	mov	r3, fp
 8007a96:	f7f8 fd5f 	bl	8000558 <__aeabi_dmul>
 8007a9a:	ec53 2b18 	vmov	r2, r3, d8
 8007a9e:	f7f8 fba3 	bl	80001e8 <__aeabi_dsub>
 8007aa2:	a30b      	add	r3, pc, #44	; (adr r3, 8007ad0 <__kernel_sin+0x148>)
 8007aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa8:	4606      	mov	r6, r0
 8007aaa:	460f      	mov	r7, r1
 8007aac:	4640      	mov	r0, r8
 8007aae:	4649      	mov	r1, r9
 8007ab0:	f7f8 fd52 	bl	8000558 <__aeabi_dmul>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	4630      	mov	r0, r6
 8007aba:	4639      	mov	r1, r7
 8007abc:	f7f8 fb96 	bl	80001ec <__adddf3>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	4629      	mov	r1, r5
 8007ac8:	f7f8 fb8e 	bl	80001e8 <__aeabi_dsub>
 8007acc:	e7c4      	b.n	8007a58 <__kernel_sin+0xd0>
 8007ace:	bf00      	nop
 8007ad0:	55555549 	.word	0x55555549
 8007ad4:	3fc55555 	.word	0x3fc55555
 8007ad8:	3fe00000 	.word	0x3fe00000
 8007adc:	5acfd57c 	.word	0x5acfd57c
 8007ae0:	3de5d93a 	.word	0x3de5d93a
 8007ae4:	8a2b9ceb 	.word	0x8a2b9ceb
 8007ae8:	3e5ae5e6 	.word	0x3e5ae5e6
 8007aec:	57b1fe7d 	.word	0x57b1fe7d
 8007af0:	3ec71de3 	.word	0x3ec71de3
 8007af4:	19c161d5 	.word	0x19c161d5
 8007af8:	3f2a01a0 	.word	0x3f2a01a0
 8007afc:	1110f8a6 	.word	0x1110f8a6
 8007b00:	3f811111 	.word	0x3f811111
 8007b04:	00000000 	.word	0x00000000

08007b08 <__ieee754_pow>:
 8007b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b0c:	ed2d 8b06 	vpush	{d8-d10}
 8007b10:	b089      	sub	sp, #36	; 0x24
 8007b12:	ed8d 1b00 	vstr	d1, [sp]
 8007b16:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007b1a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007b1e:	ea58 0102 	orrs.w	r1, r8, r2
 8007b22:	ec57 6b10 	vmov	r6, r7, d0
 8007b26:	d115      	bne.n	8007b54 <__ieee754_pow+0x4c>
 8007b28:	19b3      	adds	r3, r6, r6
 8007b2a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8007b2e:	4152      	adcs	r2, r2
 8007b30:	4299      	cmp	r1, r3
 8007b32:	4b89      	ldr	r3, [pc, #548]	; (8007d58 <__ieee754_pow+0x250>)
 8007b34:	4193      	sbcs	r3, r2
 8007b36:	f080 84d1 	bcs.w	80084dc <__ieee754_pow+0x9d4>
 8007b3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b3e:	4630      	mov	r0, r6
 8007b40:	4639      	mov	r1, r7
 8007b42:	f7f8 fb53 	bl	80001ec <__adddf3>
 8007b46:	ec41 0b10 	vmov	d0, r0, r1
 8007b4a:	b009      	add	sp, #36	; 0x24
 8007b4c:	ecbd 8b06 	vpop	{d8-d10}
 8007b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b54:	4b81      	ldr	r3, [pc, #516]	; (8007d5c <__ieee754_pow+0x254>)
 8007b56:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007b5a:	429c      	cmp	r4, r3
 8007b5c:	ee10 aa10 	vmov	sl, s0
 8007b60:	463d      	mov	r5, r7
 8007b62:	dc06      	bgt.n	8007b72 <__ieee754_pow+0x6a>
 8007b64:	d101      	bne.n	8007b6a <__ieee754_pow+0x62>
 8007b66:	2e00      	cmp	r6, #0
 8007b68:	d1e7      	bne.n	8007b3a <__ieee754_pow+0x32>
 8007b6a:	4598      	cmp	r8, r3
 8007b6c:	dc01      	bgt.n	8007b72 <__ieee754_pow+0x6a>
 8007b6e:	d10f      	bne.n	8007b90 <__ieee754_pow+0x88>
 8007b70:	b172      	cbz	r2, 8007b90 <__ieee754_pow+0x88>
 8007b72:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007b76:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007b7a:	ea55 050a 	orrs.w	r5, r5, sl
 8007b7e:	d1dc      	bne.n	8007b3a <__ieee754_pow+0x32>
 8007b80:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007b84:	18db      	adds	r3, r3, r3
 8007b86:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007b8a:	4152      	adcs	r2, r2
 8007b8c:	429d      	cmp	r5, r3
 8007b8e:	e7d0      	b.n	8007b32 <__ieee754_pow+0x2a>
 8007b90:	2d00      	cmp	r5, #0
 8007b92:	da3b      	bge.n	8007c0c <__ieee754_pow+0x104>
 8007b94:	4b72      	ldr	r3, [pc, #456]	; (8007d60 <__ieee754_pow+0x258>)
 8007b96:	4598      	cmp	r8, r3
 8007b98:	dc51      	bgt.n	8007c3e <__ieee754_pow+0x136>
 8007b9a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007b9e:	4598      	cmp	r8, r3
 8007ba0:	f340 84ab 	ble.w	80084fa <__ieee754_pow+0x9f2>
 8007ba4:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007ba8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007bac:	2b14      	cmp	r3, #20
 8007bae:	dd0f      	ble.n	8007bd0 <__ieee754_pow+0xc8>
 8007bb0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007bb4:	fa22 f103 	lsr.w	r1, r2, r3
 8007bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	f040 849c 	bne.w	80084fa <__ieee754_pow+0x9f2>
 8007bc2:	f001 0101 	and.w	r1, r1, #1
 8007bc6:	f1c1 0302 	rsb	r3, r1, #2
 8007bca:	9304      	str	r3, [sp, #16]
 8007bcc:	b182      	cbz	r2, 8007bf0 <__ieee754_pow+0xe8>
 8007bce:	e05f      	b.n	8007c90 <__ieee754_pow+0x188>
 8007bd0:	2a00      	cmp	r2, #0
 8007bd2:	d15b      	bne.n	8007c8c <__ieee754_pow+0x184>
 8007bd4:	f1c3 0314 	rsb	r3, r3, #20
 8007bd8:	fa48 f103 	asr.w	r1, r8, r3
 8007bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8007be0:	4543      	cmp	r3, r8
 8007be2:	f040 8487 	bne.w	80084f4 <__ieee754_pow+0x9ec>
 8007be6:	f001 0101 	and.w	r1, r1, #1
 8007bea:	f1c1 0302 	rsb	r3, r1, #2
 8007bee:	9304      	str	r3, [sp, #16]
 8007bf0:	4b5c      	ldr	r3, [pc, #368]	; (8007d64 <__ieee754_pow+0x25c>)
 8007bf2:	4598      	cmp	r8, r3
 8007bf4:	d132      	bne.n	8007c5c <__ieee754_pow+0x154>
 8007bf6:	f1b9 0f00 	cmp.w	r9, #0
 8007bfa:	f280 8477 	bge.w	80084ec <__ieee754_pow+0x9e4>
 8007bfe:	4959      	ldr	r1, [pc, #356]	; (8007d64 <__ieee754_pow+0x25c>)
 8007c00:	4632      	mov	r2, r6
 8007c02:	463b      	mov	r3, r7
 8007c04:	2000      	movs	r0, #0
 8007c06:	f7f8 fdd1 	bl	80007ac <__aeabi_ddiv>
 8007c0a:	e79c      	b.n	8007b46 <__ieee754_pow+0x3e>
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	9304      	str	r3, [sp, #16]
 8007c10:	2a00      	cmp	r2, #0
 8007c12:	d13d      	bne.n	8007c90 <__ieee754_pow+0x188>
 8007c14:	4b51      	ldr	r3, [pc, #324]	; (8007d5c <__ieee754_pow+0x254>)
 8007c16:	4598      	cmp	r8, r3
 8007c18:	d1ea      	bne.n	8007bf0 <__ieee754_pow+0xe8>
 8007c1a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007c1e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007c22:	ea53 030a 	orrs.w	r3, r3, sl
 8007c26:	f000 8459 	beq.w	80084dc <__ieee754_pow+0x9d4>
 8007c2a:	4b4f      	ldr	r3, [pc, #316]	; (8007d68 <__ieee754_pow+0x260>)
 8007c2c:	429c      	cmp	r4, r3
 8007c2e:	dd08      	ble.n	8007c42 <__ieee754_pow+0x13a>
 8007c30:	f1b9 0f00 	cmp.w	r9, #0
 8007c34:	f2c0 8456 	blt.w	80084e4 <__ieee754_pow+0x9dc>
 8007c38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c3c:	e783      	b.n	8007b46 <__ieee754_pow+0x3e>
 8007c3e:	2302      	movs	r3, #2
 8007c40:	e7e5      	b.n	8007c0e <__ieee754_pow+0x106>
 8007c42:	f1b9 0f00 	cmp.w	r9, #0
 8007c46:	f04f 0000 	mov.w	r0, #0
 8007c4a:	f04f 0100 	mov.w	r1, #0
 8007c4e:	f6bf af7a 	bge.w	8007b46 <__ieee754_pow+0x3e>
 8007c52:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007c56:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007c5a:	e774      	b.n	8007b46 <__ieee754_pow+0x3e>
 8007c5c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007c60:	d106      	bne.n	8007c70 <__ieee754_pow+0x168>
 8007c62:	4632      	mov	r2, r6
 8007c64:	463b      	mov	r3, r7
 8007c66:	4630      	mov	r0, r6
 8007c68:	4639      	mov	r1, r7
 8007c6a:	f7f8 fc75 	bl	8000558 <__aeabi_dmul>
 8007c6e:	e76a      	b.n	8007b46 <__ieee754_pow+0x3e>
 8007c70:	4b3e      	ldr	r3, [pc, #248]	; (8007d6c <__ieee754_pow+0x264>)
 8007c72:	4599      	cmp	r9, r3
 8007c74:	d10c      	bne.n	8007c90 <__ieee754_pow+0x188>
 8007c76:	2d00      	cmp	r5, #0
 8007c78:	db0a      	blt.n	8007c90 <__ieee754_pow+0x188>
 8007c7a:	ec47 6b10 	vmov	d0, r6, r7
 8007c7e:	b009      	add	sp, #36	; 0x24
 8007c80:	ecbd 8b06 	vpop	{d8-d10}
 8007c84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c88:	f7ff bc92 	b.w	80075b0 <__ieee754_sqrt>
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	9304      	str	r3, [sp, #16]
 8007c90:	ec47 6b10 	vmov	d0, r6, r7
 8007c94:	f000 fe6a 	bl	800896c <fabs>
 8007c98:	ec51 0b10 	vmov	r0, r1, d0
 8007c9c:	f1ba 0f00 	cmp.w	sl, #0
 8007ca0:	d129      	bne.n	8007cf6 <__ieee754_pow+0x1ee>
 8007ca2:	b124      	cbz	r4, 8007cae <__ieee754_pow+0x1a6>
 8007ca4:	4b2f      	ldr	r3, [pc, #188]	; (8007d64 <__ieee754_pow+0x25c>)
 8007ca6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d123      	bne.n	8007cf6 <__ieee754_pow+0x1ee>
 8007cae:	f1b9 0f00 	cmp.w	r9, #0
 8007cb2:	da05      	bge.n	8007cc0 <__ieee754_pow+0x1b8>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	2000      	movs	r0, #0
 8007cba:	492a      	ldr	r1, [pc, #168]	; (8007d64 <__ieee754_pow+0x25c>)
 8007cbc:	f7f8 fd76 	bl	80007ac <__aeabi_ddiv>
 8007cc0:	2d00      	cmp	r5, #0
 8007cc2:	f6bf af40 	bge.w	8007b46 <__ieee754_pow+0x3e>
 8007cc6:	9b04      	ldr	r3, [sp, #16]
 8007cc8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007ccc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007cd0:	431c      	orrs	r4, r3
 8007cd2:	d108      	bne.n	8007ce6 <__ieee754_pow+0x1de>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	4610      	mov	r0, r2
 8007cda:	4619      	mov	r1, r3
 8007cdc:	f7f8 fa84 	bl	80001e8 <__aeabi_dsub>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	e78f      	b.n	8007c06 <__ieee754_pow+0xfe>
 8007ce6:	9b04      	ldr	r3, [sp, #16]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	f47f af2c 	bne.w	8007b46 <__ieee754_pow+0x3e>
 8007cee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	e727      	b.n	8007b46 <__ieee754_pow+0x3e>
 8007cf6:	0feb      	lsrs	r3, r5, #31
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	9306      	str	r3, [sp, #24]
 8007cfc:	9a06      	ldr	r2, [sp, #24]
 8007cfe:	9b04      	ldr	r3, [sp, #16]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	d102      	bne.n	8007d0a <__ieee754_pow+0x202>
 8007d04:	4632      	mov	r2, r6
 8007d06:	463b      	mov	r3, r7
 8007d08:	e7e6      	b.n	8007cd8 <__ieee754_pow+0x1d0>
 8007d0a:	4b19      	ldr	r3, [pc, #100]	; (8007d70 <__ieee754_pow+0x268>)
 8007d0c:	4598      	cmp	r8, r3
 8007d0e:	f340 80fb 	ble.w	8007f08 <__ieee754_pow+0x400>
 8007d12:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007d16:	4598      	cmp	r8, r3
 8007d18:	4b13      	ldr	r3, [pc, #76]	; (8007d68 <__ieee754_pow+0x260>)
 8007d1a:	dd0c      	ble.n	8007d36 <__ieee754_pow+0x22e>
 8007d1c:	429c      	cmp	r4, r3
 8007d1e:	dc0f      	bgt.n	8007d40 <__ieee754_pow+0x238>
 8007d20:	f1b9 0f00 	cmp.w	r9, #0
 8007d24:	da0f      	bge.n	8007d46 <__ieee754_pow+0x23e>
 8007d26:	2000      	movs	r0, #0
 8007d28:	b009      	add	sp, #36	; 0x24
 8007d2a:	ecbd 8b06 	vpop	{d8-d10}
 8007d2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d32:	f000 beca 	b.w	8008aca <__math_oflow>
 8007d36:	429c      	cmp	r4, r3
 8007d38:	dbf2      	blt.n	8007d20 <__ieee754_pow+0x218>
 8007d3a:	4b0a      	ldr	r3, [pc, #40]	; (8007d64 <__ieee754_pow+0x25c>)
 8007d3c:	429c      	cmp	r4, r3
 8007d3e:	dd19      	ble.n	8007d74 <__ieee754_pow+0x26c>
 8007d40:	f1b9 0f00 	cmp.w	r9, #0
 8007d44:	dcef      	bgt.n	8007d26 <__ieee754_pow+0x21e>
 8007d46:	2000      	movs	r0, #0
 8007d48:	b009      	add	sp, #36	; 0x24
 8007d4a:	ecbd 8b06 	vpop	{d8-d10}
 8007d4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d52:	f000 beb1 	b.w	8008ab8 <__math_uflow>
 8007d56:	bf00      	nop
 8007d58:	fff00000 	.word	0xfff00000
 8007d5c:	7ff00000 	.word	0x7ff00000
 8007d60:	433fffff 	.word	0x433fffff
 8007d64:	3ff00000 	.word	0x3ff00000
 8007d68:	3fefffff 	.word	0x3fefffff
 8007d6c:	3fe00000 	.word	0x3fe00000
 8007d70:	41e00000 	.word	0x41e00000
 8007d74:	4b60      	ldr	r3, [pc, #384]	; (8007ef8 <__ieee754_pow+0x3f0>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	f7f8 fa36 	bl	80001e8 <__aeabi_dsub>
 8007d7c:	a354      	add	r3, pc, #336	; (adr r3, 8007ed0 <__ieee754_pow+0x3c8>)
 8007d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d82:	4604      	mov	r4, r0
 8007d84:	460d      	mov	r5, r1
 8007d86:	f7f8 fbe7 	bl	8000558 <__aeabi_dmul>
 8007d8a:	a353      	add	r3, pc, #332	; (adr r3, 8007ed8 <__ieee754_pow+0x3d0>)
 8007d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d90:	4606      	mov	r6, r0
 8007d92:	460f      	mov	r7, r1
 8007d94:	4620      	mov	r0, r4
 8007d96:	4629      	mov	r1, r5
 8007d98:	f7f8 fbde 	bl	8000558 <__aeabi_dmul>
 8007d9c:	4b57      	ldr	r3, [pc, #348]	; (8007efc <__ieee754_pow+0x3f4>)
 8007d9e:	4682      	mov	sl, r0
 8007da0:	468b      	mov	fp, r1
 8007da2:	2200      	movs	r2, #0
 8007da4:	4620      	mov	r0, r4
 8007da6:	4629      	mov	r1, r5
 8007da8:	f7f8 fbd6 	bl	8000558 <__aeabi_dmul>
 8007dac:	4602      	mov	r2, r0
 8007dae:	460b      	mov	r3, r1
 8007db0:	a14b      	add	r1, pc, #300	; (adr r1, 8007ee0 <__ieee754_pow+0x3d8>)
 8007db2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007db6:	f7f8 fa17 	bl	80001e8 <__aeabi_dsub>
 8007dba:	4622      	mov	r2, r4
 8007dbc:	462b      	mov	r3, r5
 8007dbe:	f7f8 fbcb 	bl	8000558 <__aeabi_dmul>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	2000      	movs	r0, #0
 8007dc8:	494d      	ldr	r1, [pc, #308]	; (8007f00 <__ieee754_pow+0x3f8>)
 8007dca:	f7f8 fa0d 	bl	80001e8 <__aeabi_dsub>
 8007dce:	4622      	mov	r2, r4
 8007dd0:	4680      	mov	r8, r0
 8007dd2:	4689      	mov	r9, r1
 8007dd4:	462b      	mov	r3, r5
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	4629      	mov	r1, r5
 8007dda:	f7f8 fbbd 	bl	8000558 <__aeabi_dmul>
 8007dde:	4602      	mov	r2, r0
 8007de0:	460b      	mov	r3, r1
 8007de2:	4640      	mov	r0, r8
 8007de4:	4649      	mov	r1, r9
 8007de6:	f7f8 fbb7 	bl	8000558 <__aeabi_dmul>
 8007dea:	a33f      	add	r3, pc, #252	; (adr r3, 8007ee8 <__ieee754_pow+0x3e0>)
 8007dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df0:	f7f8 fbb2 	bl	8000558 <__aeabi_dmul>
 8007df4:	4602      	mov	r2, r0
 8007df6:	460b      	mov	r3, r1
 8007df8:	4650      	mov	r0, sl
 8007dfa:	4659      	mov	r1, fp
 8007dfc:	f7f8 f9f4 	bl	80001e8 <__aeabi_dsub>
 8007e00:	4602      	mov	r2, r0
 8007e02:	460b      	mov	r3, r1
 8007e04:	4680      	mov	r8, r0
 8007e06:	4689      	mov	r9, r1
 8007e08:	4630      	mov	r0, r6
 8007e0a:	4639      	mov	r1, r7
 8007e0c:	f7f8 f9ee 	bl	80001ec <__adddf3>
 8007e10:	2000      	movs	r0, #0
 8007e12:	4632      	mov	r2, r6
 8007e14:	463b      	mov	r3, r7
 8007e16:	4604      	mov	r4, r0
 8007e18:	460d      	mov	r5, r1
 8007e1a:	f7f8 f9e5 	bl	80001e8 <__aeabi_dsub>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	460b      	mov	r3, r1
 8007e22:	4640      	mov	r0, r8
 8007e24:	4649      	mov	r1, r9
 8007e26:	f7f8 f9df 	bl	80001e8 <__aeabi_dsub>
 8007e2a:	9b04      	ldr	r3, [sp, #16]
 8007e2c:	9a06      	ldr	r2, [sp, #24]
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	4313      	orrs	r3, r2
 8007e32:	4682      	mov	sl, r0
 8007e34:	468b      	mov	fp, r1
 8007e36:	f040 81e7 	bne.w	8008208 <__ieee754_pow+0x700>
 8007e3a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007ef0 <__ieee754_pow+0x3e8>
 8007e3e:	eeb0 8a47 	vmov.f32	s16, s14
 8007e42:	eef0 8a67 	vmov.f32	s17, s15
 8007e46:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007e4a:	2600      	movs	r6, #0
 8007e4c:	4632      	mov	r2, r6
 8007e4e:	463b      	mov	r3, r7
 8007e50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e54:	f7f8 f9c8 	bl	80001e8 <__aeabi_dsub>
 8007e58:	4622      	mov	r2, r4
 8007e5a:	462b      	mov	r3, r5
 8007e5c:	f7f8 fb7c 	bl	8000558 <__aeabi_dmul>
 8007e60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e64:	4680      	mov	r8, r0
 8007e66:	4689      	mov	r9, r1
 8007e68:	4650      	mov	r0, sl
 8007e6a:	4659      	mov	r1, fp
 8007e6c:	f7f8 fb74 	bl	8000558 <__aeabi_dmul>
 8007e70:	4602      	mov	r2, r0
 8007e72:	460b      	mov	r3, r1
 8007e74:	4640      	mov	r0, r8
 8007e76:	4649      	mov	r1, r9
 8007e78:	f7f8 f9b8 	bl	80001ec <__adddf3>
 8007e7c:	4632      	mov	r2, r6
 8007e7e:	463b      	mov	r3, r7
 8007e80:	4680      	mov	r8, r0
 8007e82:	4689      	mov	r9, r1
 8007e84:	4620      	mov	r0, r4
 8007e86:	4629      	mov	r1, r5
 8007e88:	f7f8 fb66 	bl	8000558 <__aeabi_dmul>
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	4604      	mov	r4, r0
 8007e90:	460d      	mov	r5, r1
 8007e92:	4602      	mov	r2, r0
 8007e94:	4649      	mov	r1, r9
 8007e96:	4640      	mov	r0, r8
 8007e98:	f7f8 f9a8 	bl	80001ec <__adddf3>
 8007e9c:	4b19      	ldr	r3, [pc, #100]	; (8007f04 <__ieee754_pow+0x3fc>)
 8007e9e:	4299      	cmp	r1, r3
 8007ea0:	ec45 4b19 	vmov	d9, r4, r5
 8007ea4:	4606      	mov	r6, r0
 8007ea6:	460f      	mov	r7, r1
 8007ea8:	468b      	mov	fp, r1
 8007eaa:	f340 82f0 	ble.w	800848e <__ieee754_pow+0x986>
 8007eae:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007eb2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007eb6:	4303      	orrs	r3, r0
 8007eb8:	f000 81e4 	beq.w	8008284 <__ieee754_pow+0x77c>
 8007ebc:	ec51 0b18 	vmov	r0, r1, d8
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	f7f8 fdba 	bl	8000a3c <__aeabi_dcmplt>
 8007ec8:	3800      	subs	r0, #0
 8007eca:	bf18      	it	ne
 8007ecc:	2001      	movne	r0, #1
 8007ece:	e72b      	b.n	8007d28 <__ieee754_pow+0x220>
 8007ed0:	60000000 	.word	0x60000000
 8007ed4:	3ff71547 	.word	0x3ff71547
 8007ed8:	f85ddf44 	.word	0xf85ddf44
 8007edc:	3e54ae0b 	.word	0x3e54ae0b
 8007ee0:	55555555 	.word	0x55555555
 8007ee4:	3fd55555 	.word	0x3fd55555
 8007ee8:	652b82fe 	.word	0x652b82fe
 8007eec:	3ff71547 	.word	0x3ff71547
 8007ef0:	00000000 	.word	0x00000000
 8007ef4:	bff00000 	.word	0xbff00000
 8007ef8:	3ff00000 	.word	0x3ff00000
 8007efc:	3fd00000 	.word	0x3fd00000
 8007f00:	3fe00000 	.word	0x3fe00000
 8007f04:	408fffff 	.word	0x408fffff
 8007f08:	4bd5      	ldr	r3, [pc, #852]	; (8008260 <__ieee754_pow+0x758>)
 8007f0a:	402b      	ands	r3, r5
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	b92b      	cbnz	r3, 8007f1c <__ieee754_pow+0x414>
 8007f10:	4bd4      	ldr	r3, [pc, #848]	; (8008264 <__ieee754_pow+0x75c>)
 8007f12:	f7f8 fb21 	bl	8000558 <__aeabi_dmul>
 8007f16:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007f1a:	460c      	mov	r4, r1
 8007f1c:	1523      	asrs	r3, r4, #20
 8007f1e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007f22:	4413      	add	r3, r2
 8007f24:	9305      	str	r3, [sp, #20]
 8007f26:	4bd0      	ldr	r3, [pc, #832]	; (8008268 <__ieee754_pow+0x760>)
 8007f28:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007f2c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007f30:	429c      	cmp	r4, r3
 8007f32:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007f36:	dd08      	ble.n	8007f4a <__ieee754_pow+0x442>
 8007f38:	4bcc      	ldr	r3, [pc, #816]	; (800826c <__ieee754_pow+0x764>)
 8007f3a:	429c      	cmp	r4, r3
 8007f3c:	f340 8162 	ble.w	8008204 <__ieee754_pow+0x6fc>
 8007f40:	9b05      	ldr	r3, [sp, #20]
 8007f42:	3301      	adds	r3, #1
 8007f44:	9305      	str	r3, [sp, #20]
 8007f46:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007f4a:	2400      	movs	r4, #0
 8007f4c:	00e3      	lsls	r3, r4, #3
 8007f4e:	9307      	str	r3, [sp, #28]
 8007f50:	4bc7      	ldr	r3, [pc, #796]	; (8008270 <__ieee754_pow+0x768>)
 8007f52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f56:	ed93 7b00 	vldr	d7, [r3]
 8007f5a:	4629      	mov	r1, r5
 8007f5c:	ec53 2b17 	vmov	r2, r3, d7
 8007f60:	eeb0 9a47 	vmov.f32	s18, s14
 8007f64:	eef0 9a67 	vmov.f32	s19, s15
 8007f68:	4682      	mov	sl, r0
 8007f6a:	f7f8 f93d 	bl	80001e8 <__aeabi_dsub>
 8007f6e:	4652      	mov	r2, sl
 8007f70:	4606      	mov	r6, r0
 8007f72:	460f      	mov	r7, r1
 8007f74:	462b      	mov	r3, r5
 8007f76:	ec51 0b19 	vmov	r0, r1, d9
 8007f7a:	f7f8 f937 	bl	80001ec <__adddf3>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	460b      	mov	r3, r1
 8007f82:	2000      	movs	r0, #0
 8007f84:	49bb      	ldr	r1, [pc, #748]	; (8008274 <__ieee754_pow+0x76c>)
 8007f86:	f7f8 fc11 	bl	80007ac <__aeabi_ddiv>
 8007f8a:	ec41 0b1a 	vmov	d10, r0, r1
 8007f8e:	4602      	mov	r2, r0
 8007f90:	460b      	mov	r3, r1
 8007f92:	4630      	mov	r0, r6
 8007f94:	4639      	mov	r1, r7
 8007f96:	f7f8 fadf 	bl	8000558 <__aeabi_dmul>
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fa0:	9302      	str	r3, [sp, #8]
 8007fa2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007fa6:	46ab      	mov	fp, r5
 8007fa8:	106d      	asrs	r5, r5, #1
 8007faa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007fae:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007fb2:	ec41 0b18 	vmov	d8, r0, r1
 8007fb6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007fba:	2200      	movs	r2, #0
 8007fbc:	4640      	mov	r0, r8
 8007fbe:	4649      	mov	r1, r9
 8007fc0:	4614      	mov	r4, r2
 8007fc2:	461d      	mov	r5, r3
 8007fc4:	f7f8 fac8 	bl	8000558 <__aeabi_dmul>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	4630      	mov	r0, r6
 8007fce:	4639      	mov	r1, r7
 8007fd0:	f7f8 f90a 	bl	80001e8 <__aeabi_dsub>
 8007fd4:	ec53 2b19 	vmov	r2, r3, d9
 8007fd8:	4606      	mov	r6, r0
 8007fda:	460f      	mov	r7, r1
 8007fdc:	4620      	mov	r0, r4
 8007fde:	4629      	mov	r1, r5
 8007fe0:	f7f8 f902 	bl	80001e8 <__aeabi_dsub>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	4650      	mov	r0, sl
 8007fea:	4659      	mov	r1, fp
 8007fec:	f7f8 f8fc 	bl	80001e8 <__aeabi_dsub>
 8007ff0:	4642      	mov	r2, r8
 8007ff2:	464b      	mov	r3, r9
 8007ff4:	f7f8 fab0 	bl	8000558 <__aeabi_dmul>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	4630      	mov	r0, r6
 8007ffe:	4639      	mov	r1, r7
 8008000:	f7f8 f8f2 	bl	80001e8 <__aeabi_dsub>
 8008004:	ec53 2b1a 	vmov	r2, r3, d10
 8008008:	f7f8 faa6 	bl	8000558 <__aeabi_dmul>
 800800c:	ec53 2b18 	vmov	r2, r3, d8
 8008010:	ec41 0b19 	vmov	d9, r0, r1
 8008014:	ec51 0b18 	vmov	r0, r1, d8
 8008018:	f7f8 fa9e 	bl	8000558 <__aeabi_dmul>
 800801c:	a37c      	add	r3, pc, #496	; (adr r3, 8008210 <__ieee754_pow+0x708>)
 800801e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008022:	4604      	mov	r4, r0
 8008024:	460d      	mov	r5, r1
 8008026:	f7f8 fa97 	bl	8000558 <__aeabi_dmul>
 800802a:	a37b      	add	r3, pc, #492	; (adr r3, 8008218 <__ieee754_pow+0x710>)
 800802c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008030:	f7f8 f8dc 	bl	80001ec <__adddf3>
 8008034:	4622      	mov	r2, r4
 8008036:	462b      	mov	r3, r5
 8008038:	f7f8 fa8e 	bl	8000558 <__aeabi_dmul>
 800803c:	a378      	add	r3, pc, #480	; (adr r3, 8008220 <__ieee754_pow+0x718>)
 800803e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008042:	f7f8 f8d3 	bl	80001ec <__adddf3>
 8008046:	4622      	mov	r2, r4
 8008048:	462b      	mov	r3, r5
 800804a:	f7f8 fa85 	bl	8000558 <__aeabi_dmul>
 800804e:	a376      	add	r3, pc, #472	; (adr r3, 8008228 <__ieee754_pow+0x720>)
 8008050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008054:	f7f8 f8ca 	bl	80001ec <__adddf3>
 8008058:	4622      	mov	r2, r4
 800805a:	462b      	mov	r3, r5
 800805c:	f7f8 fa7c 	bl	8000558 <__aeabi_dmul>
 8008060:	a373      	add	r3, pc, #460	; (adr r3, 8008230 <__ieee754_pow+0x728>)
 8008062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008066:	f7f8 f8c1 	bl	80001ec <__adddf3>
 800806a:	4622      	mov	r2, r4
 800806c:	462b      	mov	r3, r5
 800806e:	f7f8 fa73 	bl	8000558 <__aeabi_dmul>
 8008072:	a371      	add	r3, pc, #452	; (adr r3, 8008238 <__ieee754_pow+0x730>)
 8008074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008078:	f7f8 f8b8 	bl	80001ec <__adddf3>
 800807c:	4622      	mov	r2, r4
 800807e:	4606      	mov	r6, r0
 8008080:	460f      	mov	r7, r1
 8008082:	462b      	mov	r3, r5
 8008084:	4620      	mov	r0, r4
 8008086:	4629      	mov	r1, r5
 8008088:	f7f8 fa66 	bl	8000558 <__aeabi_dmul>
 800808c:	4602      	mov	r2, r0
 800808e:	460b      	mov	r3, r1
 8008090:	4630      	mov	r0, r6
 8008092:	4639      	mov	r1, r7
 8008094:	f7f8 fa60 	bl	8000558 <__aeabi_dmul>
 8008098:	4642      	mov	r2, r8
 800809a:	4604      	mov	r4, r0
 800809c:	460d      	mov	r5, r1
 800809e:	464b      	mov	r3, r9
 80080a0:	ec51 0b18 	vmov	r0, r1, d8
 80080a4:	f7f8 f8a2 	bl	80001ec <__adddf3>
 80080a8:	ec53 2b19 	vmov	r2, r3, d9
 80080ac:	f7f8 fa54 	bl	8000558 <__aeabi_dmul>
 80080b0:	4622      	mov	r2, r4
 80080b2:	462b      	mov	r3, r5
 80080b4:	f7f8 f89a 	bl	80001ec <__adddf3>
 80080b8:	4642      	mov	r2, r8
 80080ba:	4682      	mov	sl, r0
 80080bc:	468b      	mov	fp, r1
 80080be:	464b      	mov	r3, r9
 80080c0:	4640      	mov	r0, r8
 80080c2:	4649      	mov	r1, r9
 80080c4:	f7f8 fa48 	bl	8000558 <__aeabi_dmul>
 80080c8:	4b6b      	ldr	r3, [pc, #428]	; (8008278 <__ieee754_pow+0x770>)
 80080ca:	2200      	movs	r2, #0
 80080cc:	4606      	mov	r6, r0
 80080ce:	460f      	mov	r7, r1
 80080d0:	f7f8 f88c 	bl	80001ec <__adddf3>
 80080d4:	4652      	mov	r2, sl
 80080d6:	465b      	mov	r3, fp
 80080d8:	f7f8 f888 	bl	80001ec <__adddf3>
 80080dc:	2000      	movs	r0, #0
 80080de:	4604      	mov	r4, r0
 80080e0:	460d      	mov	r5, r1
 80080e2:	4602      	mov	r2, r0
 80080e4:	460b      	mov	r3, r1
 80080e6:	4640      	mov	r0, r8
 80080e8:	4649      	mov	r1, r9
 80080ea:	f7f8 fa35 	bl	8000558 <__aeabi_dmul>
 80080ee:	4b62      	ldr	r3, [pc, #392]	; (8008278 <__ieee754_pow+0x770>)
 80080f0:	4680      	mov	r8, r0
 80080f2:	4689      	mov	r9, r1
 80080f4:	2200      	movs	r2, #0
 80080f6:	4620      	mov	r0, r4
 80080f8:	4629      	mov	r1, r5
 80080fa:	f7f8 f875 	bl	80001e8 <__aeabi_dsub>
 80080fe:	4632      	mov	r2, r6
 8008100:	463b      	mov	r3, r7
 8008102:	f7f8 f871 	bl	80001e8 <__aeabi_dsub>
 8008106:	4602      	mov	r2, r0
 8008108:	460b      	mov	r3, r1
 800810a:	4650      	mov	r0, sl
 800810c:	4659      	mov	r1, fp
 800810e:	f7f8 f86b 	bl	80001e8 <__aeabi_dsub>
 8008112:	ec53 2b18 	vmov	r2, r3, d8
 8008116:	f7f8 fa1f 	bl	8000558 <__aeabi_dmul>
 800811a:	4622      	mov	r2, r4
 800811c:	4606      	mov	r6, r0
 800811e:	460f      	mov	r7, r1
 8008120:	462b      	mov	r3, r5
 8008122:	ec51 0b19 	vmov	r0, r1, d9
 8008126:	f7f8 fa17 	bl	8000558 <__aeabi_dmul>
 800812a:	4602      	mov	r2, r0
 800812c:	460b      	mov	r3, r1
 800812e:	4630      	mov	r0, r6
 8008130:	4639      	mov	r1, r7
 8008132:	f7f8 f85b 	bl	80001ec <__adddf3>
 8008136:	4606      	mov	r6, r0
 8008138:	460f      	mov	r7, r1
 800813a:	4602      	mov	r2, r0
 800813c:	460b      	mov	r3, r1
 800813e:	4640      	mov	r0, r8
 8008140:	4649      	mov	r1, r9
 8008142:	f7f8 f853 	bl	80001ec <__adddf3>
 8008146:	a33e      	add	r3, pc, #248	; (adr r3, 8008240 <__ieee754_pow+0x738>)
 8008148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814c:	2000      	movs	r0, #0
 800814e:	4604      	mov	r4, r0
 8008150:	460d      	mov	r5, r1
 8008152:	f7f8 fa01 	bl	8000558 <__aeabi_dmul>
 8008156:	4642      	mov	r2, r8
 8008158:	ec41 0b18 	vmov	d8, r0, r1
 800815c:	464b      	mov	r3, r9
 800815e:	4620      	mov	r0, r4
 8008160:	4629      	mov	r1, r5
 8008162:	f7f8 f841 	bl	80001e8 <__aeabi_dsub>
 8008166:	4602      	mov	r2, r0
 8008168:	460b      	mov	r3, r1
 800816a:	4630      	mov	r0, r6
 800816c:	4639      	mov	r1, r7
 800816e:	f7f8 f83b 	bl	80001e8 <__aeabi_dsub>
 8008172:	a335      	add	r3, pc, #212	; (adr r3, 8008248 <__ieee754_pow+0x740>)
 8008174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008178:	f7f8 f9ee 	bl	8000558 <__aeabi_dmul>
 800817c:	a334      	add	r3, pc, #208	; (adr r3, 8008250 <__ieee754_pow+0x748>)
 800817e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008182:	4606      	mov	r6, r0
 8008184:	460f      	mov	r7, r1
 8008186:	4620      	mov	r0, r4
 8008188:	4629      	mov	r1, r5
 800818a:	f7f8 f9e5 	bl	8000558 <__aeabi_dmul>
 800818e:	4602      	mov	r2, r0
 8008190:	460b      	mov	r3, r1
 8008192:	4630      	mov	r0, r6
 8008194:	4639      	mov	r1, r7
 8008196:	f7f8 f829 	bl	80001ec <__adddf3>
 800819a:	9a07      	ldr	r2, [sp, #28]
 800819c:	4b37      	ldr	r3, [pc, #220]	; (800827c <__ieee754_pow+0x774>)
 800819e:	4413      	add	r3, r2
 80081a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a4:	f7f8 f822 	bl	80001ec <__adddf3>
 80081a8:	4682      	mov	sl, r0
 80081aa:	9805      	ldr	r0, [sp, #20]
 80081ac:	468b      	mov	fp, r1
 80081ae:	f7f8 f969 	bl	8000484 <__aeabi_i2d>
 80081b2:	9a07      	ldr	r2, [sp, #28]
 80081b4:	4b32      	ldr	r3, [pc, #200]	; (8008280 <__ieee754_pow+0x778>)
 80081b6:	4413      	add	r3, r2
 80081b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80081bc:	4606      	mov	r6, r0
 80081be:	460f      	mov	r7, r1
 80081c0:	4652      	mov	r2, sl
 80081c2:	465b      	mov	r3, fp
 80081c4:	ec51 0b18 	vmov	r0, r1, d8
 80081c8:	f7f8 f810 	bl	80001ec <__adddf3>
 80081cc:	4642      	mov	r2, r8
 80081ce:	464b      	mov	r3, r9
 80081d0:	f7f8 f80c 	bl	80001ec <__adddf3>
 80081d4:	4632      	mov	r2, r6
 80081d6:	463b      	mov	r3, r7
 80081d8:	f7f8 f808 	bl	80001ec <__adddf3>
 80081dc:	2000      	movs	r0, #0
 80081de:	4632      	mov	r2, r6
 80081e0:	463b      	mov	r3, r7
 80081e2:	4604      	mov	r4, r0
 80081e4:	460d      	mov	r5, r1
 80081e6:	f7f7 ffff 	bl	80001e8 <__aeabi_dsub>
 80081ea:	4642      	mov	r2, r8
 80081ec:	464b      	mov	r3, r9
 80081ee:	f7f7 fffb 	bl	80001e8 <__aeabi_dsub>
 80081f2:	ec53 2b18 	vmov	r2, r3, d8
 80081f6:	f7f7 fff7 	bl	80001e8 <__aeabi_dsub>
 80081fa:	4602      	mov	r2, r0
 80081fc:	460b      	mov	r3, r1
 80081fe:	4650      	mov	r0, sl
 8008200:	4659      	mov	r1, fp
 8008202:	e610      	b.n	8007e26 <__ieee754_pow+0x31e>
 8008204:	2401      	movs	r4, #1
 8008206:	e6a1      	b.n	8007f4c <__ieee754_pow+0x444>
 8008208:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008258 <__ieee754_pow+0x750>
 800820c:	e617      	b.n	8007e3e <__ieee754_pow+0x336>
 800820e:	bf00      	nop
 8008210:	4a454eef 	.word	0x4a454eef
 8008214:	3fca7e28 	.word	0x3fca7e28
 8008218:	93c9db65 	.word	0x93c9db65
 800821c:	3fcd864a 	.word	0x3fcd864a
 8008220:	a91d4101 	.word	0xa91d4101
 8008224:	3fd17460 	.word	0x3fd17460
 8008228:	518f264d 	.word	0x518f264d
 800822c:	3fd55555 	.word	0x3fd55555
 8008230:	db6fabff 	.word	0xdb6fabff
 8008234:	3fdb6db6 	.word	0x3fdb6db6
 8008238:	33333303 	.word	0x33333303
 800823c:	3fe33333 	.word	0x3fe33333
 8008240:	e0000000 	.word	0xe0000000
 8008244:	3feec709 	.word	0x3feec709
 8008248:	dc3a03fd 	.word	0xdc3a03fd
 800824c:	3feec709 	.word	0x3feec709
 8008250:	145b01f5 	.word	0x145b01f5
 8008254:	be3e2fe0 	.word	0xbe3e2fe0
 8008258:	00000000 	.word	0x00000000
 800825c:	3ff00000 	.word	0x3ff00000
 8008260:	7ff00000 	.word	0x7ff00000
 8008264:	43400000 	.word	0x43400000
 8008268:	0003988e 	.word	0x0003988e
 800826c:	000bb679 	.word	0x000bb679
 8008270:	08009360 	.word	0x08009360
 8008274:	3ff00000 	.word	0x3ff00000
 8008278:	40080000 	.word	0x40080000
 800827c:	08009380 	.word	0x08009380
 8008280:	08009370 	.word	0x08009370
 8008284:	a3b3      	add	r3, pc, #716	; (adr r3, 8008554 <__ieee754_pow+0xa4c>)
 8008286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828a:	4640      	mov	r0, r8
 800828c:	4649      	mov	r1, r9
 800828e:	f7f7 ffad 	bl	80001ec <__adddf3>
 8008292:	4622      	mov	r2, r4
 8008294:	ec41 0b1a 	vmov	d10, r0, r1
 8008298:	462b      	mov	r3, r5
 800829a:	4630      	mov	r0, r6
 800829c:	4639      	mov	r1, r7
 800829e:	f7f7 ffa3 	bl	80001e8 <__aeabi_dsub>
 80082a2:	4602      	mov	r2, r0
 80082a4:	460b      	mov	r3, r1
 80082a6:	ec51 0b1a 	vmov	r0, r1, d10
 80082aa:	f7f8 fbe5 	bl	8000a78 <__aeabi_dcmpgt>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	f47f ae04 	bne.w	8007ebc <__ieee754_pow+0x3b4>
 80082b4:	4aa2      	ldr	r2, [pc, #648]	; (8008540 <__ieee754_pow+0xa38>)
 80082b6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80082ba:	4293      	cmp	r3, r2
 80082bc:	f340 8107 	ble.w	80084ce <__ieee754_pow+0x9c6>
 80082c0:	151b      	asrs	r3, r3, #20
 80082c2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80082c6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80082ca:	fa4a fa03 	asr.w	sl, sl, r3
 80082ce:	44da      	add	sl, fp
 80082d0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80082d4:	489b      	ldr	r0, [pc, #620]	; (8008544 <__ieee754_pow+0xa3c>)
 80082d6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80082da:	4108      	asrs	r0, r1
 80082dc:	ea00 030a 	and.w	r3, r0, sl
 80082e0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80082e4:	f1c1 0114 	rsb	r1, r1, #20
 80082e8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80082ec:	fa4a fa01 	asr.w	sl, sl, r1
 80082f0:	f1bb 0f00 	cmp.w	fp, #0
 80082f4:	f04f 0200 	mov.w	r2, #0
 80082f8:	4620      	mov	r0, r4
 80082fa:	4629      	mov	r1, r5
 80082fc:	bfb8      	it	lt
 80082fe:	f1ca 0a00 	rsblt	sl, sl, #0
 8008302:	f7f7 ff71 	bl	80001e8 <__aeabi_dsub>
 8008306:	ec41 0b19 	vmov	d9, r0, r1
 800830a:	4642      	mov	r2, r8
 800830c:	464b      	mov	r3, r9
 800830e:	ec51 0b19 	vmov	r0, r1, d9
 8008312:	f7f7 ff6b 	bl	80001ec <__adddf3>
 8008316:	a37a      	add	r3, pc, #488	; (adr r3, 8008500 <__ieee754_pow+0x9f8>)
 8008318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831c:	2000      	movs	r0, #0
 800831e:	4604      	mov	r4, r0
 8008320:	460d      	mov	r5, r1
 8008322:	f7f8 f919 	bl	8000558 <__aeabi_dmul>
 8008326:	ec53 2b19 	vmov	r2, r3, d9
 800832a:	4606      	mov	r6, r0
 800832c:	460f      	mov	r7, r1
 800832e:	4620      	mov	r0, r4
 8008330:	4629      	mov	r1, r5
 8008332:	f7f7 ff59 	bl	80001e8 <__aeabi_dsub>
 8008336:	4602      	mov	r2, r0
 8008338:	460b      	mov	r3, r1
 800833a:	4640      	mov	r0, r8
 800833c:	4649      	mov	r1, r9
 800833e:	f7f7 ff53 	bl	80001e8 <__aeabi_dsub>
 8008342:	a371      	add	r3, pc, #452	; (adr r3, 8008508 <__ieee754_pow+0xa00>)
 8008344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008348:	f7f8 f906 	bl	8000558 <__aeabi_dmul>
 800834c:	a370      	add	r3, pc, #448	; (adr r3, 8008510 <__ieee754_pow+0xa08>)
 800834e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008352:	4680      	mov	r8, r0
 8008354:	4689      	mov	r9, r1
 8008356:	4620      	mov	r0, r4
 8008358:	4629      	mov	r1, r5
 800835a:	f7f8 f8fd 	bl	8000558 <__aeabi_dmul>
 800835e:	4602      	mov	r2, r0
 8008360:	460b      	mov	r3, r1
 8008362:	4640      	mov	r0, r8
 8008364:	4649      	mov	r1, r9
 8008366:	f7f7 ff41 	bl	80001ec <__adddf3>
 800836a:	4604      	mov	r4, r0
 800836c:	460d      	mov	r5, r1
 800836e:	4602      	mov	r2, r0
 8008370:	460b      	mov	r3, r1
 8008372:	4630      	mov	r0, r6
 8008374:	4639      	mov	r1, r7
 8008376:	f7f7 ff39 	bl	80001ec <__adddf3>
 800837a:	4632      	mov	r2, r6
 800837c:	463b      	mov	r3, r7
 800837e:	4680      	mov	r8, r0
 8008380:	4689      	mov	r9, r1
 8008382:	f7f7 ff31 	bl	80001e8 <__aeabi_dsub>
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	4620      	mov	r0, r4
 800838c:	4629      	mov	r1, r5
 800838e:	f7f7 ff2b 	bl	80001e8 <__aeabi_dsub>
 8008392:	4642      	mov	r2, r8
 8008394:	4606      	mov	r6, r0
 8008396:	460f      	mov	r7, r1
 8008398:	464b      	mov	r3, r9
 800839a:	4640      	mov	r0, r8
 800839c:	4649      	mov	r1, r9
 800839e:	f7f8 f8db 	bl	8000558 <__aeabi_dmul>
 80083a2:	a35d      	add	r3, pc, #372	; (adr r3, 8008518 <__ieee754_pow+0xa10>)
 80083a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a8:	4604      	mov	r4, r0
 80083aa:	460d      	mov	r5, r1
 80083ac:	f7f8 f8d4 	bl	8000558 <__aeabi_dmul>
 80083b0:	a35b      	add	r3, pc, #364	; (adr r3, 8008520 <__ieee754_pow+0xa18>)
 80083b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b6:	f7f7 ff17 	bl	80001e8 <__aeabi_dsub>
 80083ba:	4622      	mov	r2, r4
 80083bc:	462b      	mov	r3, r5
 80083be:	f7f8 f8cb 	bl	8000558 <__aeabi_dmul>
 80083c2:	a359      	add	r3, pc, #356	; (adr r3, 8008528 <__ieee754_pow+0xa20>)
 80083c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c8:	f7f7 ff10 	bl	80001ec <__adddf3>
 80083cc:	4622      	mov	r2, r4
 80083ce:	462b      	mov	r3, r5
 80083d0:	f7f8 f8c2 	bl	8000558 <__aeabi_dmul>
 80083d4:	a356      	add	r3, pc, #344	; (adr r3, 8008530 <__ieee754_pow+0xa28>)
 80083d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083da:	f7f7 ff05 	bl	80001e8 <__aeabi_dsub>
 80083de:	4622      	mov	r2, r4
 80083e0:	462b      	mov	r3, r5
 80083e2:	f7f8 f8b9 	bl	8000558 <__aeabi_dmul>
 80083e6:	a354      	add	r3, pc, #336	; (adr r3, 8008538 <__ieee754_pow+0xa30>)
 80083e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ec:	f7f7 fefe 	bl	80001ec <__adddf3>
 80083f0:	4622      	mov	r2, r4
 80083f2:	462b      	mov	r3, r5
 80083f4:	f7f8 f8b0 	bl	8000558 <__aeabi_dmul>
 80083f8:	4602      	mov	r2, r0
 80083fa:	460b      	mov	r3, r1
 80083fc:	4640      	mov	r0, r8
 80083fe:	4649      	mov	r1, r9
 8008400:	f7f7 fef2 	bl	80001e8 <__aeabi_dsub>
 8008404:	4604      	mov	r4, r0
 8008406:	460d      	mov	r5, r1
 8008408:	4602      	mov	r2, r0
 800840a:	460b      	mov	r3, r1
 800840c:	4640      	mov	r0, r8
 800840e:	4649      	mov	r1, r9
 8008410:	f7f8 f8a2 	bl	8000558 <__aeabi_dmul>
 8008414:	2200      	movs	r2, #0
 8008416:	ec41 0b19 	vmov	d9, r0, r1
 800841a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800841e:	4620      	mov	r0, r4
 8008420:	4629      	mov	r1, r5
 8008422:	f7f7 fee1 	bl	80001e8 <__aeabi_dsub>
 8008426:	4602      	mov	r2, r0
 8008428:	460b      	mov	r3, r1
 800842a:	ec51 0b19 	vmov	r0, r1, d9
 800842e:	f7f8 f9bd 	bl	80007ac <__aeabi_ddiv>
 8008432:	4632      	mov	r2, r6
 8008434:	4604      	mov	r4, r0
 8008436:	460d      	mov	r5, r1
 8008438:	463b      	mov	r3, r7
 800843a:	4640      	mov	r0, r8
 800843c:	4649      	mov	r1, r9
 800843e:	f7f8 f88b 	bl	8000558 <__aeabi_dmul>
 8008442:	4632      	mov	r2, r6
 8008444:	463b      	mov	r3, r7
 8008446:	f7f7 fed1 	bl	80001ec <__adddf3>
 800844a:	4602      	mov	r2, r0
 800844c:	460b      	mov	r3, r1
 800844e:	4620      	mov	r0, r4
 8008450:	4629      	mov	r1, r5
 8008452:	f7f7 fec9 	bl	80001e8 <__aeabi_dsub>
 8008456:	4642      	mov	r2, r8
 8008458:	464b      	mov	r3, r9
 800845a:	f7f7 fec5 	bl	80001e8 <__aeabi_dsub>
 800845e:	460b      	mov	r3, r1
 8008460:	4602      	mov	r2, r0
 8008462:	4939      	ldr	r1, [pc, #228]	; (8008548 <__ieee754_pow+0xa40>)
 8008464:	2000      	movs	r0, #0
 8008466:	f7f7 febf 	bl	80001e8 <__aeabi_dsub>
 800846a:	ec41 0b10 	vmov	d0, r0, r1
 800846e:	ee10 3a90 	vmov	r3, s1
 8008472:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008476:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800847a:	da2b      	bge.n	80084d4 <__ieee754_pow+0x9cc>
 800847c:	4650      	mov	r0, sl
 800847e:	f000 fa7f 	bl	8008980 <scalbn>
 8008482:	ec51 0b10 	vmov	r0, r1, d0
 8008486:	ec53 2b18 	vmov	r2, r3, d8
 800848a:	f7ff bbee 	b.w	8007c6a <__ieee754_pow+0x162>
 800848e:	4b2f      	ldr	r3, [pc, #188]	; (800854c <__ieee754_pow+0xa44>)
 8008490:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008494:	429e      	cmp	r6, r3
 8008496:	f77f af0d 	ble.w	80082b4 <__ieee754_pow+0x7ac>
 800849a:	4b2d      	ldr	r3, [pc, #180]	; (8008550 <__ieee754_pow+0xa48>)
 800849c:	440b      	add	r3, r1
 800849e:	4303      	orrs	r3, r0
 80084a0:	d009      	beq.n	80084b6 <__ieee754_pow+0x9ae>
 80084a2:	ec51 0b18 	vmov	r0, r1, d8
 80084a6:	2200      	movs	r2, #0
 80084a8:	2300      	movs	r3, #0
 80084aa:	f7f8 fac7 	bl	8000a3c <__aeabi_dcmplt>
 80084ae:	3800      	subs	r0, #0
 80084b0:	bf18      	it	ne
 80084b2:	2001      	movne	r0, #1
 80084b4:	e448      	b.n	8007d48 <__ieee754_pow+0x240>
 80084b6:	4622      	mov	r2, r4
 80084b8:	462b      	mov	r3, r5
 80084ba:	f7f7 fe95 	bl	80001e8 <__aeabi_dsub>
 80084be:	4642      	mov	r2, r8
 80084c0:	464b      	mov	r3, r9
 80084c2:	f7f8 facf 	bl	8000a64 <__aeabi_dcmpge>
 80084c6:	2800      	cmp	r0, #0
 80084c8:	f43f aef4 	beq.w	80082b4 <__ieee754_pow+0x7ac>
 80084cc:	e7e9      	b.n	80084a2 <__ieee754_pow+0x99a>
 80084ce:	f04f 0a00 	mov.w	sl, #0
 80084d2:	e71a      	b.n	800830a <__ieee754_pow+0x802>
 80084d4:	ec51 0b10 	vmov	r0, r1, d0
 80084d8:	4619      	mov	r1, r3
 80084da:	e7d4      	b.n	8008486 <__ieee754_pow+0x97e>
 80084dc:	491a      	ldr	r1, [pc, #104]	; (8008548 <__ieee754_pow+0xa40>)
 80084de:	2000      	movs	r0, #0
 80084e0:	f7ff bb31 	b.w	8007b46 <__ieee754_pow+0x3e>
 80084e4:	2000      	movs	r0, #0
 80084e6:	2100      	movs	r1, #0
 80084e8:	f7ff bb2d 	b.w	8007b46 <__ieee754_pow+0x3e>
 80084ec:	4630      	mov	r0, r6
 80084ee:	4639      	mov	r1, r7
 80084f0:	f7ff bb29 	b.w	8007b46 <__ieee754_pow+0x3e>
 80084f4:	9204      	str	r2, [sp, #16]
 80084f6:	f7ff bb7b 	b.w	8007bf0 <__ieee754_pow+0xe8>
 80084fa:	2300      	movs	r3, #0
 80084fc:	f7ff bb65 	b.w	8007bca <__ieee754_pow+0xc2>
 8008500:	00000000 	.word	0x00000000
 8008504:	3fe62e43 	.word	0x3fe62e43
 8008508:	fefa39ef 	.word	0xfefa39ef
 800850c:	3fe62e42 	.word	0x3fe62e42
 8008510:	0ca86c39 	.word	0x0ca86c39
 8008514:	be205c61 	.word	0xbe205c61
 8008518:	72bea4d0 	.word	0x72bea4d0
 800851c:	3e663769 	.word	0x3e663769
 8008520:	c5d26bf1 	.word	0xc5d26bf1
 8008524:	3ebbbd41 	.word	0x3ebbbd41
 8008528:	af25de2c 	.word	0xaf25de2c
 800852c:	3f11566a 	.word	0x3f11566a
 8008530:	16bebd93 	.word	0x16bebd93
 8008534:	3f66c16c 	.word	0x3f66c16c
 8008538:	5555553e 	.word	0x5555553e
 800853c:	3fc55555 	.word	0x3fc55555
 8008540:	3fe00000 	.word	0x3fe00000
 8008544:	fff00000 	.word	0xfff00000
 8008548:	3ff00000 	.word	0x3ff00000
 800854c:	4090cbff 	.word	0x4090cbff
 8008550:	3f6f3400 	.word	0x3f6f3400
 8008554:	652b82fe 	.word	0x652b82fe
 8008558:	3c971547 	.word	0x3c971547
 800855c:	00000000 	.word	0x00000000

08008560 <__ieee754_rem_pio2>:
 8008560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008564:	ed2d 8b02 	vpush	{d8}
 8008568:	ec55 4b10 	vmov	r4, r5, d0
 800856c:	4bca      	ldr	r3, [pc, #808]	; (8008898 <__ieee754_rem_pio2+0x338>)
 800856e:	b08b      	sub	sp, #44	; 0x2c
 8008570:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008574:	4598      	cmp	r8, r3
 8008576:	4682      	mov	sl, r0
 8008578:	9502      	str	r5, [sp, #8]
 800857a:	dc08      	bgt.n	800858e <__ieee754_rem_pio2+0x2e>
 800857c:	2200      	movs	r2, #0
 800857e:	2300      	movs	r3, #0
 8008580:	ed80 0b00 	vstr	d0, [r0]
 8008584:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008588:	f04f 0b00 	mov.w	fp, #0
 800858c:	e028      	b.n	80085e0 <__ieee754_rem_pio2+0x80>
 800858e:	4bc3      	ldr	r3, [pc, #780]	; (800889c <__ieee754_rem_pio2+0x33c>)
 8008590:	4598      	cmp	r8, r3
 8008592:	dc78      	bgt.n	8008686 <__ieee754_rem_pio2+0x126>
 8008594:	9b02      	ldr	r3, [sp, #8]
 8008596:	4ec2      	ldr	r6, [pc, #776]	; (80088a0 <__ieee754_rem_pio2+0x340>)
 8008598:	2b00      	cmp	r3, #0
 800859a:	ee10 0a10 	vmov	r0, s0
 800859e:	a3b0      	add	r3, pc, #704	; (adr r3, 8008860 <__ieee754_rem_pio2+0x300>)
 80085a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a4:	4629      	mov	r1, r5
 80085a6:	dd39      	ble.n	800861c <__ieee754_rem_pio2+0xbc>
 80085a8:	f7f7 fe1e 	bl	80001e8 <__aeabi_dsub>
 80085ac:	45b0      	cmp	r8, r6
 80085ae:	4604      	mov	r4, r0
 80085b0:	460d      	mov	r5, r1
 80085b2:	d01b      	beq.n	80085ec <__ieee754_rem_pio2+0x8c>
 80085b4:	a3ac      	add	r3, pc, #688	; (adr r3, 8008868 <__ieee754_rem_pio2+0x308>)
 80085b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ba:	f7f7 fe15 	bl	80001e8 <__aeabi_dsub>
 80085be:	4602      	mov	r2, r0
 80085c0:	460b      	mov	r3, r1
 80085c2:	e9ca 2300 	strd	r2, r3, [sl]
 80085c6:	4620      	mov	r0, r4
 80085c8:	4629      	mov	r1, r5
 80085ca:	f7f7 fe0d 	bl	80001e8 <__aeabi_dsub>
 80085ce:	a3a6      	add	r3, pc, #664	; (adr r3, 8008868 <__ieee754_rem_pio2+0x308>)
 80085d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d4:	f7f7 fe08 	bl	80001e8 <__aeabi_dsub>
 80085d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80085dc:	f04f 0b01 	mov.w	fp, #1
 80085e0:	4658      	mov	r0, fp
 80085e2:	b00b      	add	sp, #44	; 0x2c
 80085e4:	ecbd 8b02 	vpop	{d8}
 80085e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ec:	a3a0      	add	r3, pc, #640	; (adr r3, 8008870 <__ieee754_rem_pio2+0x310>)
 80085ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f2:	f7f7 fdf9 	bl	80001e8 <__aeabi_dsub>
 80085f6:	a3a0      	add	r3, pc, #640	; (adr r3, 8008878 <__ieee754_rem_pio2+0x318>)
 80085f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fc:	4604      	mov	r4, r0
 80085fe:	460d      	mov	r5, r1
 8008600:	f7f7 fdf2 	bl	80001e8 <__aeabi_dsub>
 8008604:	4602      	mov	r2, r0
 8008606:	460b      	mov	r3, r1
 8008608:	e9ca 2300 	strd	r2, r3, [sl]
 800860c:	4620      	mov	r0, r4
 800860e:	4629      	mov	r1, r5
 8008610:	f7f7 fdea 	bl	80001e8 <__aeabi_dsub>
 8008614:	a398      	add	r3, pc, #608	; (adr r3, 8008878 <__ieee754_rem_pio2+0x318>)
 8008616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861a:	e7db      	b.n	80085d4 <__ieee754_rem_pio2+0x74>
 800861c:	f7f7 fde6 	bl	80001ec <__adddf3>
 8008620:	45b0      	cmp	r8, r6
 8008622:	4604      	mov	r4, r0
 8008624:	460d      	mov	r5, r1
 8008626:	d016      	beq.n	8008656 <__ieee754_rem_pio2+0xf6>
 8008628:	a38f      	add	r3, pc, #572	; (adr r3, 8008868 <__ieee754_rem_pio2+0x308>)
 800862a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862e:	f7f7 fddd 	bl	80001ec <__adddf3>
 8008632:	4602      	mov	r2, r0
 8008634:	460b      	mov	r3, r1
 8008636:	e9ca 2300 	strd	r2, r3, [sl]
 800863a:	4620      	mov	r0, r4
 800863c:	4629      	mov	r1, r5
 800863e:	f7f7 fdd3 	bl	80001e8 <__aeabi_dsub>
 8008642:	a389      	add	r3, pc, #548	; (adr r3, 8008868 <__ieee754_rem_pio2+0x308>)
 8008644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008648:	f7f7 fdd0 	bl	80001ec <__adddf3>
 800864c:	f04f 3bff 	mov.w	fp, #4294967295
 8008650:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008654:	e7c4      	b.n	80085e0 <__ieee754_rem_pio2+0x80>
 8008656:	a386      	add	r3, pc, #536	; (adr r3, 8008870 <__ieee754_rem_pio2+0x310>)
 8008658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865c:	f7f7 fdc6 	bl	80001ec <__adddf3>
 8008660:	a385      	add	r3, pc, #532	; (adr r3, 8008878 <__ieee754_rem_pio2+0x318>)
 8008662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008666:	4604      	mov	r4, r0
 8008668:	460d      	mov	r5, r1
 800866a:	f7f7 fdbf 	bl	80001ec <__adddf3>
 800866e:	4602      	mov	r2, r0
 8008670:	460b      	mov	r3, r1
 8008672:	e9ca 2300 	strd	r2, r3, [sl]
 8008676:	4620      	mov	r0, r4
 8008678:	4629      	mov	r1, r5
 800867a:	f7f7 fdb5 	bl	80001e8 <__aeabi_dsub>
 800867e:	a37e      	add	r3, pc, #504	; (adr r3, 8008878 <__ieee754_rem_pio2+0x318>)
 8008680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008684:	e7e0      	b.n	8008648 <__ieee754_rem_pio2+0xe8>
 8008686:	4b87      	ldr	r3, [pc, #540]	; (80088a4 <__ieee754_rem_pio2+0x344>)
 8008688:	4598      	cmp	r8, r3
 800868a:	f300 80d8 	bgt.w	800883e <__ieee754_rem_pio2+0x2de>
 800868e:	f000 f96d 	bl	800896c <fabs>
 8008692:	ec55 4b10 	vmov	r4, r5, d0
 8008696:	ee10 0a10 	vmov	r0, s0
 800869a:	a379      	add	r3, pc, #484	; (adr r3, 8008880 <__ieee754_rem_pio2+0x320>)
 800869c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a0:	4629      	mov	r1, r5
 80086a2:	f7f7 ff59 	bl	8000558 <__aeabi_dmul>
 80086a6:	4b80      	ldr	r3, [pc, #512]	; (80088a8 <__ieee754_rem_pio2+0x348>)
 80086a8:	2200      	movs	r2, #0
 80086aa:	f7f7 fd9f 	bl	80001ec <__adddf3>
 80086ae:	f7f8 fa03 	bl	8000ab8 <__aeabi_d2iz>
 80086b2:	4683      	mov	fp, r0
 80086b4:	f7f7 fee6 	bl	8000484 <__aeabi_i2d>
 80086b8:	4602      	mov	r2, r0
 80086ba:	460b      	mov	r3, r1
 80086bc:	ec43 2b18 	vmov	d8, r2, r3
 80086c0:	a367      	add	r3, pc, #412	; (adr r3, 8008860 <__ieee754_rem_pio2+0x300>)
 80086c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c6:	f7f7 ff47 	bl	8000558 <__aeabi_dmul>
 80086ca:	4602      	mov	r2, r0
 80086cc:	460b      	mov	r3, r1
 80086ce:	4620      	mov	r0, r4
 80086d0:	4629      	mov	r1, r5
 80086d2:	f7f7 fd89 	bl	80001e8 <__aeabi_dsub>
 80086d6:	a364      	add	r3, pc, #400	; (adr r3, 8008868 <__ieee754_rem_pio2+0x308>)
 80086d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086dc:	4606      	mov	r6, r0
 80086de:	460f      	mov	r7, r1
 80086e0:	ec51 0b18 	vmov	r0, r1, d8
 80086e4:	f7f7 ff38 	bl	8000558 <__aeabi_dmul>
 80086e8:	f1bb 0f1f 	cmp.w	fp, #31
 80086ec:	4604      	mov	r4, r0
 80086ee:	460d      	mov	r5, r1
 80086f0:	dc0d      	bgt.n	800870e <__ieee754_rem_pio2+0x1ae>
 80086f2:	4b6e      	ldr	r3, [pc, #440]	; (80088ac <__ieee754_rem_pio2+0x34c>)
 80086f4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80086f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086fc:	4543      	cmp	r3, r8
 80086fe:	d006      	beq.n	800870e <__ieee754_rem_pio2+0x1ae>
 8008700:	4622      	mov	r2, r4
 8008702:	462b      	mov	r3, r5
 8008704:	4630      	mov	r0, r6
 8008706:	4639      	mov	r1, r7
 8008708:	f7f7 fd6e 	bl	80001e8 <__aeabi_dsub>
 800870c:	e00e      	b.n	800872c <__ieee754_rem_pio2+0x1cc>
 800870e:	462b      	mov	r3, r5
 8008710:	4622      	mov	r2, r4
 8008712:	4630      	mov	r0, r6
 8008714:	4639      	mov	r1, r7
 8008716:	f7f7 fd67 	bl	80001e8 <__aeabi_dsub>
 800871a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800871e:	9303      	str	r3, [sp, #12]
 8008720:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008724:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8008728:	2b10      	cmp	r3, #16
 800872a:	dc02      	bgt.n	8008732 <__ieee754_rem_pio2+0x1d2>
 800872c:	e9ca 0100 	strd	r0, r1, [sl]
 8008730:	e039      	b.n	80087a6 <__ieee754_rem_pio2+0x246>
 8008732:	a34f      	add	r3, pc, #316	; (adr r3, 8008870 <__ieee754_rem_pio2+0x310>)
 8008734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008738:	ec51 0b18 	vmov	r0, r1, d8
 800873c:	f7f7 ff0c 	bl	8000558 <__aeabi_dmul>
 8008740:	4604      	mov	r4, r0
 8008742:	460d      	mov	r5, r1
 8008744:	4602      	mov	r2, r0
 8008746:	460b      	mov	r3, r1
 8008748:	4630      	mov	r0, r6
 800874a:	4639      	mov	r1, r7
 800874c:	f7f7 fd4c 	bl	80001e8 <__aeabi_dsub>
 8008750:	4602      	mov	r2, r0
 8008752:	460b      	mov	r3, r1
 8008754:	4680      	mov	r8, r0
 8008756:	4689      	mov	r9, r1
 8008758:	4630      	mov	r0, r6
 800875a:	4639      	mov	r1, r7
 800875c:	f7f7 fd44 	bl	80001e8 <__aeabi_dsub>
 8008760:	4622      	mov	r2, r4
 8008762:	462b      	mov	r3, r5
 8008764:	f7f7 fd40 	bl	80001e8 <__aeabi_dsub>
 8008768:	a343      	add	r3, pc, #268	; (adr r3, 8008878 <__ieee754_rem_pio2+0x318>)
 800876a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876e:	4604      	mov	r4, r0
 8008770:	460d      	mov	r5, r1
 8008772:	ec51 0b18 	vmov	r0, r1, d8
 8008776:	f7f7 feef 	bl	8000558 <__aeabi_dmul>
 800877a:	4622      	mov	r2, r4
 800877c:	462b      	mov	r3, r5
 800877e:	f7f7 fd33 	bl	80001e8 <__aeabi_dsub>
 8008782:	4602      	mov	r2, r0
 8008784:	460b      	mov	r3, r1
 8008786:	4604      	mov	r4, r0
 8008788:	460d      	mov	r5, r1
 800878a:	4640      	mov	r0, r8
 800878c:	4649      	mov	r1, r9
 800878e:	f7f7 fd2b 	bl	80001e8 <__aeabi_dsub>
 8008792:	9a03      	ldr	r2, [sp, #12]
 8008794:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	2b31      	cmp	r3, #49	; 0x31
 800879c:	dc24      	bgt.n	80087e8 <__ieee754_rem_pio2+0x288>
 800879e:	e9ca 0100 	strd	r0, r1, [sl]
 80087a2:	4646      	mov	r6, r8
 80087a4:	464f      	mov	r7, r9
 80087a6:	e9da 8900 	ldrd	r8, r9, [sl]
 80087aa:	4630      	mov	r0, r6
 80087ac:	4642      	mov	r2, r8
 80087ae:	464b      	mov	r3, r9
 80087b0:	4639      	mov	r1, r7
 80087b2:	f7f7 fd19 	bl	80001e8 <__aeabi_dsub>
 80087b6:	462b      	mov	r3, r5
 80087b8:	4622      	mov	r2, r4
 80087ba:	f7f7 fd15 	bl	80001e8 <__aeabi_dsub>
 80087be:	9b02      	ldr	r3, [sp, #8]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80087c6:	f6bf af0b 	bge.w	80085e0 <__ieee754_rem_pio2+0x80>
 80087ca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80087ce:	f8ca 3004 	str.w	r3, [sl, #4]
 80087d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80087d6:	f8ca 8000 	str.w	r8, [sl]
 80087da:	f8ca 0008 	str.w	r0, [sl, #8]
 80087de:	f8ca 300c 	str.w	r3, [sl, #12]
 80087e2:	f1cb 0b00 	rsb	fp, fp, #0
 80087e6:	e6fb      	b.n	80085e0 <__ieee754_rem_pio2+0x80>
 80087e8:	a327      	add	r3, pc, #156	; (adr r3, 8008888 <__ieee754_rem_pio2+0x328>)
 80087ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ee:	ec51 0b18 	vmov	r0, r1, d8
 80087f2:	f7f7 feb1 	bl	8000558 <__aeabi_dmul>
 80087f6:	4604      	mov	r4, r0
 80087f8:	460d      	mov	r5, r1
 80087fa:	4602      	mov	r2, r0
 80087fc:	460b      	mov	r3, r1
 80087fe:	4640      	mov	r0, r8
 8008800:	4649      	mov	r1, r9
 8008802:	f7f7 fcf1 	bl	80001e8 <__aeabi_dsub>
 8008806:	4602      	mov	r2, r0
 8008808:	460b      	mov	r3, r1
 800880a:	4606      	mov	r6, r0
 800880c:	460f      	mov	r7, r1
 800880e:	4640      	mov	r0, r8
 8008810:	4649      	mov	r1, r9
 8008812:	f7f7 fce9 	bl	80001e8 <__aeabi_dsub>
 8008816:	4622      	mov	r2, r4
 8008818:	462b      	mov	r3, r5
 800881a:	f7f7 fce5 	bl	80001e8 <__aeabi_dsub>
 800881e:	a31c      	add	r3, pc, #112	; (adr r3, 8008890 <__ieee754_rem_pio2+0x330>)
 8008820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008824:	4604      	mov	r4, r0
 8008826:	460d      	mov	r5, r1
 8008828:	ec51 0b18 	vmov	r0, r1, d8
 800882c:	f7f7 fe94 	bl	8000558 <__aeabi_dmul>
 8008830:	4622      	mov	r2, r4
 8008832:	462b      	mov	r3, r5
 8008834:	f7f7 fcd8 	bl	80001e8 <__aeabi_dsub>
 8008838:	4604      	mov	r4, r0
 800883a:	460d      	mov	r5, r1
 800883c:	e760      	b.n	8008700 <__ieee754_rem_pio2+0x1a0>
 800883e:	4b1c      	ldr	r3, [pc, #112]	; (80088b0 <__ieee754_rem_pio2+0x350>)
 8008840:	4598      	cmp	r8, r3
 8008842:	dd37      	ble.n	80088b4 <__ieee754_rem_pio2+0x354>
 8008844:	ee10 2a10 	vmov	r2, s0
 8008848:	462b      	mov	r3, r5
 800884a:	4620      	mov	r0, r4
 800884c:	4629      	mov	r1, r5
 800884e:	f7f7 fccb 	bl	80001e8 <__aeabi_dsub>
 8008852:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008856:	e9ca 0100 	strd	r0, r1, [sl]
 800885a:	e695      	b.n	8008588 <__ieee754_rem_pio2+0x28>
 800885c:	f3af 8000 	nop.w
 8008860:	54400000 	.word	0x54400000
 8008864:	3ff921fb 	.word	0x3ff921fb
 8008868:	1a626331 	.word	0x1a626331
 800886c:	3dd0b461 	.word	0x3dd0b461
 8008870:	1a600000 	.word	0x1a600000
 8008874:	3dd0b461 	.word	0x3dd0b461
 8008878:	2e037073 	.word	0x2e037073
 800887c:	3ba3198a 	.word	0x3ba3198a
 8008880:	6dc9c883 	.word	0x6dc9c883
 8008884:	3fe45f30 	.word	0x3fe45f30
 8008888:	2e000000 	.word	0x2e000000
 800888c:	3ba3198a 	.word	0x3ba3198a
 8008890:	252049c1 	.word	0x252049c1
 8008894:	397b839a 	.word	0x397b839a
 8008898:	3fe921fb 	.word	0x3fe921fb
 800889c:	4002d97b 	.word	0x4002d97b
 80088a0:	3ff921fb 	.word	0x3ff921fb
 80088a4:	413921fb 	.word	0x413921fb
 80088a8:	3fe00000 	.word	0x3fe00000
 80088ac:	08009390 	.word	0x08009390
 80088b0:	7fefffff 	.word	0x7fefffff
 80088b4:	ea4f 5628 	mov.w	r6, r8, asr #20
 80088b8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80088bc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80088c0:	4620      	mov	r0, r4
 80088c2:	460d      	mov	r5, r1
 80088c4:	f7f8 f8f8 	bl	8000ab8 <__aeabi_d2iz>
 80088c8:	f7f7 fddc 	bl	8000484 <__aeabi_i2d>
 80088cc:	4602      	mov	r2, r0
 80088ce:	460b      	mov	r3, r1
 80088d0:	4620      	mov	r0, r4
 80088d2:	4629      	mov	r1, r5
 80088d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80088d8:	f7f7 fc86 	bl	80001e8 <__aeabi_dsub>
 80088dc:	4b21      	ldr	r3, [pc, #132]	; (8008964 <__ieee754_rem_pio2+0x404>)
 80088de:	2200      	movs	r2, #0
 80088e0:	f7f7 fe3a 	bl	8000558 <__aeabi_dmul>
 80088e4:	460d      	mov	r5, r1
 80088e6:	4604      	mov	r4, r0
 80088e8:	f7f8 f8e6 	bl	8000ab8 <__aeabi_d2iz>
 80088ec:	f7f7 fdca 	bl	8000484 <__aeabi_i2d>
 80088f0:	4602      	mov	r2, r0
 80088f2:	460b      	mov	r3, r1
 80088f4:	4620      	mov	r0, r4
 80088f6:	4629      	mov	r1, r5
 80088f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80088fc:	f7f7 fc74 	bl	80001e8 <__aeabi_dsub>
 8008900:	4b18      	ldr	r3, [pc, #96]	; (8008964 <__ieee754_rem_pio2+0x404>)
 8008902:	2200      	movs	r2, #0
 8008904:	f7f7 fe28 	bl	8000558 <__aeabi_dmul>
 8008908:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800890c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8008910:	2703      	movs	r7, #3
 8008912:	2400      	movs	r4, #0
 8008914:	2500      	movs	r5, #0
 8008916:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800891a:	4622      	mov	r2, r4
 800891c:	462b      	mov	r3, r5
 800891e:	46b9      	mov	r9, r7
 8008920:	3f01      	subs	r7, #1
 8008922:	f7f8 f881 	bl	8000a28 <__aeabi_dcmpeq>
 8008926:	2800      	cmp	r0, #0
 8008928:	d1f5      	bne.n	8008916 <__ieee754_rem_pio2+0x3b6>
 800892a:	4b0f      	ldr	r3, [pc, #60]	; (8008968 <__ieee754_rem_pio2+0x408>)
 800892c:	9301      	str	r3, [sp, #4]
 800892e:	2302      	movs	r3, #2
 8008930:	9300      	str	r3, [sp, #0]
 8008932:	4632      	mov	r2, r6
 8008934:	464b      	mov	r3, r9
 8008936:	4651      	mov	r1, sl
 8008938:	a804      	add	r0, sp, #16
 800893a:	f000 f8d1 	bl	8008ae0 <__kernel_rem_pio2>
 800893e:	9b02      	ldr	r3, [sp, #8]
 8008940:	2b00      	cmp	r3, #0
 8008942:	4683      	mov	fp, r0
 8008944:	f6bf ae4c 	bge.w	80085e0 <__ieee754_rem_pio2+0x80>
 8008948:	e9da 2100 	ldrd	r2, r1, [sl]
 800894c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008950:	e9ca 2300 	strd	r2, r3, [sl]
 8008954:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8008958:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800895c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8008960:	e73f      	b.n	80087e2 <__ieee754_rem_pio2+0x282>
 8008962:	bf00      	nop
 8008964:	41700000 	.word	0x41700000
 8008968:	08009410 	.word	0x08009410

0800896c <fabs>:
 800896c:	ec51 0b10 	vmov	r0, r1, d0
 8008970:	ee10 2a10 	vmov	r2, s0
 8008974:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008978:	ec43 2b10 	vmov	d0, r2, r3
 800897c:	4770      	bx	lr
	...

08008980 <scalbn>:
 8008980:	b570      	push	{r4, r5, r6, lr}
 8008982:	ec55 4b10 	vmov	r4, r5, d0
 8008986:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800898a:	4606      	mov	r6, r0
 800898c:	462b      	mov	r3, r5
 800898e:	b999      	cbnz	r1, 80089b8 <scalbn+0x38>
 8008990:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008994:	4323      	orrs	r3, r4
 8008996:	d03f      	beq.n	8008a18 <scalbn+0x98>
 8008998:	4b35      	ldr	r3, [pc, #212]	; (8008a70 <scalbn+0xf0>)
 800899a:	4629      	mov	r1, r5
 800899c:	ee10 0a10 	vmov	r0, s0
 80089a0:	2200      	movs	r2, #0
 80089a2:	f7f7 fdd9 	bl	8000558 <__aeabi_dmul>
 80089a6:	4b33      	ldr	r3, [pc, #204]	; (8008a74 <scalbn+0xf4>)
 80089a8:	429e      	cmp	r6, r3
 80089aa:	4604      	mov	r4, r0
 80089ac:	460d      	mov	r5, r1
 80089ae:	da10      	bge.n	80089d2 <scalbn+0x52>
 80089b0:	a327      	add	r3, pc, #156	; (adr r3, 8008a50 <scalbn+0xd0>)
 80089b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b6:	e01f      	b.n	80089f8 <scalbn+0x78>
 80089b8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80089bc:	4291      	cmp	r1, r2
 80089be:	d10c      	bne.n	80089da <scalbn+0x5a>
 80089c0:	ee10 2a10 	vmov	r2, s0
 80089c4:	4620      	mov	r0, r4
 80089c6:	4629      	mov	r1, r5
 80089c8:	f7f7 fc10 	bl	80001ec <__adddf3>
 80089cc:	4604      	mov	r4, r0
 80089ce:	460d      	mov	r5, r1
 80089d0:	e022      	b.n	8008a18 <scalbn+0x98>
 80089d2:	460b      	mov	r3, r1
 80089d4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80089d8:	3936      	subs	r1, #54	; 0x36
 80089da:	f24c 3250 	movw	r2, #50000	; 0xc350
 80089de:	4296      	cmp	r6, r2
 80089e0:	dd0d      	ble.n	80089fe <scalbn+0x7e>
 80089e2:	2d00      	cmp	r5, #0
 80089e4:	a11c      	add	r1, pc, #112	; (adr r1, 8008a58 <scalbn+0xd8>)
 80089e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089ea:	da02      	bge.n	80089f2 <scalbn+0x72>
 80089ec:	a11c      	add	r1, pc, #112	; (adr r1, 8008a60 <scalbn+0xe0>)
 80089ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089f2:	a319      	add	r3, pc, #100	; (adr r3, 8008a58 <scalbn+0xd8>)
 80089f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f8:	f7f7 fdae 	bl	8000558 <__aeabi_dmul>
 80089fc:	e7e6      	b.n	80089cc <scalbn+0x4c>
 80089fe:	1872      	adds	r2, r6, r1
 8008a00:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008a04:	428a      	cmp	r2, r1
 8008a06:	dcec      	bgt.n	80089e2 <scalbn+0x62>
 8008a08:	2a00      	cmp	r2, #0
 8008a0a:	dd08      	ble.n	8008a1e <scalbn+0x9e>
 8008a0c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008a10:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008a14:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008a18:	ec45 4b10 	vmov	d0, r4, r5
 8008a1c:	bd70      	pop	{r4, r5, r6, pc}
 8008a1e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008a22:	da08      	bge.n	8008a36 <scalbn+0xb6>
 8008a24:	2d00      	cmp	r5, #0
 8008a26:	a10a      	add	r1, pc, #40	; (adr r1, 8008a50 <scalbn+0xd0>)
 8008a28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a2c:	dac0      	bge.n	80089b0 <scalbn+0x30>
 8008a2e:	a10e      	add	r1, pc, #56	; (adr r1, 8008a68 <scalbn+0xe8>)
 8008a30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a34:	e7bc      	b.n	80089b0 <scalbn+0x30>
 8008a36:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008a3a:	3236      	adds	r2, #54	; 0x36
 8008a3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008a40:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008a44:	4620      	mov	r0, r4
 8008a46:	4b0c      	ldr	r3, [pc, #48]	; (8008a78 <scalbn+0xf8>)
 8008a48:	2200      	movs	r2, #0
 8008a4a:	e7d5      	b.n	80089f8 <scalbn+0x78>
 8008a4c:	f3af 8000 	nop.w
 8008a50:	c2f8f359 	.word	0xc2f8f359
 8008a54:	01a56e1f 	.word	0x01a56e1f
 8008a58:	8800759c 	.word	0x8800759c
 8008a5c:	7e37e43c 	.word	0x7e37e43c
 8008a60:	8800759c 	.word	0x8800759c
 8008a64:	fe37e43c 	.word	0xfe37e43c
 8008a68:	c2f8f359 	.word	0xc2f8f359
 8008a6c:	81a56e1f 	.word	0x81a56e1f
 8008a70:	43500000 	.word	0x43500000
 8008a74:	ffff3cb0 	.word	0xffff3cb0
 8008a78:	3c900000 	.word	0x3c900000

08008a7c <with_errno>:
 8008a7c:	b570      	push	{r4, r5, r6, lr}
 8008a7e:	4604      	mov	r4, r0
 8008a80:	460d      	mov	r5, r1
 8008a82:	4616      	mov	r6, r2
 8008a84:	f000 fc04 	bl	8009290 <__errno>
 8008a88:	4629      	mov	r1, r5
 8008a8a:	6006      	str	r6, [r0, #0]
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	bd70      	pop	{r4, r5, r6, pc}

08008a90 <xflow>:
 8008a90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a92:	4614      	mov	r4, r2
 8008a94:	461d      	mov	r5, r3
 8008a96:	b108      	cbz	r0, 8008a9c <xflow+0xc>
 8008a98:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008a9c:	e9cd 2300 	strd	r2, r3, [sp]
 8008aa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	4629      	mov	r1, r5
 8008aa8:	f7f7 fd56 	bl	8000558 <__aeabi_dmul>
 8008aac:	2222      	movs	r2, #34	; 0x22
 8008aae:	b003      	add	sp, #12
 8008ab0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ab4:	f7ff bfe2 	b.w	8008a7c <with_errno>

08008ab8 <__math_uflow>:
 8008ab8:	b508      	push	{r3, lr}
 8008aba:	2200      	movs	r2, #0
 8008abc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008ac0:	f7ff ffe6 	bl	8008a90 <xflow>
 8008ac4:	ec41 0b10 	vmov	d0, r0, r1
 8008ac8:	bd08      	pop	{r3, pc}

08008aca <__math_oflow>:
 8008aca:	b508      	push	{r3, lr}
 8008acc:	2200      	movs	r2, #0
 8008ace:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008ad2:	f7ff ffdd 	bl	8008a90 <xflow>
 8008ad6:	ec41 0b10 	vmov	d0, r0, r1
 8008ada:	bd08      	pop	{r3, pc}
 8008adc:	0000      	movs	r0, r0
	...

08008ae0 <__kernel_rem_pio2>:
 8008ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae4:	ed2d 8b02 	vpush	{d8}
 8008ae8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008aec:	f112 0f14 	cmn.w	r2, #20
 8008af0:	9306      	str	r3, [sp, #24]
 8008af2:	9104      	str	r1, [sp, #16]
 8008af4:	4bc2      	ldr	r3, [pc, #776]	; (8008e00 <__kernel_rem_pio2+0x320>)
 8008af6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8008af8:	9009      	str	r0, [sp, #36]	; 0x24
 8008afa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	9b06      	ldr	r3, [sp, #24]
 8008b02:	f103 33ff 	add.w	r3, r3, #4294967295
 8008b06:	bfa8      	it	ge
 8008b08:	1ed4      	subge	r4, r2, #3
 8008b0a:	9305      	str	r3, [sp, #20]
 8008b0c:	bfb2      	itee	lt
 8008b0e:	2400      	movlt	r4, #0
 8008b10:	2318      	movge	r3, #24
 8008b12:	fb94 f4f3 	sdivge	r4, r4, r3
 8008b16:	f06f 0317 	mvn.w	r3, #23
 8008b1a:	fb04 3303 	mla	r3, r4, r3, r3
 8008b1e:	eb03 0a02 	add.w	sl, r3, r2
 8008b22:	9b00      	ldr	r3, [sp, #0]
 8008b24:	9a05      	ldr	r2, [sp, #20]
 8008b26:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8008df0 <__kernel_rem_pio2+0x310>
 8008b2a:	eb03 0802 	add.w	r8, r3, r2
 8008b2e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008b30:	1aa7      	subs	r7, r4, r2
 8008b32:	ae20      	add	r6, sp, #128	; 0x80
 8008b34:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008b38:	2500      	movs	r5, #0
 8008b3a:	4545      	cmp	r5, r8
 8008b3c:	dd13      	ble.n	8008b66 <__kernel_rem_pio2+0x86>
 8008b3e:	9b06      	ldr	r3, [sp, #24]
 8008b40:	aa20      	add	r2, sp, #128	; 0x80
 8008b42:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008b46:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8008b4a:	f04f 0800 	mov.w	r8, #0
 8008b4e:	9b00      	ldr	r3, [sp, #0]
 8008b50:	4598      	cmp	r8, r3
 8008b52:	dc31      	bgt.n	8008bb8 <__kernel_rem_pio2+0xd8>
 8008b54:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8008df0 <__kernel_rem_pio2+0x310>
 8008b58:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008b5c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008b60:	462f      	mov	r7, r5
 8008b62:	2600      	movs	r6, #0
 8008b64:	e01b      	b.n	8008b9e <__kernel_rem_pio2+0xbe>
 8008b66:	42ef      	cmn	r7, r5
 8008b68:	d407      	bmi.n	8008b7a <__kernel_rem_pio2+0x9a>
 8008b6a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008b6e:	f7f7 fc89 	bl	8000484 <__aeabi_i2d>
 8008b72:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008b76:	3501      	adds	r5, #1
 8008b78:	e7df      	b.n	8008b3a <__kernel_rem_pio2+0x5a>
 8008b7a:	ec51 0b18 	vmov	r0, r1, d8
 8008b7e:	e7f8      	b.n	8008b72 <__kernel_rem_pio2+0x92>
 8008b80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b84:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008b88:	f7f7 fce6 	bl	8000558 <__aeabi_dmul>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	460b      	mov	r3, r1
 8008b90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b94:	f7f7 fb2a 	bl	80001ec <__adddf3>
 8008b98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b9c:	3601      	adds	r6, #1
 8008b9e:	9b05      	ldr	r3, [sp, #20]
 8008ba0:	429e      	cmp	r6, r3
 8008ba2:	f1a7 0708 	sub.w	r7, r7, #8
 8008ba6:	ddeb      	ble.n	8008b80 <__kernel_rem_pio2+0xa0>
 8008ba8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008bac:	f108 0801 	add.w	r8, r8, #1
 8008bb0:	ecab 7b02 	vstmia	fp!, {d7}
 8008bb4:	3508      	adds	r5, #8
 8008bb6:	e7ca      	b.n	8008b4e <__kernel_rem_pio2+0x6e>
 8008bb8:	9b00      	ldr	r3, [sp, #0]
 8008bba:	aa0c      	add	r2, sp, #48	; 0x30
 8008bbc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008bc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bc2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008bc4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008bc8:	9c00      	ldr	r4, [sp, #0]
 8008bca:	930a      	str	r3, [sp, #40]	; 0x28
 8008bcc:	00e3      	lsls	r3, r4, #3
 8008bce:	9308      	str	r3, [sp, #32]
 8008bd0:	ab98      	add	r3, sp, #608	; 0x260
 8008bd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008bd6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008bda:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8008bde:	ab70      	add	r3, sp, #448	; 0x1c0
 8008be0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008be4:	46c3      	mov	fp, r8
 8008be6:	46a1      	mov	r9, r4
 8008be8:	f1b9 0f00 	cmp.w	r9, #0
 8008bec:	f1a5 0508 	sub.w	r5, r5, #8
 8008bf0:	dc77      	bgt.n	8008ce2 <__kernel_rem_pio2+0x202>
 8008bf2:	ec47 6b10 	vmov	d0, r6, r7
 8008bf6:	4650      	mov	r0, sl
 8008bf8:	f7ff fec2 	bl	8008980 <scalbn>
 8008bfc:	ec57 6b10 	vmov	r6, r7, d0
 8008c00:	2200      	movs	r2, #0
 8008c02:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008c06:	ee10 0a10 	vmov	r0, s0
 8008c0a:	4639      	mov	r1, r7
 8008c0c:	f7f7 fca4 	bl	8000558 <__aeabi_dmul>
 8008c10:	ec41 0b10 	vmov	d0, r0, r1
 8008c14:	f000 fab4 	bl	8009180 <floor>
 8008c18:	4b7a      	ldr	r3, [pc, #488]	; (8008e04 <__kernel_rem_pio2+0x324>)
 8008c1a:	ec51 0b10 	vmov	r0, r1, d0
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f7f7 fc9a 	bl	8000558 <__aeabi_dmul>
 8008c24:	4602      	mov	r2, r0
 8008c26:	460b      	mov	r3, r1
 8008c28:	4630      	mov	r0, r6
 8008c2a:	4639      	mov	r1, r7
 8008c2c:	f7f7 fadc 	bl	80001e8 <__aeabi_dsub>
 8008c30:	460f      	mov	r7, r1
 8008c32:	4606      	mov	r6, r0
 8008c34:	f7f7 ff40 	bl	8000ab8 <__aeabi_d2iz>
 8008c38:	9002      	str	r0, [sp, #8]
 8008c3a:	f7f7 fc23 	bl	8000484 <__aeabi_i2d>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	460b      	mov	r3, r1
 8008c42:	4630      	mov	r0, r6
 8008c44:	4639      	mov	r1, r7
 8008c46:	f7f7 facf 	bl	80001e8 <__aeabi_dsub>
 8008c4a:	f1ba 0f00 	cmp.w	sl, #0
 8008c4e:	4606      	mov	r6, r0
 8008c50:	460f      	mov	r7, r1
 8008c52:	dd6d      	ble.n	8008d30 <__kernel_rem_pio2+0x250>
 8008c54:	1e61      	subs	r1, r4, #1
 8008c56:	ab0c      	add	r3, sp, #48	; 0x30
 8008c58:	9d02      	ldr	r5, [sp, #8]
 8008c5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008c5e:	f1ca 0018 	rsb	r0, sl, #24
 8008c62:	fa43 f200 	asr.w	r2, r3, r0
 8008c66:	4415      	add	r5, r2
 8008c68:	4082      	lsls	r2, r0
 8008c6a:	1a9b      	subs	r3, r3, r2
 8008c6c:	aa0c      	add	r2, sp, #48	; 0x30
 8008c6e:	9502      	str	r5, [sp, #8]
 8008c70:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008c74:	f1ca 0217 	rsb	r2, sl, #23
 8008c78:	fa43 fb02 	asr.w	fp, r3, r2
 8008c7c:	f1bb 0f00 	cmp.w	fp, #0
 8008c80:	dd65      	ble.n	8008d4e <__kernel_rem_pio2+0x26e>
 8008c82:	9b02      	ldr	r3, [sp, #8]
 8008c84:	2200      	movs	r2, #0
 8008c86:	3301      	adds	r3, #1
 8008c88:	9302      	str	r3, [sp, #8]
 8008c8a:	4615      	mov	r5, r2
 8008c8c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008c90:	4294      	cmp	r4, r2
 8008c92:	f300 809f 	bgt.w	8008dd4 <__kernel_rem_pio2+0x2f4>
 8008c96:	f1ba 0f00 	cmp.w	sl, #0
 8008c9a:	dd07      	ble.n	8008cac <__kernel_rem_pio2+0x1cc>
 8008c9c:	f1ba 0f01 	cmp.w	sl, #1
 8008ca0:	f000 80c1 	beq.w	8008e26 <__kernel_rem_pio2+0x346>
 8008ca4:	f1ba 0f02 	cmp.w	sl, #2
 8008ca8:	f000 80c7 	beq.w	8008e3a <__kernel_rem_pio2+0x35a>
 8008cac:	f1bb 0f02 	cmp.w	fp, #2
 8008cb0:	d14d      	bne.n	8008d4e <__kernel_rem_pio2+0x26e>
 8008cb2:	4632      	mov	r2, r6
 8008cb4:	463b      	mov	r3, r7
 8008cb6:	4954      	ldr	r1, [pc, #336]	; (8008e08 <__kernel_rem_pio2+0x328>)
 8008cb8:	2000      	movs	r0, #0
 8008cba:	f7f7 fa95 	bl	80001e8 <__aeabi_dsub>
 8008cbe:	4606      	mov	r6, r0
 8008cc0:	460f      	mov	r7, r1
 8008cc2:	2d00      	cmp	r5, #0
 8008cc4:	d043      	beq.n	8008d4e <__kernel_rem_pio2+0x26e>
 8008cc6:	4650      	mov	r0, sl
 8008cc8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8008df8 <__kernel_rem_pio2+0x318>
 8008ccc:	f7ff fe58 	bl	8008980 <scalbn>
 8008cd0:	4630      	mov	r0, r6
 8008cd2:	4639      	mov	r1, r7
 8008cd4:	ec53 2b10 	vmov	r2, r3, d0
 8008cd8:	f7f7 fa86 	bl	80001e8 <__aeabi_dsub>
 8008cdc:	4606      	mov	r6, r0
 8008cde:	460f      	mov	r7, r1
 8008ce0:	e035      	b.n	8008d4e <__kernel_rem_pio2+0x26e>
 8008ce2:	4b4a      	ldr	r3, [pc, #296]	; (8008e0c <__kernel_rem_pio2+0x32c>)
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	4630      	mov	r0, r6
 8008ce8:	4639      	mov	r1, r7
 8008cea:	f7f7 fc35 	bl	8000558 <__aeabi_dmul>
 8008cee:	f7f7 fee3 	bl	8000ab8 <__aeabi_d2iz>
 8008cf2:	f7f7 fbc7 	bl	8000484 <__aeabi_i2d>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	ec43 2b18 	vmov	d8, r2, r3
 8008cfe:	4b44      	ldr	r3, [pc, #272]	; (8008e10 <__kernel_rem_pio2+0x330>)
 8008d00:	2200      	movs	r2, #0
 8008d02:	f7f7 fc29 	bl	8000558 <__aeabi_dmul>
 8008d06:	4602      	mov	r2, r0
 8008d08:	460b      	mov	r3, r1
 8008d0a:	4630      	mov	r0, r6
 8008d0c:	4639      	mov	r1, r7
 8008d0e:	f7f7 fa6b 	bl	80001e8 <__aeabi_dsub>
 8008d12:	f7f7 fed1 	bl	8000ab8 <__aeabi_d2iz>
 8008d16:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d1a:	f84b 0b04 	str.w	r0, [fp], #4
 8008d1e:	ec51 0b18 	vmov	r0, r1, d8
 8008d22:	f7f7 fa63 	bl	80001ec <__adddf3>
 8008d26:	f109 39ff 	add.w	r9, r9, #4294967295
 8008d2a:	4606      	mov	r6, r0
 8008d2c:	460f      	mov	r7, r1
 8008d2e:	e75b      	b.n	8008be8 <__kernel_rem_pio2+0x108>
 8008d30:	d106      	bne.n	8008d40 <__kernel_rem_pio2+0x260>
 8008d32:	1e63      	subs	r3, r4, #1
 8008d34:	aa0c      	add	r2, sp, #48	; 0x30
 8008d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d3a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8008d3e:	e79d      	b.n	8008c7c <__kernel_rem_pio2+0x19c>
 8008d40:	4b34      	ldr	r3, [pc, #208]	; (8008e14 <__kernel_rem_pio2+0x334>)
 8008d42:	2200      	movs	r2, #0
 8008d44:	f7f7 fe8e 	bl	8000a64 <__aeabi_dcmpge>
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	d140      	bne.n	8008dce <__kernel_rem_pio2+0x2ee>
 8008d4c:	4683      	mov	fp, r0
 8008d4e:	2200      	movs	r2, #0
 8008d50:	2300      	movs	r3, #0
 8008d52:	4630      	mov	r0, r6
 8008d54:	4639      	mov	r1, r7
 8008d56:	f7f7 fe67 	bl	8000a28 <__aeabi_dcmpeq>
 8008d5a:	2800      	cmp	r0, #0
 8008d5c:	f000 80c1 	beq.w	8008ee2 <__kernel_rem_pio2+0x402>
 8008d60:	1e65      	subs	r5, r4, #1
 8008d62:	462b      	mov	r3, r5
 8008d64:	2200      	movs	r2, #0
 8008d66:	9900      	ldr	r1, [sp, #0]
 8008d68:	428b      	cmp	r3, r1
 8008d6a:	da6d      	bge.n	8008e48 <__kernel_rem_pio2+0x368>
 8008d6c:	2a00      	cmp	r2, #0
 8008d6e:	f000 808a 	beq.w	8008e86 <__kernel_rem_pio2+0x3a6>
 8008d72:	ab0c      	add	r3, sp, #48	; 0x30
 8008d74:	f1aa 0a18 	sub.w	sl, sl, #24
 8008d78:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f000 80ae 	beq.w	8008ede <__kernel_rem_pio2+0x3fe>
 8008d82:	4650      	mov	r0, sl
 8008d84:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8008df8 <__kernel_rem_pio2+0x318>
 8008d88:	f7ff fdfa 	bl	8008980 <scalbn>
 8008d8c:	1c6b      	adds	r3, r5, #1
 8008d8e:	00da      	lsls	r2, r3, #3
 8008d90:	9205      	str	r2, [sp, #20]
 8008d92:	ec57 6b10 	vmov	r6, r7, d0
 8008d96:	aa70      	add	r2, sp, #448	; 0x1c0
 8008d98:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8008e0c <__kernel_rem_pio2+0x32c>
 8008d9c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8008da0:	462c      	mov	r4, r5
 8008da2:	f04f 0800 	mov.w	r8, #0
 8008da6:	2c00      	cmp	r4, #0
 8008da8:	f280 80d4 	bge.w	8008f54 <__kernel_rem_pio2+0x474>
 8008dac:	462c      	mov	r4, r5
 8008dae:	2c00      	cmp	r4, #0
 8008db0:	f2c0 8102 	blt.w	8008fb8 <__kernel_rem_pio2+0x4d8>
 8008db4:	4b18      	ldr	r3, [pc, #96]	; (8008e18 <__kernel_rem_pio2+0x338>)
 8008db6:	461e      	mov	r6, r3
 8008db8:	ab70      	add	r3, sp, #448	; 0x1c0
 8008dba:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8008dbe:	1b2b      	subs	r3, r5, r4
 8008dc0:	f04f 0900 	mov.w	r9, #0
 8008dc4:	f04f 0a00 	mov.w	sl, #0
 8008dc8:	2700      	movs	r7, #0
 8008dca:	9306      	str	r3, [sp, #24]
 8008dcc:	e0e6      	b.n	8008f9c <__kernel_rem_pio2+0x4bc>
 8008dce:	f04f 0b02 	mov.w	fp, #2
 8008dd2:	e756      	b.n	8008c82 <__kernel_rem_pio2+0x1a2>
 8008dd4:	f8d8 3000 	ldr.w	r3, [r8]
 8008dd8:	bb05      	cbnz	r5, 8008e1c <__kernel_rem_pio2+0x33c>
 8008dda:	b123      	cbz	r3, 8008de6 <__kernel_rem_pio2+0x306>
 8008ddc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008de0:	f8c8 3000 	str.w	r3, [r8]
 8008de4:	2301      	movs	r3, #1
 8008de6:	3201      	adds	r2, #1
 8008de8:	f108 0804 	add.w	r8, r8, #4
 8008dec:	461d      	mov	r5, r3
 8008dee:	e74f      	b.n	8008c90 <__kernel_rem_pio2+0x1b0>
	...
 8008dfc:	3ff00000 	.word	0x3ff00000
 8008e00:	08009558 	.word	0x08009558
 8008e04:	40200000 	.word	0x40200000
 8008e08:	3ff00000 	.word	0x3ff00000
 8008e0c:	3e700000 	.word	0x3e700000
 8008e10:	41700000 	.word	0x41700000
 8008e14:	3fe00000 	.word	0x3fe00000
 8008e18:	08009518 	.word	0x08009518
 8008e1c:	1acb      	subs	r3, r1, r3
 8008e1e:	f8c8 3000 	str.w	r3, [r8]
 8008e22:	462b      	mov	r3, r5
 8008e24:	e7df      	b.n	8008de6 <__kernel_rem_pio2+0x306>
 8008e26:	1e62      	subs	r2, r4, #1
 8008e28:	ab0c      	add	r3, sp, #48	; 0x30
 8008e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e2e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008e32:	a90c      	add	r1, sp, #48	; 0x30
 8008e34:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008e38:	e738      	b.n	8008cac <__kernel_rem_pio2+0x1cc>
 8008e3a:	1e62      	subs	r2, r4, #1
 8008e3c:	ab0c      	add	r3, sp, #48	; 0x30
 8008e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e42:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008e46:	e7f4      	b.n	8008e32 <__kernel_rem_pio2+0x352>
 8008e48:	a90c      	add	r1, sp, #48	; 0x30
 8008e4a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	430a      	orrs	r2, r1
 8008e52:	e788      	b.n	8008d66 <__kernel_rem_pio2+0x286>
 8008e54:	3301      	adds	r3, #1
 8008e56:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008e5a:	2900      	cmp	r1, #0
 8008e5c:	d0fa      	beq.n	8008e54 <__kernel_rem_pio2+0x374>
 8008e5e:	9a08      	ldr	r2, [sp, #32]
 8008e60:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8008e64:	446a      	add	r2, sp
 8008e66:	3a98      	subs	r2, #152	; 0x98
 8008e68:	9208      	str	r2, [sp, #32]
 8008e6a:	9a06      	ldr	r2, [sp, #24]
 8008e6c:	a920      	add	r1, sp, #128	; 0x80
 8008e6e:	18a2      	adds	r2, r4, r2
 8008e70:	18e3      	adds	r3, r4, r3
 8008e72:	f104 0801 	add.w	r8, r4, #1
 8008e76:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8008e7a:	9302      	str	r3, [sp, #8]
 8008e7c:	9b02      	ldr	r3, [sp, #8]
 8008e7e:	4543      	cmp	r3, r8
 8008e80:	da04      	bge.n	8008e8c <__kernel_rem_pio2+0x3ac>
 8008e82:	461c      	mov	r4, r3
 8008e84:	e6a2      	b.n	8008bcc <__kernel_rem_pio2+0xec>
 8008e86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e7e4      	b.n	8008e56 <__kernel_rem_pio2+0x376>
 8008e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e8e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008e92:	f7f7 faf7 	bl	8000484 <__aeabi_i2d>
 8008e96:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e9c:	46ab      	mov	fp, r5
 8008e9e:	461c      	mov	r4, r3
 8008ea0:	f04f 0900 	mov.w	r9, #0
 8008ea4:	2600      	movs	r6, #0
 8008ea6:	2700      	movs	r7, #0
 8008ea8:	9b05      	ldr	r3, [sp, #20]
 8008eaa:	4599      	cmp	r9, r3
 8008eac:	dd06      	ble.n	8008ebc <__kernel_rem_pio2+0x3dc>
 8008eae:	9b08      	ldr	r3, [sp, #32]
 8008eb0:	e8e3 6702 	strd	r6, r7, [r3], #8
 8008eb4:	f108 0801 	add.w	r8, r8, #1
 8008eb8:	9308      	str	r3, [sp, #32]
 8008eba:	e7df      	b.n	8008e7c <__kernel_rem_pio2+0x39c>
 8008ebc:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008ec0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008ec4:	f7f7 fb48 	bl	8000558 <__aeabi_dmul>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	460b      	mov	r3, r1
 8008ecc:	4630      	mov	r0, r6
 8008ece:	4639      	mov	r1, r7
 8008ed0:	f7f7 f98c 	bl	80001ec <__adddf3>
 8008ed4:	f109 0901 	add.w	r9, r9, #1
 8008ed8:	4606      	mov	r6, r0
 8008eda:	460f      	mov	r7, r1
 8008edc:	e7e4      	b.n	8008ea8 <__kernel_rem_pio2+0x3c8>
 8008ede:	3d01      	subs	r5, #1
 8008ee0:	e747      	b.n	8008d72 <__kernel_rem_pio2+0x292>
 8008ee2:	ec47 6b10 	vmov	d0, r6, r7
 8008ee6:	f1ca 0000 	rsb	r0, sl, #0
 8008eea:	f7ff fd49 	bl	8008980 <scalbn>
 8008eee:	ec57 6b10 	vmov	r6, r7, d0
 8008ef2:	4ba0      	ldr	r3, [pc, #640]	; (8009174 <__kernel_rem_pio2+0x694>)
 8008ef4:	ee10 0a10 	vmov	r0, s0
 8008ef8:	2200      	movs	r2, #0
 8008efa:	4639      	mov	r1, r7
 8008efc:	f7f7 fdb2 	bl	8000a64 <__aeabi_dcmpge>
 8008f00:	b1f8      	cbz	r0, 8008f42 <__kernel_rem_pio2+0x462>
 8008f02:	4b9d      	ldr	r3, [pc, #628]	; (8009178 <__kernel_rem_pio2+0x698>)
 8008f04:	2200      	movs	r2, #0
 8008f06:	4630      	mov	r0, r6
 8008f08:	4639      	mov	r1, r7
 8008f0a:	f7f7 fb25 	bl	8000558 <__aeabi_dmul>
 8008f0e:	f7f7 fdd3 	bl	8000ab8 <__aeabi_d2iz>
 8008f12:	4680      	mov	r8, r0
 8008f14:	f7f7 fab6 	bl	8000484 <__aeabi_i2d>
 8008f18:	4b96      	ldr	r3, [pc, #600]	; (8009174 <__kernel_rem_pio2+0x694>)
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f7f7 fb1c 	bl	8000558 <__aeabi_dmul>
 8008f20:	460b      	mov	r3, r1
 8008f22:	4602      	mov	r2, r0
 8008f24:	4639      	mov	r1, r7
 8008f26:	4630      	mov	r0, r6
 8008f28:	f7f7 f95e 	bl	80001e8 <__aeabi_dsub>
 8008f2c:	f7f7 fdc4 	bl	8000ab8 <__aeabi_d2iz>
 8008f30:	1c65      	adds	r5, r4, #1
 8008f32:	ab0c      	add	r3, sp, #48	; 0x30
 8008f34:	f10a 0a18 	add.w	sl, sl, #24
 8008f38:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008f3c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008f40:	e71f      	b.n	8008d82 <__kernel_rem_pio2+0x2a2>
 8008f42:	4630      	mov	r0, r6
 8008f44:	4639      	mov	r1, r7
 8008f46:	f7f7 fdb7 	bl	8000ab8 <__aeabi_d2iz>
 8008f4a:	ab0c      	add	r3, sp, #48	; 0x30
 8008f4c:	4625      	mov	r5, r4
 8008f4e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008f52:	e716      	b.n	8008d82 <__kernel_rem_pio2+0x2a2>
 8008f54:	ab0c      	add	r3, sp, #48	; 0x30
 8008f56:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008f5a:	f7f7 fa93 	bl	8000484 <__aeabi_i2d>
 8008f5e:	4632      	mov	r2, r6
 8008f60:	463b      	mov	r3, r7
 8008f62:	f7f7 faf9 	bl	8000558 <__aeabi_dmul>
 8008f66:	4642      	mov	r2, r8
 8008f68:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8008f6c:	464b      	mov	r3, r9
 8008f6e:	4630      	mov	r0, r6
 8008f70:	4639      	mov	r1, r7
 8008f72:	f7f7 faf1 	bl	8000558 <__aeabi_dmul>
 8008f76:	3c01      	subs	r4, #1
 8008f78:	4606      	mov	r6, r0
 8008f7a:	460f      	mov	r7, r1
 8008f7c:	e713      	b.n	8008da6 <__kernel_rem_pio2+0x2c6>
 8008f7e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8008f82:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8008f86:	f7f7 fae7 	bl	8000558 <__aeabi_dmul>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	4648      	mov	r0, r9
 8008f90:	4651      	mov	r1, sl
 8008f92:	f7f7 f92b 	bl	80001ec <__adddf3>
 8008f96:	3701      	adds	r7, #1
 8008f98:	4681      	mov	r9, r0
 8008f9a:	468a      	mov	sl, r1
 8008f9c:	9b00      	ldr	r3, [sp, #0]
 8008f9e:	429f      	cmp	r7, r3
 8008fa0:	dc02      	bgt.n	8008fa8 <__kernel_rem_pio2+0x4c8>
 8008fa2:	9b06      	ldr	r3, [sp, #24]
 8008fa4:	429f      	cmp	r7, r3
 8008fa6:	ddea      	ble.n	8008f7e <__kernel_rem_pio2+0x49e>
 8008fa8:	9a06      	ldr	r2, [sp, #24]
 8008faa:	ab48      	add	r3, sp, #288	; 0x120
 8008fac:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8008fb0:	e9c6 9a00 	strd	r9, sl, [r6]
 8008fb4:	3c01      	subs	r4, #1
 8008fb6:	e6fa      	b.n	8008dae <__kernel_rem_pio2+0x2ce>
 8008fb8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008fba:	2b02      	cmp	r3, #2
 8008fbc:	dc0b      	bgt.n	8008fd6 <__kernel_rem_pio2+0x4f6>
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	dc39      	bgt.n	8009036 <__kernel_rem_pio2+0x556>
 8008fc2:	d05d      	beq.n	8009080 <__kernel_rem_pio2+0x5a0>
 8008fc4:	9b02      	ldr	r3, [sp, #8]
 8008fc6:	f003 0007 	and.w	r0, r3, #7
 8008fca:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008fce:	ecbd 8b02 	vpop	{d8}
 8008fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fd6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008fd8:	2b03      	cmp	r3, #3
 8008fda:	d1f3      	bne.n	8008fc4 <__kernel_rem_pio2+0x4e4>
 8008fdc:	9b05      	ldr	r3, [sp, #20]
 8008fde:	9500      	str	r5, [sp, #0]
 8008fe0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008fe4:	eb0d 0403 	add.w	r4, sp, r3
 8008fe8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8008fec:	46a2      	mov	sl, r4
 8008fee:	9b00      	ldr	r3, [sp, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f1aa 0a08 	sub.w	sl, sl, #8
 8008ff6:	dc69      	bgt.n	80090cc <__kernel_rem_pio2+0x5ec>
 8008ff8:	46aa      	mov	sl, r5
 8008ffa:	f1ba 0f01 	cmp.w	sl, #1
 8008ffe:	f1a4 0408 	sub.w	r4, r4, #8
 8009002:	f300 8083 	bgt.w	800910c <__kernel_rem_pio2+0x62c>
 8009006:	9c05      	ldr	r4, [sp, #20]
 8009008:	ab48      	add	r3, sp, #288	; 0x120
 800900a:	441c      	add	r4, r3
 800900c:	2000      	movs	r0, #0
 800900e:	2100      	movs	r1, #0
 8009010:	2d01      	cmp	r5, #1
 8009012:	f300 809a 	bgt.w	800914a <__kernel_rem_pio2+0x66a>
 8009016:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800901a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800901e:	f1bb 0f00 	cmp.w	fp, #0
 8009022:	f040 8098 	bne.w	8009156 <__kernel_rem_pio2+0x676>
 8009026:	9b04      	ldr	r3, [sp, #16]
 8009028:	e9c3 7800 	strd	r7, r8, [r3]
 800902c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009030:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009034:	e7c6      	b.n	8008fc4 <__kernel_rem_pio2+0x4e4>
 8009036:	9e05      	ldr	r6, [sp, #20]
 8009038:	ab48      	add	r3, sp, #288	; 0x120
 800903a:	441e      	add	r6, r3
 800903c:	462c      	mov	r4, r5
 800903e:	2000      	movs	r0, #0
 8009040:	2100      	movs	r1, #0
 8009042:	2c00      	cmp	r4, #0
 8009044:	da33      	bge.n	80090ae <__kernel_rem_pio2+0x5ce>
 8009046:	f1bb 0f00 	cmp.w	fp, #0
 800904a:	d036      	beq.n	80090ba <__kernel_rem_pio2+0x5da>
 800904c:	4602      	mov	r2, r0
 800904e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009052:	9c04      	ldr	r4, [sp, #16]
 8009054:	e9c4 2300 	strd	r2, r3, [r4]
 8009058:	4602      	mov	r2, r0
 800905a:	460b      	mov	r3, r1
 800905c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8009060:	f7f7 f8c2 	bl	80001e8 <__aeabi_dsub>
 8009064:	ae4a      	add	r6, sp, #296	; 0x128
 8009066:	2401      	movs	r4, #1
 8009068:	42a5      	cmp	r5, r4
 800906a:	da29      	bge.n	80090c0 <__kernel_rem_pio2+0x5e0>
 800906c:	f1bb 0f00 	cmp.w	fp, #0
 8009070:	d002      	beq.n	8009078 <__kernel_rem_pio2+0x598>
 8009072:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009076:	4619      	mov	r1, r3
 8009078:	9b04      	ldr	r3, [sp, #16]
 800907a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800907e:	e7a1      	b.n	8008fc4 <__kernel_rem_pio2+0x4e4>
 8009080:	9c05      	ldr	r4, [sp, #20]
 8009082:	ab48      	add	r3, sp, #288	; 0x120
 8009084:	441c      	add	r4, r3
 8009086:	2000      	movs	r0, #0
 8009088:	2100      	movs	r1, #0
 800908a:	2d00      	cmp	r5, #0
 800908c:	da09      	bge.n	80090a2 <__kernel_rem_pio2+0x5c2>
 800908e:	f1bb 0f00 	cmp.w	fp, #0
 8009092:	d002      	beq.n	800909a <__kernel_rem_pio2+0x5ba>
 8009094:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009098:	4619      	mov	r1, r3
 800909a:	9b04      	ldr	r3, [sp, #16]
 800909c:	e9c3 0100 	strd	r0, r1, [r3]
 80090a0:	e790      	b.n	8008fc4 <__kernel_rem_pio2+0x4e4>
 80090a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80090a6:	f7f7 f8a1 	bl	80001ec <__adddf3>
 80090aa:	3d01      	subs	r5, #1
 80090ac:	e7ed      	b.n	800908a <__kernel_rem_pio2+0x5aa>
 80090ae:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80090b2:	f7f7 f89b 	bl	80001ec <__adddf3>
 80090b6:	3c01      	subs	r4, #1
 80090b8:	e7c3      	b.n	8009042 <__kernel_rem_pio2+0x562>
 80090ba:	4602      	mov	r2, r0
 80090bc:	460b      	mov	r3, r1
 80090be:	e7c8      	b.n	8009052 <__kernel_rem_pio2+0x572>
 80090c0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80090c4:	f7f7 f892 	bl	80001ec <__adddf3>
 80090c8:	3401      	adds	r4, #1
 80090ca:	e7cd      	b.n	8009068 <__kernel_rem_pio2+0x588>
 80090cc:	e9da 8900 	ldrd	r8, r9, [sl]
 80090d0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80090d4:	9b00      	ldr	r3, [sp, #0]
 80090d6:	3b01      	subs	r3, #1
 80090d8:	9300      	str	r3, [sp, #0]
 80090da:	4632      	mov	r2, r6
 80090dc:	463b      	mov	r3, r7
 80090de:	4640      	mov	r0, r8
 80090e0:	4649      	mov	r1, r9
 80090e2:	f7f7 f883 	bl	80001ec <__adddf3>
 80090e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80090ea:	4602      	mov	r2, r0
 80090ec:	460b      	mov	r3, r1
 80090ee:	4640      	mov	r0, r8
 80090f0:	4649      	mov	r1, r9
 80090f2:	f7f7 f879 	bl	80001e8 <__aeabi_dsub>
 80090f6:	4632      	mov	r2, r6
 80090f8:	463b      	mov	r3, r7
 80090fa:	f7f7 f877 	bl	80001ec <__adddf3>
 80090fe:	ed9d 7b06 	vldr	d7, [sp, #24]
 8009102:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009106:	ed8a 7b00 	vstr	d7, [sl]
 800910a:	e770      	b.n	8008fee <__kernel_rem_pio2+0x50e>
 800910c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009110:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8009114:	4640      	mov	r0, r8
 8009116:	4632      	mov	r2, r6
 8009118:	463b      	mov	r3, r7
 800911a:	4649      	mov	r1, r9
 800911c:	f7f7 f866 	bl	80001ec <__adddf3>
 8009120:	e9cd 0100 	strd	r0, r1, [sp]
 8009124:	4602      	mov	r2, r0
 8009126:	460b      	mov	r3, r1
 8009128:	4640      	mov	r0, r8
 800912a:	4649      	mov	r1, r9
 800912c:	f7f7 f85c 	bl	80001e8 <__aeabi_dsub>
 8009130:	4632      	mov	r2, r6
 8009132:	463b      	mov	r3, r7
 8009134:	f7f7 f85a 	bl	80001ec <__adddf3>
 8009138:	ed9d 7b00 	vldr	d7, [sp]
 800913c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009140:	ed84 7b00 	vstr	d7, [r4]
 8009144:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009148:	e757      	b.n	8008ffa <__kernel_rem_pio2+0x51a>
 800914a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800914e:	f7f7 f84d 	bl	80001ec <__adddf3>
 8009152:	3d01      	subs	r5, #1
 8009154:	e75c      	b.n	8009010 <__kernel_rem_pio2+0x530>
 8009156:	9b04      	ldr	r3, [sp, #16]
 8009158:	9a04      	ldr	r2, [sp, #16]
 800915a:	601f      	str	r7, [r3, #0]
 800915c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8009160:	605c      	str	r4, [r3, #4]
 8009162:	609d      	str	r5, [r3, #8]
 8009164:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009168:	60d3      	str	r3, [r2, #12]
 800916a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800916e:	6110      	str	r0, [r2, #16]
 8009170:	6153      	str	r3, [r2, #20]
 8009172:	e727      	b.n	8008fc4 <__kernel_rem_pio2+0x4e4>
 8009174:	41700000 	.word	0x41700000
 8009178:	3e700000 	.word	0x3e700000
 800917c:	00000000 	.word	0x00000000

08009180 <floor>:
 8009180:	ec51 0b10 	vmov	r0, r1, d0
 8009184:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800918c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8009190:	2e13      	cmp	r6, #19
 8009192:	ee10 5a10 	vmov	r5, s0
 8009196:	ee10 8a10 	vmov	r8, s0
 800919a:	460c      	mov	r4, r1
 800919c:	dc31      	bgt.n	8009202 <floor+0x82>
 800919e:	2e00      	cmp	r6, #0
 80091a0:	da14      	bge.n	80091cc <floor+0x4c>
 80091a2:	a333      	add	r3, pc, #204	; (adr r3, 8009270 <floor+0xf0>)
 80091a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a8:	f7f7 f820 	bl	80001ec <__adddf3>
 80091ac:	2200      	movs	r2, #0
 80091ae:	2300      	movs	r3, #0
 80091b0:	f7f7 fc62 	bl	8000a78 <__aeabi_dcmpgt>
 80091b4:	b138      	cbz	r0, 80091c6 <floor+0x46>
 80091b6:	2c00      	cmp	r4, #0
 80091b8:	da53      	bge.n	8009262 <floor+0xe2>
 80091ba:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80091be:	4325      	orrs	r5, r4
 80091c0:	d052      	beq.n	8009268 <floor+0xe8>
 80091c2:	4c2d      	ldr	r4, [pc, #180]	; (8009278 <floor+0xf8>)
 80091c4:	2500      	movs	r5, #0
 80091c6:	4621      	mov	r1, r4
 80091c8:	4628      	mov	r0, r5
 80091ca:	e024      	b.n	8009216 <floor+0x96>
 80091cc:	4f2b      	ldr	r7, [pc, #172]	; (800927c <floor+0xfc>)
 80091ce:	4137      	asrs	r7, r6
 80091d0:	ea01 0307 	and.w	r3, r1, r7
 80091d4:	4303      	orrs	r3, r0
 80091d6:	d01e      	beq.n	8009216 <floor+0x96>
 80091d8:	a325      	add	r3, pc, #148	; (adr r3, 8009270 <floor+0xf0>)
 80091da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091de:	f7f7 f805 	bl	80001ec <__adddf3>
 80091e2:	2200      	movs	r2, #0
 80091e4:	2300      	movs	r3, #0
 80091e6:	f7f7 fc47 	bl	8000a78 <__aeabi_dcmpgt>
 80091ea:	2800      	cmp	r0, #0
 80091ec:	d0eb      	beq.n	80091c6 <floor+0x46>
 80091ee:	2c00      	cmp	r4, #0
 80091f0:	bfbe      	ittt	lt
 80091f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80091f6:	4133      	asrlt	r3, r6
 80091f8:	18e4      	addlt	r4, r4, r3
 80091fa:	ea24 0407 	bic.w	r4, r4, r7
 80091fe:	2500      	movs	r5, #0
 8009200:	e7e1      	b.n	80091c6 <floor+0x46>
 8009202:	2e33      	cmp	r6, #51	; 0x33
 8009204:	dd0b      	ble.n	800921e <floor+0x9e>
 8009206:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800920a:	d104      	bne.n	8009216 <floor+0x96>
 800920c:	ee10 2a10 	vmov	r2, s0
 8009210:	460b      	mov	r3, r1
 8009212:	f7f6 ffeb 	bl	80001ec <__adddf3>
 8009216:	ec41 0b10 	vmov	d0, r0, r1
 800921a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800921e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8009222:	f04f 37ff 	mov.w	r7, #4294967295
 8009226:	40df      	lsrs	r7, r3
 8009228:	4238      	tst	r0, r7
 800922a:	d0f4      	beq.n	8009216 <floor+0x96>
 800922c:	a310      	add	r3, pc, #64	; (adr r3, 8009270 <floor+0xf0>)
 800922e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009232:	f7f6 ffdb 	bl	80001ec <__adddf3>
 8009236:	2200      	movs	r2, #0
 8009238:	2300      	movs	r3, #0
 800923a:	f7f7 fc1d 	bl	8000a78 <__aeabi_dcmpgt>
 800923e:	2800      	cmp	r0, #0
 8009240:	d0c1      	beq.n	80091c6 <floor+0x46>
 8009242:	2c00      	cmp	r4, #0
 8009244:	da0a      	bge.n	800925c <floor+0xdc>
 8009246:	2e14      	cmp	r6, #20
 8009248:	d101      	bne.n	800924e <floor+0xce>
 800924a:	3401      	adds	r4, #1
 800924c:	e006      	b.n	800925c <floor+0xdc>
 800924e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009252:	2301      	movs	r3, #1
 8009254:	40b3      	lsls	r3, r6
 8009256:	441d      	add	r5, r3
 8009258:	45a8      	cmp	r8, r5
 800925a:	d8f6      	bhi.n	800924a <floor+0xca>
 800925c:	ea25 0507 	bic.w	r5, r5, r7
 8009260:	e7b1      	b.n	80091c6 <floor+0x46>
 8009262:	2500      	movs	r5, #0
 8009264:	462c      	mov	r4, r5
 8009266:	e7ae      	b.n	80091c6 <floor+0x46>
 8009268:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800926c:	e7ab      	b.n	80091c6 <floor+0x46>
 800926e:	bf00      	nop
 8009270:	8800759c 	.word	0x8800759c
 8009274:	7e37e43c 	.word	0x7e37e43c
 8009278:	bff00000 	.word	0xbff00000
 800927c:	000fffff 	.word	0x000fffff

08009280 <memset>:
 8009280:	4402      	add	r2, r0
 8009282:	4603      	mov	r3, r0
 8009284:	4293      	cmp	r3, r2
 8009286:	d100      	bne.n	800928a <memset+0xa>
 8009288:	4770      	bx	lr
 800928a:	f803 1b01 	strb.w	r1, [r3], #1
 800928e:	e7f9      	b.n	8009284 <memset+0x4>

08009290 <__errno>:
 8009290:	4b01      	ldr	r3, [pc, #4]	; (8009298 <__errno+0x8>)
 8009292:	6818      	ldr	r0, [r3, #0]
 8009294:	4770      	bx	lr
 8009296:	bf00      	nop
 8009298:	20000074 	.word	0x20000074

0800929c <__libc_init_array>:
 800929c:	b570      	push	{r4, r5, r6, lr}
 800929e:	4d0d      	ldr	r5, [pc, #52]	; (80092d4 <__libc_init_array+0x38>)
 80092a0:	4c0d      	ldr	r4, [pc, #52]	; (80092d8 <__libc_init_array+0x3c>)
 80092a2:	1b64      	subs	r4, r4, r5
 80092a4:	10a4      	asrs	r4, r4, #2
 80092a6:	2600      	movs	r6, #0
 80092a8:	42a6      	cmp	r6, r4
 80092aa:	d109      	bne.n	80092c0 <__libc_init_array+0x24>
 80092ac:	4d0b      	ldr	r5, [pc, #44]	; (80092dc <__libc_init_array+0x40>)
 80092ae:	4c0c      	ldr	r4, [pc, #48]	; (80092e0 <__libc_init_array+0x44>)
 80092b0:	f000 f826 	bl	8009300 <_init>
 80092b4:	1b64      	subs	r4, r4, r5
 80092b6:	10a4      	asrs	r4, r4, #2
 80092b8:	2600      	movs	r6, #0
 80092ba:	42a6      	cmp	r6, r4
 80092bc:	d105      	bne.n	80092ca <__libc_init_array+0x2e>
 80092be:	bd70      	pop	{r4, r5, r6, pc}
 80092c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80092c4:	4798      	blx	r3
 80092c6:	3601      	adds	r6, #1
 80092c8:	e7ee      	b.n	80092a8 <__libc_init_array+0xc>
 80092ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80092ce:	4798      	blx	r3
 80092d0:	3601      	adds	r6, #1
 80092d2:	e7f2      	b.n	80092ba <__libc_init_array+0x1e>
 80092d4:	08009570 	.word	0x08009570
 80092d8:	08009570 	.word	0x08009570
 80092dc:	08009570 	.word	0x08009570
 80092e0:	08009574 	.word	0x08009574

080092e4 <memcpy>:
 80092e4:	440a      	add	r2, r1
 80092e6:	4291      	cmp	r1, r2
 80092e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80092ec:	d100      	bne.n	80092f0 <memcpy+0xc>
 80092ee:	4770      	bx	lr
 80092f0:	b510      	push	{r4, lr}
 80092f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092fa:	4291      	cmp	r1, r2
 80092fc:	d1f9      	bne.n	80092f2 <memcpy+0xe>
 80092fe:	bd10      	pop	{r4, pc}

08009300 <_init>:
 8009300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009302:	bf00      	nop
 8009304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009306:	bc08      	pop	{r3}
 8009308:	469e      	mov	lr, r3
 800930a:	4770      	bx	lr

0800930c <_fini>:
 800930c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800930e:	bf00      	nop
 8009310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009312:	bc08      	pop	{r3}
 8009314:	469e      	mov	lr, r3
 8009316:	4770      	bx	lr
